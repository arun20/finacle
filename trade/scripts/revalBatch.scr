#============================================================
# IMPORTANT: Auto Generated Header. DO NOT CHANGE MANUALLY.
# Domain: Finacle Core
# Library Name: revalBatch.scr
# Description: Batch Func library revalBatch.scr
#============================================================

SUB insertRevalDtls()
#{
	#############################################################################################
	# Insert into REVAL table
	#############################################################################################
	
	fv_timestamp = func_getSysDateTimeWithFormatB("DD-MM-YYYY hh24:mi:ss")	 

	CUST.DATA.tableName = "CUSTOM.C_REVAL"
	CUST.DATA.insertFieldsReval = "REVAL_SRL_NUM,REVAL_DATE,SOL_ID,TRADE_CRNCY_CODE1,TRADE_CRNCY_CODE2,FCY_POSITION_ACCT,FCY_POSITION_BALANCE,THB_POSITION_ACCT,"
	CUST.DATA.insertFieldsReval = CUST.DATA.insertFieldsReval + "THB_POSITION_BALANCE,REVAL_RATE,FCY_REVAL_BALANCE,FCY_EQUIV_THB,MOVED_TO_FCY_ACCT,MOVED_TO_THB_ACCT,"
	CUST.DATA.insertFieldsReval = CUST.DATA.insertFieldsReval + "REVAL_PROFITORLOSS,PROFITORLOSS_FCY,PROFITORLOSS_THB,BANK_ID,DEL_FLG,LCHG_TIME,LCHG_USER_ID,RCRE_USER_ID,RCRE_TIME"
	
	CUST.DATA.insertReval = CUST.DATA.srlNum + "|DT" + CUST.DATA.bodDate + "|" + CUST.DATA.solId + "|" + CUST.DATA.otherCrncy + "|" + CUST.DATA.localCrncy + "|" 
	CUST.DATA.insertReval = CUST.DATA.insertReval + CUST.DATA.tradeAcctSolFcy + "|" + CUST.DATA.otherCrncySolBal + "|" + CUST.DATA.tradeAcctSolLcy + "|" + CUST.DATA.localCrncySolBal + "|" 
	CUST.DATA.insertReval = CUST.DATA.insertReval + CUST.DATA.revalRate + "|" + CUST.DATA.totalFcyPosition + "|" + CUST.DATA.convertAmt + "|" + CUST.DATA.posAcctFcy + "|" + CUST.DATA.revalAcctLcy + "|"
	CUST.DATA.insertReval = CUST.DATA.insertReval + CUST.DATA.profitLossInd + "|" + CUST.DATA.revaluedBalFcy + "|" + CUST.DATA.revaluedBal + "|" + BANCS.STDIN.contextBankId + "|N" + "|DT" + fv_timestamp + "|" + BANCS.STDIN.userId + "|" + BANCS.STDIN.userId + "|DT" + fv_timestamp
	
	fv_a = func_insertIntoCustTableB(CUST.DATA.tableName,CUST.DATA.insertFieldsReval,CUST.DATA.insertReval)
	PRINT(fv_a)
	IF(fv_a != 0) THEN
	#{
		sv_s = func_cmmsgerrdescB("CYCM0007", BANCS.STDIN.userId ,BYREF CUST.DATA.errorMsg)
		PRINT(CUST.DATA.errorMsg)
		sub_genFailureLst()
		GOTO NEXTRECORD		
	#}
	ENDIF		
	sv_d = urhk_dbSqlWithBind("COMMIT")
#}
ENDSUB

SUB genSuccessLst()
#{
	CUST.DATA.successCount = CINT(CUST.DATA.successCount) + 1
	
	CUST.DATA.outRecord = CUST.DATA.successCount + "|" + CUST.DATA.ccy + "|" + CUST.DATA.fcyPositionAcct + "|" + CUST.DATA.fcyPositionBal + "|" + CUST.DATA.idrPositionAcct + "|" + CUST.DATA.idrPositionBal + "|" + CUST.DATA.revalRate + "|" + CUST.DATA.movedToFcyAcct + "|" + CUST.DATA.movedToIdrAcct + "|" + CUST.DATA.revalTran + "|" + CUST.DATA.sol
	PRINT (CUST.DATA.outRecord)	
	sv_r = func_addDataToFileB(CUST.DATA.succLst1,CUST.DATA.outRecord)
	PRINT (sv_r)
#}
ENDSUB

SUB genFailureLst()
#{	
	IF (FIELDEXISTS(CUST.DATA.tradCrncy1)) THEN
	#{
		CUST.DATA.failureCount  = CINT(CUST.DATA.failureCount) + 1
		CUST.DATA.outRecord = CUST.DATA.failureCount + "|" + CUST.DATA.otherCrncy + "|" + CUST.DATA.errorMsg
		sv_r = func_addDataToFileB(CUST.DATA.failLst,CUST.DATA.outRecord)
		PRINT (CUST.DATA.outRecord)
	#}
	ELSE
	#{
		CUST.DATA.failureCount  = CINT(CUST.DATA.failureCount) + 1
		CUST.DATA.outRecord = CUST.DATA.failureCount + "|" + " " + "|"  + CUST.DATA.errorMsg
		sv_r = func_addDataToFileB(CUST.DATA.failLst,CUST.DATA.outRecord)
		PRINT (CUST.DATA.outRecord)
	#}
	ENDIF	
#}
ENDSUB

SUB fetchRevalgenLst()
#{
	#-------------------------------------------------------------------------------------------------
	# Fetch from REVAL table
	#-------------------------------------------------------------------------------------------------
	
	CUST.DATA.ccy = ""
	CUST.DATA.sol = ""
	CUST.DATA.fcyPositionAcct = ""
	CUST.DATA.idrPositionAcct = ""
	CUST.DATA.fcyPositionBal = ""
	CUST.DATA.idrPositionBal = ""
	CUST.DATA.revalRate = ""
	CUST.DATA.movedToFcyAcct = ""
	CUST.DATA.movedToIdrAcct = ""
	CUST.DATA.fcyEquivInIdr = ""
	CUST.DATA.revalTran = ""
	
	sv_s = ""
	sv_s = "ccy,sol,fcyPositionAcct,fcyPositionBal,idrPositionAcct,idrPositionBal,revalRate,movedToFcyAcct,movedToIdrAcct,fcyEquivInIdr,revalTran|"
	sv_s = sv_s + "SELECT TRADE_CRNCY_CODE1,SOL_ID,FCY_POSITION_ACCT,FCY_POSITION_BALANCE,THB_POSITION_ACCT,THB_POSITION_BALANCE,REVAL_RATE,MOVED_TO_FCY_ACCT,MOVED_TO_THB_ACCT,"
	sv_s = sv_s + " FCY_EQUIV_THB,REVAL_TRAN_ID FROM CUSTOM.C_REVAL WHERE BANK_ID = ?SVAR AND TRADE_CRNCY_CODE1 = ?SVAR AND REVAL_DATE = to_date(?SVAR,'DD-MM-YYYY')  "
	
	BANCS.INPARAM.BINDVARS = BANCS.STDIN.contextBankId + "|" + CUST.DATA.otherCrncy + "|" + CUST.DATA.bodDate 
	sv_u = urhk_dbCursorOpenWithBind(sv_s)
	print(sv_u)
	
	IF (sv_u != 0) THEN
	#{
		CUST.DATA.usrMsg  = "Database Error. Please contact Administrator.Ref:[Cursor Error]"
		PRINT(CUST.DATA.usrMsg)
		GOTO ENDSCRIPT
	#}
	ENDIF
	
	CUST.DATA.dbcurNum3 = BANCS.OUTPARAM.DB_CURSOR_NUMBER
	PRINT(CUST.DATA.dbcurNum3)
	CUST.DATA.dbcursor3 = urhk_dbCursorFetch(CUST.DATA.dbcurNum3)
	
	IF(CUST.DATA.dbcursor3 != 0)THEN
	#{
		sv_c = urhk_dbCursorClose(CUST.DATA.dbcurNum3)
		GOTO ENDSCRIPT
	#}
	ENDIF

	WHILE(CUST.DATA.dbcursor3  == 0)
	#{
		CUST.DATA.ccy = BANCS.OUTPARAM.ccy
		PRINT(CUST.DATA.ccy)
		CUST.DATA.sol = BANCS.OUTPARAM.sol
		PRINT(CUST.DATA.sol)
		CUST.DATA.fcyPositionAcct = BANCS.OUTPARAM.fcyPositionAcct
		PRINT(CUST.DATA.fcyPositionAcct)
		CUST.DATA.idrPositionAcct = BANCS.OUTPARAM.idrPositionAcct
		PRINT(CUST.DATA.idrPositionAcct)
		CUST.DATA.fcyPositionBal = CDOUBLE(BANCS.OUTPARAM.fcyPositionBal)
		PRINT(CUST.DATA.fcyPositionBal)
		CUST.DATA.idrPositionBal = CDOUBLE(BANCS.OUTPARAM.idrPositionBal)
		PRINT(CUST.DATA.idrPositionBal)
		CUST.DATA.revalRate = CDOUBLE(BANCS.OUTPARAM.revalRate)
		PRINT(CUST.DATA.revalRate)
		CUST.DATA.movedToFcyAcct = BANCS.OUTPARAM.movedToFcyAcct
		PRINT(CUST.DATA.movedToFcyAcct)
		CUST.DATA.movedToIdrAcct = BANCS.OUTPARAM.movedToIdrAcct
		PRINT(CUST.DATA.movedToIdrAcct)
		CUST.DATA.fcyEquivInIdr = CDOUBLE(BANCS.OUTPARAM.fcyEquivInIdr)
		PRINT(CUST.DATA.fcyEquivInIdr)
		CUST.DATA.revalTran = BANCS.OUTPARAM.revalTran
		PRINT(CUST.DATA.revalTran)
		
		IF(TRIM(CUST.DATA.revalTran) != "")THEN
		#{
			sub_genSuccessLst()
		#}
		ENDIF
		
		CUST.DATA.dbcursor3 = urhk_dbCursorFetch(CUST.DATA.dbcurNum3)
	#}
	DO
	sv_c = urhk_dbCursorClose(CUST.DATA.dbcurNum3)
	#---------------------------------------------------------------------------------
	# Cursor Closed
	#---------------------------------------------------------------------------------
#}
ENDSUB

FUNCTION revalTransPost(BYREF fv_tranId, BYREF fv_tranErrMsg)
#{		
	IF((CDOUBLE(CUST.DATA.revaluedBal) != 0) AND (CUST.DATA.crAcct3 != ""))THEN
	#{
	fv_crPartTran = func_createPartTranB("C",CUST.DATA.crAcct3,CUST.DATA.CON_TRAN_CCY3, CUST.DATA.CON_TRAN_AMT3,"","",CUST.DATA.tranParticulars3,"CUSTB","CREDIT","","ACCNT","","","","N","0",BYREF CUST.DATA.errMsg)
	IF(fv_crPartTran != "0")THEN
	#{
		lv_r = "1"
		fv_closeMTT = func_closeMTTTranB("Y",BYREF CUST.DATA.MTTTranId,BYREF CUST.DATA.status,BYREF CUST.DATA.errMsg)
	#}
	ENDIF	

	fv_drPartTran = func_createPartTranB("D",CUST.DATA.drAcct3,CUST.DATA.CON_TRAN_CCY3,CUST.DATA.CON_TRAN_AMT3,"","",CUST.DATA.tranParticulars3,"CUSTB","DEBIT","","ACCNT","","","","N","0",BYREF CUST.DATA.errMsg)
	IF(fv_drPartTran != "0")THEN
	#{
		lv_r = "1"
		fv_closeMTT = func_closeMTTTranB("Y",BYREF CUST.DATA.MTTTranId,BYREF CUST.DATA.status,BYREF CUST.DATA.errMsg)
	#}
	ENDIF
	#}
	ENDIF

	fv_endTran = func_endMTTTranB(BYREF CUST.DATA.MTTTranId,BYREF CUST.DATA.errMsg)
	IF(fv_endTran != "0")THEN
	#{
		lv_r = "1"
		fv_closeMTT = func_closeMTTTranB("Y",BYREF CUST.DATA.MTTTranId,BYREF CUST.DATA.status,BYREF CUST.DATA.errMsg)
	#}
	ENDIF
	
	fv_tranId       = CUST.DATA.MTTTranId
	fv_tranErrMsg   = CUST.DATA.errMsg
	PRINT(fv_tranId)
	PRINT(fv_tranErrMsg)
	
	fv_closeMTT = func_closeMTTTranB("Y",BYREF CUST.DATA.MTTTranId,BYREF CUST.DATA.status,BYREF CUST.DATA.errMsg)
	RETURN lv_r
#}
ENDFUNCTION

SUB everyCcyRecord()
#{
	#################################################################################################
	# INITIALIZE VARIABLES
	#################################################################################################

	PRINT("hiiiiiiiiiiiiiiiiiiiii")
	# Values Fetched from Cursor
	
	CUST.DATA.tradCrncy1 = BANCS.OUTPARAM.tradCrncy1
	PRINT(CUST.DATA.tradCrncy1)
	CUST.DATA.tradCrncy2 = BANCS.OUTPARAM.tradCrncy2
	PRINT(CUST.DATA.tradCrncy2)
	CUST.DATA.tradeAcct = BANCS.OUTPARAM.tradeAcct
	PRINT(CUST.DATA.tradeAcct)
	CUST.DATA.revalRateCode = BANCS.OUTPARAM.revalRateCode
	PRINT(CUST.DATA.revalRateCode)
	CUST.DATA.revalAcct = BANCS.OUTPARAM.revalAcct
	PRINT(CUST.DATA.revalAcct)
	CUST.DATA.revalPAndLAcct = BANCS.OUTPARAM.revalPAndLAcct
	PRINT(CUST.DATA.revalPAndLAcct)

	# Initializing variables needed for Processing records
	
	CUST.DATA.sucFailFlg = ""
	CUST.DATA.errorMsg = ""
	CUST.DATA.errorMessage = ""
	CUST.DATA.localCrncy = ""
	CUST.DATA.otherCrncy = ""
	CUST.DATA.otherCrncyBal = ""
	CUST.DATA.localCrncyBal = ""
	CUST.DATA.convertAmt = ""
	CUST.DATA.revaluedBal =  ""
	CUST.DATA.profitLossIdrRep = ""
	CUST.DATA.profitLossFcyRep = ""
	CUST.DATA.profitLossInd = ""
	CUST.DATA.revalTranId = ""
	CUST.DATA.revalRate = ""
	CUST.DATA.revaluedBalFcy = ""
	CUST.DATA.solId = ""
	CUST.DATA.posFcyCrncyBal = ""
	CUST.DATA.posLocalCrncyBal = ""
	CUST.DATA.totalFcyPosition = ""
	CUST.DATA.totalLcyPosition = ""
	CUST.DATA.fcyToIdr = ""
	CUST.DATA.signChangeFlg = "N" 
	
	#----------------------------------------------------------------------------------
	# setting local ccy and fcy
	#----------------------------------------------------------------------------------
	
	IF(TRIM(CUST.DATA.tradCrncy1) == CUST.DATA.homeCrncy)THEN
	#{
		CUST.DATA.localCrncy = CUST.DATA.tradCrncy1
		PRINT(CUST.DATA.localCrncy)
		CUST.DATA.otherCrncy = CUST.DATA.tradCrncy2
		PRINT(CUST.DATA.otherCrncy)
	#}
	ELSE
	#{
		CUST.DATA.localCrncy = CUST.DATA.tradCrncy2
		PRINT(CUST.DATA.localCrncy)
		CUST.DATA.otherCrncy = CUST.DATA.tradCrncy1
		PRINT(CUST.DATA.otherCrncy)
	#}
	ENDIF
	
	#---------------------------------------------------------------------------------------
	# fetching account for consolidated position account FCY
	#---------------------------------------------------------------------------------------
	
	IF(TRIM(CUST.DATA.revalAcct) != "")THEN
	#{
		sv_s = CUST.DATA.revalAcct + "|" + CUST.DATA.otherCrncy + "|" + CUST.DATA.revalSol
		PRINT(sv_s)
		sv_u = urhk_B2k_BacidToAcctId(sv_s)
		PRINT(sv_u)
		IF(sv_u != 0)THEN
		#{
			CUST.DATA.errorFlg = "Y"
			sv_s = func_cmmsgerrdescB("CYCM0002", BANCS.STDIN.userId ,BYREF CUST.DATA.errorMsg)
			PRINT(CUST.DATA.errorMsg)
			sub_genFailureLst()
			GOTO NEXTRECORD
		#}
		ELSE
		#{
			sub_copyOutparamFieldB("AcctId","CUST","DATA","posAcctFcy","")
			PRINT(CUST.DATA.posAcctFcy)
		#}
		ENDIF
	#}
	ENDIF
	
	#---------------------------------------------------------------------------------------
	# fetching account for revaluation account LCY
	#---------------------------------------------------------------------------------------
	
	IF(TRIM(CUST.DATA.revalAcct) != "")THEN
	#{
		sv_s = CUST.DATA.revalAcct + "|" + CUST.DATA.localCrncy + "|" + CUST.DATA.revalSol
		PRINT(sv_s)
		sv_u = urhk_B2k_BacidToAcctId(sv_s)
		PRINT(sv_u)
		IF(sv_u != 0)THEN
		#{
			CUST.DATA.errorFlg = "Y"
			sv_s = func_cmmsgerrdescB("CYCM0004", BANCS.STDIN.userId ,BYREF CUST.DATA.errorMsg)
			PRINT(CUST.DATA.errorMsg)
			sub_genFailureLst()
			GOTO NEXTRECORD
		#}
		ELSE
		#{
			sub_copyOutparamFieldB("AcctId","CUST","DATA","revalAcctLcy","")
			PRINT(CUST.DATA.revalAcctLcy)
		#}
		ENDIF
	#}
	ENDIF	
	
	#-------------------------------------------------------------------------------------------
	# Fetching balance for other crncy 
	#-------------------------------------------------------------------------------------------
	
	CUST.DATA.fields = "otherCrncyBal"
	CUST.DATA.query = "SELECT SUM(clr_bal_amt) from tbaadm.GAM where BACID =?SVAR AND ACCT_CRNCY_CODE =?SVAR"
	CUST.DATA.query = CUST.DATA.query + " AND DEl_FLG = 'N' AND ENTITY_CRE_FLG ='Y' AND BANK_ID = ?SVAR AND ACCT_CLS_FLG != 'Y'"
	
	BANCS.INPARAM.BINDVARS = CUST.DATA.tradeAcct + "|" + CUST.DATA.otherCrncy + "|" + BANCS.STDIN.contextBankId	
	sv_s = CUST.DATA.fields + "|" + CUST.DATA.query	
	PRINT(sv_s)
	
	sv_u = urhk_dbSelectWithBind(sv_s)
	print(sv_u)

	IF(sv_u == 0)THEN
	#{
		CUST.DATA.otherCrncyBal = BANCS.OUTPARAM.otherCrncyBal
		PRINT(CUST.DATA.otherCrncyBal)
		CUST.DATA.otherCrncyBal = FORMAT$(CDOUBLE(CUST.DATA.otherCrncyBal),"%2.2f")
		PRINT(CUST.DATA.otherCrncyBal)
	#}
	ENDIF
	
	#-------------------------------------------------------------------------------------------
	# Fetching balance for local crncy 
	#-------------------------------------------------------------------------------------------
	
	CUST.DATA.fields = "localCrncyBal"		
	BANCS.INPARAM.BINDVARS = CUST.DATA.tradeAcct + "|" + CUST.DATA.localCrncy + "|" + BANCS.STDIN.contextBankId	
	sv_s = CUST.DATA.fields + "|" + CUST.DATA.query	
	PRINT(sv_s)

	sv_u = urhk_dbSelectWithBind(sv_s)
	print(sv_u)

	IF(sv_u == 0)THEN
	#{
		CUST.DATA.localCrncyBal = BANCS.OUTPARAM.localCrncyBal
		PRINT(CUST.DATA.localCrncyBal)
		CUST.DATA.localCrncyBal = FORMAT$(CDOUBLE(CUST.DATA.localCrncyBal),"%2.2f")
		PRINT(CUST.DATA.localCrncyBal)
	#}
	ENDIF
	
	#-------------------------------------------------------------------------------------------
	# Fetching balance for position account reval sol fcy
	#-------------------------------------------------------------------------------------------
	
	CUST.DATA.fields = "posFcyCrncyBal"
	CUST.DATA.query = "SELECT clr_bal_amt from tbaadm.GAM where BACID =?SVAR AND ACCT_CRNCY_CODE =?SVAR"
	CUST.DATA.query = CUST.DATA.query + " AND DEl_FLG = 'N' AND ENTITY_CRE_FLG ='Y' AND BANK_ID = ?SVAR AND ACCT_CLS_FLG != 'Y' AND SOL_ID = ?SVAR"
	
	BANCS.INPARAM.BINDVARS = CUST.DATA.revalAcct + "|" + CUST.DATA.otherCrncy + "|" + BANCS.STDIN.contextBankId	+ "|" + CUST.DATA.revalSol
	sv_s = CUST.DATA.fields + "|" + CUST.DATA.query	
	PRINT(sv_s)
	
	sv_u = urhk_dbSelectWithBind(sv_s)
	print(sv_u)

	IF(sv_u == 0)THEN
	#{
		CUST.DATA.posFcyCrncyBal = CDOUBLE(BANCS.OUTPARAM.posFcyCrncyBal)
		PRINT(CUST.DATA.posFcyCrncyBal)
		CUST.DATA.posFcyCrncyBal = FORMAT$(CDOUBLE(CUST.DATA.posFcyCrncyBal),"%2.2f")
		PRINT(CUST.DATA.posFcyCrncyBal)
	#}
	ENDIF
	
	#-------------------------------------------------------------------------------------------
	# Fetching balance for reval account for local crncy 
	#-------------------------------------------------------------------------------------------
	
	CUST.DATA.fields = "posLocalCrncyBal"		
	BANCS.INPARAM.BINDVARS = CUST.DATA.revalAcct + "|" + CUST.DATA.localCrncy + "|" + BANCS.STDIN.contextBankId	+ "|" + CUST.DATA.revalSol
	sv_s = CUST.DATA.fields + "|" + CUST.DATA.query	
	PRINT(sv_s)

	sv_u = urhk_dbSelectWithBind(sv_s)
	print(sv_u)

	IF(sv_u == 0)THEN
	#{
		CUST.DATA.posLocalCrncyBal = CDOUBLE(BANCS.OUTPARAM.posLocalCrncyBal)
		PRINT(CUST.DATA.posLocalCrncyBal)
		CUST.DATA.posLocalCrncyBal = FORMAT$(CDOUBLE(CUST.DATA.posLocalCrncyBal),"%2.2f")
		PRINT(CUST.DATA.posLocalCrncyBal)
	#}
	ENDIF
	
	#-----------------------------------------------------------------------------------------
	# Converting other currency balance to LCY
	#-----------------------------------------------------------------------------------------
	
	#-----------------------------------------------------------------------------------------
	# Fetching rate value from RTL table for reval rate code
	#-----------------------------------------------------------------------------------------
	
	CUST.DATA.fields = "revalRate"
	
	CUST.DATA.sqlQuery = ""
	CUST.DATA.sqlQuery = "SELECT VAR_CRNCY_UNITS FROm TBAADM.RTL"
	CUST.DATA.sqlQuery = CUST.DATA.sqlQuery + " WHERE SRL_NUM =(select max(srl_num)"
	CUST.DATA.sqlQuery = CUST.DATA.sqlQuery + " FROM TBAADM.RTL WHERE FXD_CRNCY_CODE = ?SVAR AND VAR_CRNCY_CODE = ?SVAR and  ratecode =?SVAR AND BANK_ID = ?SVAR AND DEL_FLG = ?SVAR"
	CUST.DATA.sqlQuery = CUST.DATA.sqlQuery + " AND ENTITY_CRE_FLG = ?SVAR) AND"
	CUST.DATA.sqlQuery = CUST.DATA.sqlQuery + " FXD_CRNCY_CODE = ?SVAR AND VAR_CRNCY_CODE = ?SVAR and  ratecode =?SVAR AND BANK_ID = ?SVAR AND DEL_FLG = ?SVAR AND ENTITY_CRE_FLG = ?SVAR"
	CUST.DATA.sqlQuery = CUST.DATA.sqlQuery + " UNION "
	CUST.DATA.sqlQuery = CUST.DATA.sqlQuery + "SELECT VAR_CRNCY_UNITS FROm TBAADM.RTL"
	CUST.DATA.sqlQuery = CUST.DATA.sqlQuery + " WHERE SRL_NUM =(select max(srl_num)"
	CUST.DATA.sqlQuery = CUST.DATA.sqlQuery + " FROM TBAADM.RTL WHERE FXD_CRNCY_CODE = ?SVAR AND VAR_CRNCY_CODE = ?SVAR and  ratecode =?SVAR AND BANK_ID = ?SVAR AND DEL_FLG = ?SVAR"
	CUST.DATA.sqlQuery = CUST.DATA.sqlQuery + " AND ENTITY_CRE_FLG = ?SVAR) AND"
	CUST.DATA.sqlQuery = CUST.DATA.sqlQuery + " FXD_CRNCY_CODE = ?SVAR AND VAR_CRNCY_CODE = ?SVAR and  ratecode =?SVAR AND BANK_ID = ?SVAR AND DEL_FLG = ?SVAR AND ENTITY_CRE_FLG = ?SVAR"
	
	BANCS.INPARAM.BINDVARS = CUST.DATA.otherCrncy + "|" + CUST.DATA.localCrncy + "|" + CUST.DATA.revalRateCode + "|" + BANCS.STDIN.contextBankId + "|N"  + "|Y" + "|" + CUST.DATA.otherCrncy + "|" + CUST.DATA.localCrncy + "|" + CUST.DATA.revalRateCode + "|" + BANCS.STDIN.contextBankId + "|N"  + "|Y" + "|" + CUST.DATA.localCrncy + "|" + CUST.DATA.otherCrncy + "|" + CUST.DATA.revalRateCode + "|" + BANCS.STDIN.contextBankId + "|N"  + "|Y" + "|" + CUST.DATA.localCrncy + "|" + CUST.DATA.otherCrncy + "|" + CUST.DATA.revalRateCode + "|" + BANCS.STDIN.contextBankId + "|N"  + "|Y"
	
	sv_s = CUST.DATA.fields + "|" + CUST.DATA.sqlQuery
	PRINT(sv_s)

	sv_u = urhk_dbSelectWithBind(sv_s)
	print(sv_u)

	IF(sv_u == 0)THEN
	#{
		CUST.DATA.revalRate = CDOUBLE(BANCS.OUTPARAM.revalRate)
		print(CUST.DATA.revalRate)
		CUST.DATA.revalRate = FORMAT$(CDOUBLE(CUST.DATA.revalRate),"%2.2f")
		PRINT(CUST.DATA.revalRate)
	#}
	ENDIF	
	
	#-----------------------------------------------------------------------------------------------
	# Total fcy and lcy position
	#-----------------------------------------------------------------------------------------------
	
	CUST.DATA.totalFcyPosition = CDOUBLE(CUST.DATA.otherCrncyBal) + CDOUBLE(CUST.DATA.posFcyCrncyBal)
	PRINT(CUST.DATA.totalFcyPosition)
	CUST.DATA.totalFcyPosition = FORMAT$(CDOUBLE(CUST.DATA.totalFcyPosition),"%2.2f")
	PRINT(CUST.DATA.totalFcyPosition)
	
	CUST.DATA.totalLcyPosition = CDOUBLE(CUST.DATA.localCrncyBal) + CDOUBLE(CUST.DATA.posLocalCrncyBal)
	PRINT(CUST.DATA.totalLcyPosition)
	CUST.DATA.totalLcyPosition = FORMAT$(CDOUBLE(CUST.DATA.totalLcyPosition),"%2.2f")
	PRINT(CUST.DATA.totalLcyPosition)
	
	CUST.DATA.convertAmt = CDOUBLE(CUST.DATA.totalFcyPosition) * CDOUBLE(CUST.DATA.revalRate)
	print(CUST.DATA.convertAmt)
	CUST.DATA.convertAmt = FORMAT$(CDOUBLE(CUST.DATA.convertAmt),"%2.2f")
	PRINT(CUST.DATA.convertAmt)
	CUST.DATA.fcyToIdr = CUST.DATA.convertAmt
	PRINT(CUST.DATA.fcyToIdr)
	
	IF(CDOUBLE(CUST.DATA.convertAmt) <0 )THEN
	#{
		CUST.DATA.convertAmt = CDOUBLE(CUST.DATA.convertAmt) * (-1)
		PRINT(CUST.DATA.convertAmt)
		CUST.DATA.convertAmt = FORMAT$(CDOUBLE(CUST.DATA.convertAmt),"%2.2f")
		PRINT(CUST.DATA.convertAmt)
	#}
	ENDIF
	
	IF(CDOUBLE(CUST.DATA.totalLcyPosition) <0 )THEN
	#{
		CUST.DATA.totalLcyPosition = CDOUBLE(CUST.DATA.totalLcyPosition) * (-1)
		PRINT(CUST.DATA.totalLcyPosition)
		CUST.DATA.totalLcyPosition = FORMAT$(CDOUBLE(CUST.DATA.totalLcyPosition),"%2.2f")
		PRINT(CUST.DATA.totalLcyPosition)
	#}
	ENDIF
	
	#--------------------------------------------------------------------------------------------------
	# Checking profit or loss
	#--------------------------------------------------------------------------------------------------
	
	CUST.DATA.revaluedBal = CDOUBLE(CUST.DATA.convertAmt) - CDOUBLE(CUST.DATA.totalLcyPosition)
	PRINT(CUST.DATA.revaluedBal)

	IF((CDOUBLE(CUST.DATA.revaluedBal) == 0) AND (CDOUBLE(CUST.DATA.otherCrncyBal) == 0))THEN	
	#{
		 GOTO NEXTRECORD
	#}
	ENDIF
	
	IF(((CDOUBLE(CUST.DATA.revaluedBal) >0) AND (CDOUBLE(CUST.DATA.totalFcyPosition) > 0)) OR ((CDOUBLE(CUST.DATA.revaluedBal)<0) AND (CDOUBLE(CUST.DATA.totalFcyPosition)<0)))THEN
	#{
		CUST.DATA.profitLossInd = "P"	
		CUST.DATA.profitLossIdrRep = CDOUBLE(CUST.DATA.revaluedBal)
		PRINT(CUST.DATA.profitLossIdrRep)
	#}
	ENDIF
	IF(((CDOUBLE(CUST.DATA.revaluedBal) >0) AND (CDOUBLE(CUST.DATA.totalFcyPosition) < 0)) OR ((CDOUBLE(CUST.DATA.revaluedBal)<0) AND (CDOUBLE(CUST.DATA.totalFcyPosition)>0)))THEN
	#{
		CUST.DATA.profitLossInd = "L"
		CUST.DATA.profitLossIdrRep = CDOUBLE(CUST.DATA.revaluedBal)
		PRINT(CUST.DATA.profitLossIdrRep)		
	#}
	ENDIF
	
	IF(CDOUBLE(CUST.DATA.revaluedBal) <0)THEN
	#{
		CUST.DATA.signChangeFlg = "Y"
		CUST.DATA.revaluedBal = CDOUBLE(CUST.DATA.revaluedBal) * (-1)
	#}
	ENDIF
	
	CUST.DATA.revaluedBal = FORMAT$(CDOUBLE(CUST.DATA.revaluedBal),"%2.2f")
	PRINT(CUST.DATA.revaluedBal)

	#--------------------------------------------------------------------------------------------------------
	# Converting revalued balance to FCY
	#--------------------------------------------------------------------------------------------------------
	IF(CDOUBLE(CUST.DATA.revalRate) != 0) THEN
	#{
		CUST.DATA.revaluedBalFcy = CDOUBLE(CUST.DATA.revaluedBal)/CDOUBLE(CUST.DATA.revalRate)
	#}
	ENDIF
	PRINT(CUST.DATA.revaluedBalFcy)
	CUST.DATA.revaluedBalFcy = FORMAT$(CDOUBLE(CUST.DATA.revaluedBalFcy),"%2.2f")
	PRINT(CUST.DATA.revaluedBalFcy)
	
	IF(CUST.DATA.signChangeFlg == "Y")THEN
	#{	
		CUST.DATA.profitLossFcyRep = CDOUBLE(CUST.DATA.revaluedBalFcy) *(-1)
		PRINT(CUST.DATA.profitLossFcyRep)
	#}
	ELSE
	#{
		CUST.DATA.profitLossFcyRep = CDOUBLE(CUST.DATA.revaluedBalFcy) 
		PRINT(CUST.DATA.profitLossFcyRep)
	#}
	ENDIF
	CUST.DATA.profitLossFcyRep = FORMAT$(CDOUBLE(CUST.DATA.profitLossFcyRep),"%2.2f")
	PRINT(CUST.DATA.profitLossFcyRep)
	CUST.DATA.profitLossIdrRep = FORMAT$(CDOUBLE(CUST.DATA.profitLossIdrRep),"%2.2f")
	PRINT(CUST.DATA.profitLossIdrRep)

	#--------------------------------------------------------------------------------------------------
	# Fetching srl num
	#--------------------------------------------------------------------------------------------------
	
	CUST.DATA.srlNum = ""

	CUST.DATA.field = "srlNum"
	CUST.DATA.sqlQuery = "SELECT MAX(TO_NUMBER(REVAL_SRL_NUM))+1 from CUSTOM.C_REVAL WHERE TRADE_CRNCY_CODE1 = ?SVAR AND TRADE_CRNCY_CODE2 = ?SVAR AND BANK_ID = ?SVAR AND DEL_FLG =?SVAR"
	
	BANCS.INPARAM.BINDVARS = CUST.DATA.otherCrncy + "|" + CUST.DATA.localCrncy + "|" + BANCS.STDIN.contextBankId + "|N"	
	sv_s = CUST.DATA.field + "|" + CUST.DATA.sqlQuery
	
	PRINT(sv_s)
	sv_d = urhk_dbSelectWithBind(sv_s)
	PRINT(sv_d)
	IF(sv_d == 0)THEN
	#{
		CUST.DATA.srlNum = BANCS.OUTPARAM.srlNum
		PRINT(CUST.DATA.srlNum)
	#}
	ENDIF
	IF(CUST.DATA.srlNum == "")THEN
	#{
		CUST.DATA.srlNum = "00001"
	#}
	ENDIF
	PRINT(CUST.DATA.srlNum)
	
	# Initializing the transaction
	
	CUST.DATA.status = ""
	CUST.DATA.MTTTranId = ""
	CUST.DATA.errMsg = ""
	lv_r = "0"
	BANCS.INPARAM.ExceptionFlg ="I"
	
	fv_closeMTT = func_closeMTTTranB("Y",BYREF CUST.DATA.MTTTranId,BYREF CUST.DATA.status,BYREF CUST.DATA.errMsg)
	
	fv_initMTT = func_mttInitializeB("Y","Y","FIRST_GROUP","N","I",BYREF CUST.DATA.errMsg)
	IF(fv_initMTT != "0")THEN
	#{
		lv_r = "1"
		fv_closeMTT = func_closeMTTTranB("Y",BYREF CUST.DATA.MTTTranId,BYREF CUST.DATA.status,BYREF CUST.DATA.errMsg)
	#}
	ENDIF
	
	fv_defineMTT = func_defineMTTTranB("0","T","BT","Y","MTT tran","Y","CUSTB","I",BYREF CUST.DATA.errMsg)
	IF(fv_defineMTT != "0")THEN
	#{
		lv_r = "1"
		fv_closeMTT = func_closeMTTTranB("Y",BYREF CUST.DATA.MTTTranId,BYREF CUST.DATA.status,BYREF CUST.DATA.errMsg)
	#}
	ENDIF		
	
	#-------------------------------------------------------------------------------------------
	# Fetching distinct sol id from sol table
	#-------------------------------------------------------------------------------------------
	
	sv_s = ""
	sv_s = "solId| SELECT DISTINCT SOL_ID FROM TBAADM.SOl WHERE BANK_ID = ?SVAR"
	
	BANCS.INPARAM.BINDVARS = BANCS.STDIN.contextBankId
	PRINT(sv_s)
	
	sv_u = urhk_dbCursorOpenWithBind(sv_s)
	print(sv_u)
	
	IF (sv_u != 0) THEN
	#{
		CUST.DATA.usrMsg  = "Database Error. Please contact Administrator.Ref:[Cursor Error]"
		PRINT(CUST.DATA.usrMsg)
		GOTO ENDOFSCRIPT
	#}
	ENDIF
	
	CUST.DATA.dbcurNum1 = BANCS.OUTPARAM.DB_CURSOR_NUMBER
	PRINT(CUST.DATA.dbcurNum1)
	CUST.DATA.dbcursor1 = urhk_dbCursorFetch(CUST.DATA.dbcurNum1)
	
	IF(CUST.DATA.dbcursor1 != 0)THEN
	#{
		sv_c = urhk_dbCursorClose(CUST.DATA.dbcurNum1)
		GOTO NEXTRECORD
	#}
	ENDIF

	WHILE(CUST.DATA.dbcursor1  == 0)
	#{
		CUST.DATA.solId = BANCS.OUTPARAM.solId
		PRINT(CUST.DATA.solId)
		
		CUST.DATA.tradeAcctSolLcy = ""
		CUST.DATA.tradeAcctSolFcy = ""
		CUST.DATA.otherCrncySolBal = ""
		CUST.DATA.localCrncySolBal = ""
		
		#-------------------------------------------------------------------------------------------
		# Fetching balance for other crncy for a particular sol
		#-------------------------------------------------------------------------------------------
		
		CUST.DATA.fields = "otherCrncySolBal,tradeAcctSolFcy"
		CUST.DATA.query = "SELECT clr_bal_amt,foracid from tbaadm.GAM where BACID =?SVAR AND ACCT_CRNCY_CODE =?SVAR"
		CUST.DATA.query = CUST.DATA.query + " AND DEl_FLG = 'N' AND ENTITY_CRE_FLG ='Y' AND BANK_ID = ?SVAR AND ACCT_CLS_FLG != 'Y' AND SOL_ID = ?SVAR"
		
		BANCS.INPARAM.BINDVARS = CUST.DATA.tradeAcct + "|" + CUST.DATA.otherCrncy + "|" + BANCS.STDIN.contextBankId	+ "|" + CUST.DATA.solId
		sv_s = CUST.DATA.fields + "|" + CUST.DATA.query	
		PRINT(sv_s)
		
		sv_u = urhk_dbSelectWithBind(sv_s)
		print(sv_u)

		IF(sv_u == 0)THEN
		#{
			CUST.DATA.otherCrncySolBal = CDOUBLE(BANCS.OUTPARAM.otherCrncySolBal)
			PRINT(CUST.DATA.otherCrncySolBal)
			CUST.DATA.otherCrncySolBal = FORMAT$(CDOUBLE(CUST.DATA.otherCrncySolBal),"%2.2f")
			PRINT(CUST.DATA.otherCrncySolBal)
			CUST.DATA.tradeAcctSolFcy = BANCS.OUTPARAM.tradeAcctSolFcy
			PRINT(CUST.DATA.tradeAcctSolFcy)
		#}
		ELSE
		#{
			GOTO LOCALBAL
		#}
		ENDIF
		
		#---------------------------------------------------------------------------------------
		# fetching account for trading account FCY for particular sol
		#---------------------------------------------------------------------------------------
		
		IF(CDOUBLE(CUST.DATA.otherCrncySolBal) !=0)THEN
		#{
			CUST.DATA.tranParticulars1 = "FCY POSITION" + " " + CUST.DATA.solId				
			fv_drPartTran = func_createPartTranB("D",CUST.DATA.tradeAcctSolFcy,CUST.DATA.otherCrncy,CUST.DATA.otherCrncySolBal,"","",CUST.DATA.tranParticulars1,"CUSTB","DEBIT","","ACCNT","","","","N","0",BYREF CUST.DATA.errMsg)
			IF(fv_drPartTran != "0")THEN
			#{
				lv_r = "1"
				fv_closeMTT = func_closeMTTTranB("Y",BYREF CUST.DATA.MTTTranId,BYREF CUST.DATA.status,BYREF CUST.DATA.errMsg)
			#}
			ENDIF
		#}
		ENDIF
		
		LOCALBAL:
		
		#------------------------------------------------------------------------------------------------
		# Fetching balance for local crncy 
		#------------------------------------------------------------------------------------------------
		
		CUST.DATA.fields = "localCrncySolBal,tradeAcctSolLcy"		
		BANCS.INPARAM.BINDVARS = CUST.DATA.tradeAcct + "|" + CUST.DATA.localCrncy + "|" + BANCS.STDIN.contextBankId	+ "|" + CUST.DATA.solId
		sv_s = CUST.DATA.fields + "|" + CUST.DATA.query	
		PRINT(sv_s)

		sv_u = urhk_dbSelectWithBind(sv_s)
		print(sv_u)

		IF(sv_u == 0)THEN
		#{
			CUST.DATA.localCrncySolBal = CDOUBLE(BANCS.OUTPARAM.localCrncySolBal)
			PRINT(CUST.DATA.localCrncySolBal)
			CUST.DATA.localCrncySolBal = FORMAT$(CDOUBLE(CUST.DATA.localCrncySolBal),"%2.2f")
			PRINT(CUST.DATA.localCrncySolBal)
			CUST.DATA.tradeAcctSolLcy = BANCS.OUTPARAM.tradeAcctSolLcy
			PRINT(CUST.DATA.tradeAcctSolLcy)
		#}
		ELSE
		#{
			GOTO INNERLOOP
		#}
		ENDIF		
		
		IF(CDOUBLE(CUST.DATA.localCrncySolBal) !=0)THEN
		#{				
			CUST.DATA.tranParticulars1 = "LCY POSITION" + " " + CUST.DATA.solId				
			fv_drPartTran = func_createPartTranB("D",CUST.DATA.tradeAcctSolLcy,CUST.DATA.localCrncy,CUST.DATA.localCrncySolBal,"","",CUST.DATA.tranParticulars1,"CUSTB","DEBIT","","ACCNT","","","","N","0",BYREF CUST.DATA.errMsg)
			IF(fv_drPartTran != "0")THEN
			#{
				lv_r = "1"
				fv_closeMTT = func_closeMTTTranB("Y",BYREF CUST.DATA.MTTTranId,BYREF CUST.DATA.status,BYREF CUST.DATA.errMsg)
			#}
			ENDIF
		
		#}
		ENDIF
	
		INNERLOOP:
			sub_insertRevalDtls()

		CUST.DATA.dbcursor1 = urhk_dbCursorFetch(CUST.DATA.dbcurNum1)
	#}
	DO
	sv_c = urhk_dbCursorClose(CUST.DATA.dbcurNum1)
	#---------------------------------------------------------------------------------
	# Cursor Closed
	#---------------------------------------------------------------------------------
	
	#-------------------------------------------------------------------------------------------
	# Other legs for position account and revaluation account
	#-------------------------------------------------------------------------------------------
	
	# compare total balances and write cr legs
	
	IF(CDOUBLE(CUST.DATA.otherCrncyBal)!=0)THEN
	#{
		CUST.DATA.tranParticulars1 = "Consolidated FCY POSITION"			
		fv_crPartTran = func_createPartTranB("C",CUST.DATA.posAcctFcy,CUST.DATA.otherCrncy, CUST.DATA.otherCrncyBal,"","",CUST.DATA.tranParticulars1,"CUSTB","CREDIT","","ACCNT","","","","N","0",BYREF CUST.DATA.errMsg)
		IF(fv_crPartTran != "0")THEN
		#{
			lv_r = "1"
			fv_closeMTT = func_closeMTTTranB("Y",BYREF CUST.DATA.MTTTranId,BYREF CUST.DATA.status,BYREF CUST.DATA.errMsg)
		#}
		ENDIF
	#}
	ENDIF
	
	IF(CDOUBLE(CUST.DATA.localCrncyBal)!= 0)THEN
	#{
		CUST.DATA.tranParticulars1 = "LCY POSITION"			
		fv_crPartTran = func_createPartTranB("C",CUST.DATA.revalAcctLcy,CUST.DATA.localCrncy, CUST.DATA.localCrncyBal,"","",CUST.DATA.tranParticulars1,"CUSTB","CREDIT","","ACCNT","","","","N","0",BYREF CUST.DATA.errMsg)
		IF(fv_crPartTran != "0")THEN
		#{
			lv_r = "1"
			fv_closeMTT = func_closeMTTTranB("Y",BYREF CUST.DATA.MTTTranId,BYREF CUST.DATA.status,BYREF CUST.DATA.errMsg)
		#}
		ENDIF
	#}
	ENDIF	
	

	#---------------------------------------------------------------------------------------
	# Fetching account for revaluation P&L LCY
	#---------------------------------------------------------------------------------------
	
	IF(TRIM(CUST.DATA.revalPAndLAcct) != "")THEN
	#{
		sv_s = CUST.DATA.revalPAndLAcct + "|" + CUST.DATA.localCrncy + "|" + CUST.DATA.revalSol
		PRINT(sv_s)
		sv_u = urhk_B2k_BacidToAcctId(sv_s)
		PRINT(sv_u)
		IF(sv_u != 0)THEN
		#{
			CUST.DATA.errorFlg = "Y"
			sv_s = func_cmmsgerrdescB("CYCM0005", BANCS.STDIN.userId ,BYREF CUST.DATA.errorMsg)
			PRINT(CUST.DATA.errorMsg)
			sub_genFailureLst()
			GOTO NEXTRECORD
		#}
		ELSE
		#{
			sub_copyOutparamFieldB("AcctId","CUST","DATA","revalPAndLAcctLcy","")
			PRINT(CUST.DATA.revalPAndLAcctLcy)
		#}
		ENDIF
	#}
	ENDIF	
	
	IF(CUST.DATA.profitLossInd == "P")THEN
	#{
		CUST.DATA.drAcct3 = CUST.DATA.revalAcctLcy
		CUST.DATA.crAcct3 = CUST.DATA.revalPAndLAcctLcy
		CUST.DATA.tranParticulars3 = "Revaluation profit"
		print(CUST.DATA.crAcct3)
		print(CUST.DATA.drAcct3)
	#}
	ENDIF
	
	IF(CUST.DATA.profitLossInd == "L")THEN
	#{
		CUST.DATA.drAcct3 = CUST.DATA.revalPAndLAcctLcy
		CUST.DATA.crAcct3 = CUST.DATA.revalAcctLcy
		CUST.DATA.tranParticulars3 = "Revaluation loss"
		print(CUST.DATA.crAcct3)
                print(CUST.DATA.drAcct3)
	#}
	ENDIF
	IF((CUST.DATA.profitLossInd != "L") AND (CUST.DATA.profitLossInd != "P")) THEN
	#{
		CUST.DATA.drAcct3 = ""
		CUST.DATA.crAcct3 = ""
	#}
	ENDIF
	
	CUST.DATA.CON_TRAN_AMT3 = CUST.DATA.revaluedBal
	CUST.DATA.CON_TRAN_CCY3 = CUST.DATA.localCrncy	
	print(CUST.DATA.CON_TRAN_CCY3)
	print(CUST.DATA.CON_TRAN_AMT3)
	sv_p = func_revalTransPost(BYREF CUST.DATA.MTTTranId, BYREF CUST.DATA.errorMsg)
	PRINT(sv_p)

	IF((CUST.DATA.errorMsg != "") OR (TRIM(CUST.DATA.MTTTranId) ==""))THEN
	#{		
		IF(CUST.DATA.errorMsg == "")THEN
		#{
			sv_s = func_cmmsgerrdescB("CYCM0006", BANCS.STDIN.userId ,BYREF CUST.DATA.errorMsg)
			PRINT(CUST.DATA.errorMsg)
		#}
		ENDIF
		sub_genFailureLst()
		GOTO NEXTRECORD
	#}
	ENDIF
								
	IF((CUST.DATA.MTTTranId !="") AND (CUST.DATA.errorMsg== ""))THEN
	#{
		PRINT("success")
		PRINT(CUST.DATA.MTTTranId)
		CUST.DATA.revalTranId = CUST.DATA.MTTTranId
		PRINT(CUST.DATA.revalTranId)
		
	#}
	ENDIF	

	NEXTRECORD :
	#-------------------------------------------------------------------------------------------------
	# Update REVAL table
	#-------------------------------------------------------------------------------------------------
	
	IF(TRIM(CUST.DATA.revalTranId) != "")THEN
	#{
		sv_s = ""
		sv_s = "UPDATE CUSTOM.C_REVAL SET REVAL_TRAN_ID = ?SVAR,REVAL_TRAN_DATE = to_date(?SVAR,'DD-MM-YYYY') "
		sv_s = sv_s + "WHERE BANK_ID = ?SVAR AND REVAL_DATE = to_date(?SVAR,'DD-MM-YYYY') AND TRADE_CRNCY_CODE1 = ?SVAR"
		PRINT(sv_s)
		BANCS.INPARAM.BINDVARS = TRIM(CUST.DATA.revalTranId) + "|" + CUST.DATA.bodDate + "|" + BANCS.STDIN.contextBankId + "|" + CUST.DATA.bodDate + "|" + CUST.DATA.otherCrncy
		PRINT(BANCS.INPARAM.BINDVARS)
		sv_d = urhk_dbSqlWithBind(sv_s)
		IF(sv_d != 0)THEN
		#{
			CUST.DATA.errorMsg = "The transaction is not updated"
			PRINT(CUST.DATA.errorMsg)
			sub_genFailureLst()
		#}
		ENDIF
		sv_d = urhk_dbSqlWithBind("COMMIT")
		sub_fetchRevalgenLst()
		
		# update second lst
		CUST.DATA.successCount2 = CINT(CUST.DATA.successCount2) + 1
		CUST.DATA.outRecord2 = CUST.DATA.successCount2 + "|" + CUST.DATA.ccy + "|" +CUST.DATA.revalRate + "|" + CUST.DATA.fcyToIdr + "|" + CUST.DATA.profitLossIdrRep + "|" + CUST.DATA.revalTranId + "|" + CUST.DATA.totalFcyPosition + "|" + CUST.DATA.totalLcyPosition
		PRINT (CUST.DATA.outRecord2)	
		sv_r = func_addDataToFileB(CUST.DATA.succLst2,CUST.DATA.outRecord2)
		PRINT (sv_r)
	#}
	ENDIF	
#}
ENDSUB

<--START
	# Script body goes here
	#TRACE ON
		sub_everyCcyRecord()	
	#TRACE OFF
END-->

	
