#============================================================
# IMPORTANT: Auto Generated Header. DO NOT CHANGE MANUALLY.
# Product: Finacle Core
# Category: User Defined
# Script: ODCM_SLAcctChrgDtls.scr
# Type: NA|default
# Description: ODCM_SLAcctChrgDtls.scr
# Author: Saisomasekhar_N
# Date: 7/24/18 3:06 PM
# Modification Log:
#============================================================
IMPORT LibCommonB001
IMPORT LibCommonB002
IMPORT customFields
IMPORT SLAcctChrgDtls
<--START
	# Script body goes here
	TRACE ON
	sub_createRepClassB("CUST","DATA")
	
	##sv_a = urhk_b2k_printRepos("BANCS")
	##sv_a = urhk_b2k_printRepos("ONS")
	
	### 1.GET MENU ID ###
	CUST.DATA.menuId = ""
	CUST.DATA.errorFlg2 = ""
	sv_a = func_getCallingMenuOptionB("CMMSG00004",BYREF CUST.DATA.menuId)
	PRINT(CUST.DATA.menuId)
	IF(CUST.DATA.menuId != "IDCM")THEN
	#{
		EXITSCRIPT
	#}
	ENDIF
	
	### 2.INITIALIZE VARIABLES ###
	sub_intiVars()
	
	### 3.GET KEY FIELD VALUES FROM SRV - MENU SPECIFIC ###
	CUST.DATA.srvFieldNames = "dcInMsgDtl.dcOutCritDtl.dcFuncCode|dcInMsgDtl.dcOutCritDtl.dcRefNum|dcInMsgDtl.dcOutGenDtl.dcPordDtl.purOrdrDtl.purOrdHdrDtl.entityB2kId|dcInMsgDtl.dcOutCritDtl.dcReg.type"
	CUST.DATA.srvFieldNames = CUST.DATA.srvFieldNames + "|" + "dcInMsgDtl.dcChargeDtl.eventSrlNum|dcInMsgDtl.dcOutGenDtl.dcAmtDtl.dcOpenValue|dcInMsgDtl.dcOutCritDtl.dcCrncyCode"
	CUST.DATA.srvFieldNames = CUST.DATA.srvFieldNames + "|" + "dcInMsgDtl.dcAmendDtl.amendInd|dcInMsgDtl.dcAmendDtl.amendAmt|dcInMsgDtl.dcOutGenDtl.dcAmtDtl.dcTolerancePcnt"
	CUST.DATA.srvFieldNames = CUST.DATA.srvFieldNames + "|" + "dcInMsgDtl.dcAmendDtl.amendTolerancePcnt|dcInMsgDtl.dcAmendDtl.amendStatus"
	CUST.DATA.srvFieldNames = CUST.DATA.srvFieldNames + "|" + "dcInMsgDtl.dcAddlnDtl.dcConfReqdFlg" + "|" + "dcInMsgDtl.dcAddlnDtl.addConfirmation"
	CUST.DATA.srvFieldNames = CUST.DATA.srvFieldNames + "|" + "dcInMsgDtl.dcAmendDtl.dcConfReqdFlg" + "|" + "dcInMsgDtl.dcAmendDtl.addConfirmation"
	CUST.DATA.srvFieldNames = CUST.DATA.srvFieldNames + "|" + "dcInMsgDtl.dcAmendDtl.dcConfAmt"
	CUST.DATA.srvFieldValues = "funcCode|b2kRefNo|entityB2kId|b2kType|eventSrlNum|b2kEventAmt|b2kCcy|amendInd|amendAmt|tolrncPcnt|amdTolPcnt|amendStatus|isConfrmReqd|addCon"
	CUST.DATA.srvFieldValues = CUST.DATA.srvFieldValues + "|amdConfrmReqd|amdAddCon|amdDcConfAmt"
	sub_getFieldValuesfromSRVStructB("17","CUST","DATA",CUST.DATA.srvFieldNames,CUST.DATA.srvFieldValues)
	PRINT(CUST.DATA.funcCode)
	PRINT(CUST.DATA.b2kRefNo)
	PRINT(CUST.DATA.entityB2kId)
	PRINT(CUST.DATA.b2kType)
	CUST.DATA.b2kIdType = "DOCCR"
	PRINT(CUST.DATA.b2kIdType)
	PRINT(CUST.DATA.eventSrlNum)
	CUST.DATA.b2kEventAmt = CDOUBLE(CUST.DATA.b2kEventAmt)
	PRINT(CUST.DATA.b2kEventAmt)
	PRINT(CUST.DATA.b2kCcy)
	PRINT(CUST.DATA.amendInd)
	CUST.DATA.amendAmt = CDOUBLE(CUST.DATA.amendAmt)
	PRINT(CUST.DATA.amendAmt)
	PRINT(CUST.DATA.tolrncPcnt)
	PRINT(CUST.DATA.amdTolPcnt)
	PRINT(CUST.DATA.amendStatus)
	PRINT(CUST.DATA.isConfrmReqd)
	PRINT(CUST.DATA.addCon)
	PRINT(CUST.DATA.amdConfrmReqd)
	PRINT(CUST.DATA.amdAddCon)
	PRINT(CUST.DATA.amdDcConfAmt)
	CUST.DATA.amendAmtWithTol = "0"	
	### FUNCTION K-PREADVICE, E-ADVICE, C-COPY , W-PROCESS MESSAGE ###
	IF((CUST.DATA.serviceName == "SRV_AdviceInwardDcDtl")OR(CUST.DATA.serviceName == "SRV_PreAdviceInwardDcDtl"))THEN
	#{
		### API CALLS ###
		sub_getSlLimitId()
		PRINT(CUST.DATA.slLimitId)
		
		sub_getFieldValuesfromSRVStructB("1","CUST","DATA","dcInMsgDtl.dcAddlnDtl.totDcConfAmt","confrmAmt")
		PRINT(CUST.DATA.confrmAmt)
		IF((CUST.DATA.isConfrmReqd == "Y") AND (CUST.DATA.addCon == "Y")) THEN
		#{
			CUST.DATA.confrmAmt = CDOUBLE(CUST.DATA.b2kEventAmt) + (CDOUBLE(CUST.DATA.b2kEventAmt) * (CDOUBLE(CUST.DATA.tolrncPcnt)/100))
		#}
		ENDIF
		
		IF((CUST.DATA.slLimitId != "")AND(CDOUBLE(CUST.DATA.confrmAmt) !=0)AND(CUST.DATA.isConfrmReqd == "Y"))THEN
		#{
			BANCS.INPUT.acfNum 		= CUST.DATA.slLimitId
			BANCS.INPUT.holdAmount 	= FORMAT$(CDOUBLE(CUST.DATA.confrmAmt),"%2.2f")
			BANCS.INPUT.earType 	= "A"
			BANCS.INPUT.currency 	= CUST.DATA.b2kCcy
			sv_a = func_callMngEarMarkAPI(BYREF CUST.DATA.errorFlg)
			IF(CUST.DATA.errorFlg == "Y")THEN
			#{
				GOTO ENDOFSCRIPT
			#}
			ENDIF
			CUST.DATA.totalEarMark = CUST.DATA.confrmAmt
			#}
		ELSE
			#{
			CUST.DATA.totalEarMark = "0.00"
		#}
		ENDIF
		
		### PERFORM DB OPERATIONS ###
		sv_a = func_dbOps(BYREF CUST.DATA.errorFlg)
		IF(sv_a != 0)THEN
		#{
			PRINT(CUST.DATA.errorMsg)
			IF((CUST.DATA.slLimitId != "")AND(CDOUBLE(CUST.DATA.confrmAmt) !=0)AND(CUST.DATA.isConfrmReqd == "Y"))THEN
			#{
				### REVERSE API CALLS ###
				BANCS.INPUT.earType = "R"
				sv_a = func_callMngEarMarkAPI(BYREF CUST.DATA.errorFlg)
				GOTO ENDOFSCRIPT
			#}
			ENDIF
		#}
		ENDIF
	#}
	ENDIF
	
	### FUNCTION A-AMENDMENT , T-AMENDMENT STATUS MAINTENANCE ###
	IF((CUST.DATA.serviceName == "SRV_AmendInwardDcDtl")OR(CUST.DATA.serviceName == "SRV_AmendStatChgInwardDcDtl"))THEN
	#{
		### API CALLS ###
		sub_getSlLimitId()
		sub_getFieldValuesfromONSB("1","CUST","DATA","tfc_limit_details_FIELD_1","slLimitId","")
        	CUST.DATA.slLimitId     = TOUPPER(CUST.DATA.slLimitId)
        	PRINT(CUST.DATA.slLimitId)
		PRINT(CUST.DATA.slLimitId)
		PRINT(CUST.DATA.prevEarMark)
		
		sub_getFieldValuesfromSRVStructB("3","CUST","DATA","dcInMsgDtl.dcAmendDtl.amendStatus|dcInMsgDtl.dcAmendDtl.amendNewValue|dcInMsgDtl.dcAmendDtl.amendAvailValue","amendStatus|amendNewValue|amendAvailValue")
		PRINT(CUST.DATA.amendStatus)
		PRINT(CUST.DATA.amendNewValue)
		PRINT(CUST.DATA.amendAvailValue)
		
		CUST.DATA.amtDiff = CDOUBLE(CUST.DATA.amendNewValue) - CDOUBLE(CUST.DATA.amendAvailValue)
		PRINT(CUST.DATA.amtDiff)
		
		IF((CUST.DATA.slLimitId != "") AND ((CUST.DATA.amendStatus == "A") OR (CUST.DATA.amendStatus == "W")) AND (CUST.DATA.amdConfrmReqd == "Y"))THEN
		#{
			BANCS.INPUT.earType = "A"
			IF(CDOUBLE(CUST.DATA.amtDiff) <0)THEN
			#{
				CUST.DATA.amtDiff 		= - 1 * CDOUBLE(CUST.DATA.amtDiff)
				BANCS.INPUT.earType 	= "R"
				CUST.DATA.totalEarMark 	= CDOUBLE(CUST.DATA.prevEarMark) - CDOUBLE(CUST.DATA.amtDiff)
			#}
			ENDIF
			IF(CDOUBLE(CUST.DATA.amtDiff) >0)THEN
			#{
				CUST.DATA.totalEarMark 	= CDOUBLE(CUST.DATA.prevEarMark) + CDOUBLE(CUST.DATA.amtDiff)
				BANCS.INPUT.earType 	= "A"
			#}
			ENDIF
			BANCS.INPUT.acfNum 		= CUST.DATA.slLimitId
			#BANCS.INPUT.holdAmount 	= FORMAT$(CDOUBLE(CUST.DATA.amtDiff),"%2.2f")
			BANCS.INPUT.holdAmount         = FORMAT$(CDOUBLE(CUST.DATA.amdDcConfAmt),"%2.2f")
			BANCS.INPUT.currency 	= CUST.DATA.b2kCcy
			PRINT(BANCS.INPUT.earType)
			sv_a = func_callMngEarMarkAPI(BYREF CUST.DATA.errorFlg)
			IF(CUST.DATA.errorFlg == "Y")THEN
			#{
				GOTO ENDOFSCRIPT
			#}
			ENDIF
			CUST.DATA.totalEarMark = BANCS.INPUT.holdAmount
			#}
		ELSE
			#{
			CUST.DATA.totalEarMark = CUST.DATA.prevEarMark
		#}
		ENDIF
		PRINT(CUST.DATA.totalEarMark)
		
		### PERFORM DB OPERATIONS ###
		sv_a = func_dbOps(BYREF CUST.DATA.errorFlg)
		IF(sv_a != 0)THEN
		#{
			IF((CUST.DATA.slLimitId != "")AND(CDOUBLE(CUST.DATA.amdDcConfAmt) !=0)AND(CUST.DATA.amendStatus == "A")AND(CUST.DATA.isConfrmReqd == "Y"))THEN
			#{
				### REVERSE API CALLS ###
				IF(BANCS.INPUT.earType == "A")THEN
				#{
					BANCS.INPUT.earType = "R"
				#}
				ENDIF
				IF(BANCS.INPUT.earType == "R")THEN
				#{
					BANCS.INPUT.earType = "A"
				#}
				ENDIF
				sv_a = func_callMngEarMarkAPI(BYREF CUST.DATA.errorFlg)
				GOTO ENDOFSCRIPT
			#}
			ENDIF
		#}
		ENDIF
	#}
	ENDIF
	
	### FUNCTION U-NON BILL UTILIZATION ###
	IF(CUST.DATA.serviceName == "SRV_NOBillUtilInwardDCDtl")THEN
	#{
		### API CALLS ###
		sub_getSlLimitId()
		PRINT(CUST.DATA.slLimitId)
		PRINT(CUST.DATA.prevEarMark)
		
		sub_getFieldValuesfromSRVStructB("1","CUST","DATA","dcInMsgDtl.dcNBUDtl.noBillUtilAmt","nonBillUtilAmt")
		PRINT(CUST.DATA.nonBillUtilAmt)
		
		IF((CUST.DATA.slLimitId != "")AND(CDOUBLE(CUST.DATA.nonBillUtilAmt) != 0)AND(CUST.DATA.isConfrmReqd == "Y"))THEN
		#{
			BANCS.INPUT.acfNum 		= CUST.DATA.slLimitId
			BANCS.INPUT.holdAmount 	= FORMAT$(CDOUBLE(CUST.DATA.nonBillUtilAmt),"%2.2f")
			BANCS.INPUT.earType 	= "A"
			BANCS.INPUT.currency 	= CUST.DATA.b2kCcy
			sv_a = func_callMngEarMarkAPI(BYREF CUST.DATA.errorFlg)
			IF(CUST.DATA.errorFlg == "Y")THEN
			#{
				GOTO ENDOFSCRIPT
			#}
			ENDIF
			CUST.DATA.totalEarMark = CDOUBLE(CUST.DATA.prevEarMark) + CDOUBLE(CUST.DATA.nonBillUtilAmt)
			#}
		ELSE
			#{
			CUST.DATA.totalEarMark = CUST.DATA.prevEarMark
		#}
		ENDIF
		PRINT(CUST.DATA.totalEarMark)
		
		### PERFORM DB OPERATIONS ###
		sv_a = func_dbOps(BYREF CUST.DATA.errorFlg)
		IF(sv_a != 0)THEN
		#{
			IF((CUST.DATA.slLimitId != "")AND(CDOUBLE(CUST.DATA.nonBillUtilAmt) != 0)AND(CUST.DATA.isConfrmReqd == "Y"))THEN
			#{
				### REVERSE API CALLS ###
				BANCS.INPUT.earType = "R"
				sv_a = func_callMngEarMarkAPI(BYREF CUST.DATA.errorFlg)
				GOTO ENDOFSCRIPT
			#}
			ENDIF
		#}
		ENDIF
	#}
	ENDIF
	
	### FUNCTION R-REINSTATEMENT ###
	IF(CUST.DATA.serviceName == "SRV_ReinstInwardDcDtl")THEN
	#{
		### API CALLS ###
		sub_getSlLimitId()
		PRINT(CUST.DATA.slLimitId)
		PRINT(CUST.DATA.prevEarMark)
		
		sub_getFieldValuesfromSRVStructB("1","CUST","DATA","dcInMsgDtl.dcAddlnDtl.dcRevolDtl.reinstByAmt","reinstByAmt")
		PRINT(CUST.DATA.reinstByAmt)
		
		IF((CUST.DATA.slLimitId != "")AND(CDOUBLE(CUST.DATA.reinstByAmt) != 0)AND(CUST.DATA.isConfrmReqd == "Y"))THEN
		#{
			BANCS.INPUT.acfNum 		= CUST.DATA.slLimitId
			BANCS.INPUT.holdAmount 	= FORMAT$(CDOUBLE(CUST.DATA.reinstByAmt),"%2.2f")
			BANCS.INPUT.earType 	= "A"
			BANCS.INPUT.currency 	= CUST.DATA.b2kCcy
			sv_a = func_callMngEarMarkAPI(BYREF CUST.DATA.errorFlg)
			IF(CUST.DATA.errorFlg == "Y")THEN
			#{
				GOTO ENDOFSCRIPT
			#}
			ENDIF
			CUST.DATA.totalEarMark = CDOUBLE(CUST.DATA.prevEarMark) + CDOUBLE(CUST.DATA.reinstByAmt)
			#}
		ELSE
			#{
			CUST.DATA.totalEarMark = CUST.DATA.prevEarMark
		#}
		ENDIF
		PRINT(CUST.DATA.totalEarMark)
		
		### PERFORM DB OPERATIONS ###
		sv_a = func_dbOps(BYREF CUST.DATA.errorFlg)
		IF(sv_a != 0)THEN
		#{
			IF((CUST.DATA.slLimitId != "")AND(CDOUBLE(CUST.DATA.reinstByAmt) != 0)AND(CUST.DATA.isConfrmReqd == "Y"))THEN
			#{
				### REVERSE API CALLS ###
				BANCS.INPUT.earType = "R"
				sv_a = func_callMngEarMarkAPI(BYREF CUST.DATA.errorFlg)
				GOTO ENDOFSCRIPT
			#}
			ENDIF
		#}
		ENDIF
	#}
	ENDIF
	
	### FUNCTION Z-CLOSE ###
	IF(CUST.DATA.serviceName == "SRV_CloseInwardDcDtl")THEN
	#{
		### API CALLS ###
		sub_getSlLimitId()
		PRINT(CUST.DATA.slLimitId)
		PRINT(CUST.DATA.prevEarMark)
		
		sub_getFieldValuesfromSRVStructB("1","CUST","DATA","dcInMsgDtl.dcOutGenDtl.dcAmtDtl.dcAvailAmt","dcAvailAmt")
		PRINT(CUST.DATA.dcAvailAmt)
		
		IF((CUST.DATA.slLimitId != "")AND(CDOUBLE(CUST.DATA.dcAvailAmt) != 0)AND(CUST.DATA.isConfrmReqd == "Y"))THEN
		#{
			BANCS.INPUT.acfNum 		= CUST.DATA.slLimitId
			BANCS.INPUT.holdAmount 	= FORMAT$(CDOUBLE(CUST.DATA.dcAvailAmt),"%2.2f")
			BANCS.INPUT.earType 	= "A"
			BANCS.INPUT.currency 	= CUST.DATA.b2kCcy
			sv_a = func_callMngEarMarkAPI(BYREF CUST.DATA.errorFlg)
			IF(CUST.DATA.errorFlg == "Y")THEN
			#{
				GOTO ENDOFSCRIPT
			#}
			ENDIF
			CUST.DATA.totalEarMark = CDOUBLE(CUST.DATA.prevEarMark) + CDOUBLE(CUST.DATA.dcAvailAmt)
			#}
		ELSE
			#{
			CUST.DATA.totalEarMark = CUST.DATA.prevEarMark
		#}
		ENDIF
		PRINT(CUST.DATA.totalEarMark)
		
		### PERFORM DB OPERATIONS ###
		sv_a = func_dbOps(BYREF CUST.DATA.errorFlg)
		IF(sv_a != 0)THEN
		#{
			IF((CUST.DATA.slLimitId != "")AND(CDOUBLE(CUST.DATA.dcAvailAmt) != 0)AND(CUST.DATA.isConfrmReqd == "Y"))THEN
			#{
				### REVERSE API CALLS ###
				BANCS.INPUT.earType = "R"
				sv_a = func_callMngEarMarkAPI(BYREF CUST.DATA.errorFlg)
				GOTO ENDOFSCRIPT
			#}
			ENDIF
		#}
		ENDIF
	#}
	ENDIF
	
	### FUNCTION Y-UNCLOSE ###
	IF(CUST.DATA.serviceName == "SRV_UncloseInwardDcDtl")THEN
	#{
		### NO API ACTIVITY ###
		
		### FETCH PREVIOUS OPERATION VALUES ###
		sub_getSlLimitId()
		PRINT(CUST.DATA.slLimitId)
		PRINT(CUST.DATA.prevEarMark)
		CUST.DATA.totalEarMark = CUST.DATA.prevEarMark
		
		### PERFORM DB OPERATIONS ###
		sv_a = func_dbOps(BYREF CUST.DATA.errorFlg)
		IF(sv_a != 0)THEN
		#{
			GOTO ENDOFSCRIPT
		#}
		ENDIF
	#}
	ENDIF
	IF(CUST.DATA.serviceName == "SRV_TransferInwardDcDtl")THEN
        #{
                ### NO API ACTIVITY ###

                ### FETCH PREVIOUS OPERATION VALUES ###
                sub_getSlLimitId()
                PRINT(CUST.DATA.slLimitId)
                PRINT(CUST.DATA.prevEarMark)
                CUST.DATA.totalEarMark = CUST.DATA.prevEarMark

                ### PERFORM DB OPERATIONS ###
                sv_a = func_dbOps(BYREF CUST.DATA.errorFlg)
                IF(sv_a != 0)THEN
                #{
                        GOTO ENDOFSCRIPT
                #}
                ENDIF
        #}
        ENDIF	
	### FUNCTION X-CANCEL ###
	IF(CUST.DATA.serviceName == "SRV_CancelInwardDCDtl")THEN
	#{
		### API CALLS ###
		sub_getSlLimitId()
		PRINT(CUST.DATA.slLimitId)
		PRINT(CUST.DATA.prevEarMark)
		
		IF((CUST.DATA.slLimitId != "")AND(CDOUBLE(CUST.DATA.prevEarMark) !=0))THEN
		#{
			IF(CDOUBLE(CUST.DATA.prevEarMark) > 0)THEN
			#{
				BANCS.INPUT.earType = "R"
			#}
			ENDIF
			IF(CDOUBLE(CUST.DATA.prevEarMark) < 0)THEN
			#{
				BANCS.INPUT.earType = "A"
				CUST.DATA.prevEarMark = -1 * CDOUBLE(CUST.DATA.prevEarMark)
			#}
			ENDIF
			BANCS.INPUT.acfNum 		= CUST.DATA.slLimitId
			BANCS.INPUT.holdAmount 	= FORMAT$(CDOUBLE(CUST.DATA.prevEarMark),"%2.2f")
			PRINT(BANCS.INPUT.earType)
			BANCS.INPUT.currency 	= CUST.DATA.b2kCcy
			sv_a = func_callMngEarMarkAPI(BYREF CUST.DATA.errorFlg)
			IF(CUST.DATA.errorFlg == "Y")THEN
			#{
				GOTO ENDOFSCRIPT
			#}
			ENDIF
		#}
		ENDIF
		
		### PERFORM DB OPERATIONS ###
		BANCS.INPARAM.BINDVARS = CUST.DATA.entityB2kId + "|" + CUST.DATA.b2kIdType + "|" + BANCS.STDIN.contextBankId
		BANCS.INPARAM.BINDVARS = BANCS.INPARAM.BINDVARS + "|" + CUST.DATA.entityB2kId + "|" + CUST.DATA.b2kIdType + "|" + BANCS.STDIN.contextBankId
		PRINT(BANCS.INPARAM.BINDVARS)
		sv_a = "DELETE FROM CUSTOM.C_TFCT_TBL WHERE B2K_ID = ?SVAR AND B2KID_TYPE = ?SVAR AND BANK_ID = ?SVAR "
		sv_a = sv_a + "AND SRL_NUM = (SELECT MAX(SRL_NUM) FROM CUSTOM.C_TFCT_TBL WHERE B2K_ID = ?SVAR AND B2KID_TYPE = ?SVAR AND BANK_ID = ?SVAR) AND ENTITY_CRE_FLG = 'N'"
		PRINT(sv_a)
		sv_a = urhk_dbSQLWithBind(sv_a)
		PRINT(sv_a)
		IF(sv_a != 0)THEN
		#{
			CUST.DATA.errorFlg = "Y"
			CUST.DATA.errorMsg = "DELETE FROM CUSTOM.C_TFCT TABLE FAILED"
			IF((CUST.DATA.slLimitId != "")AND(CDOUBLE(CUST.DATA.prevEarMark) !=0))THEN
			#{
				### REVERSE API CALLS ###
				IF(BANCS.INPUT.earType == "A")THEN
				#{
					BANCS.INPUT.earType = "R"
				#}
				ENDIF
				IF(BANCS.INPUT.earType == "R")THEN
				#{
					BANCS.INPUT.earType = "A"
				#}
				ENDIF
				sv_a = func_callMngEarMarkAPI(BYREF CUST.DATA.errorFlg)
				GOTO ENDOFSCRIPT
			#}
			ENDIF
		#}
		ENDIF
	#}
	ENDIF
	
	### FUNCTION V-VERIFY ###
	IF(CUST.DATA.serviceName == "SRV_VerifyInwardDcDtl")THEN
	#{
		### API CALLS ###
		sub_getSlLimitId()
		PRINT(CUST.DATA.slLimitId)
		PRINT(CUST.DATA.prevEarMark)
		PRINT(CUST.DATA.prevSrvName)
		PRINT(CUST.DATA.prevEntityAmt)
		
		### VERIFY REDUCTION IN EARMARK ###
		IF((CUST.DATA.slLimitId != "")AND(CDOUBLE(CUST.DATA.prevEarMark) <= 0))THEN
		#{
			CUST.DATA.prevEarMark 	= -1 * CDOUBLE(CUST.DATA.prevEarMark)
			### INPUTS TO MANAGE EARMARK API ###
			BANCS.INPUT.acfNum 		= CUST.DATA.slLimitId
			BANCS.INPUT.holdAmount 	= FORMAT$(CDOUBLE(CUST.DATA.prevEarMark),"%2.2f")
			BANCS.INPUT.earType		= "A"
			BANCS.INPUT.currency 	= CUST.DATA.b2kCcy
			IF(CUST.DATA.slLimitId != "")THEN
			#{
				sv_a = func_callMngEarMarkAPI(BYREF CUST.DATA.errorFlg)
				IF(CUST.DATA.errorFlg == "Y")THEN
				#{
					GOTO ENDOFSCRIPT
				#}
				ENDIF
				### INPUTS TO UPDATE AVAILABLE LIMIT API ###
				BANCS.INPUT.holdAmount 	= FORMAT$(CDOUBLE(CUST.DATA.prevEarMark),"%2.2f")
				BANCS.INPUT.refType 	= "T"
				BANCS.INPUT.txnAmount  	= FORMAT$(CDOUBLE(CUST.DATA.prevEarMark),"%2.2f")
				BANCS.INPUT.refNum	   	= CUST.DATA.b2kRefNo
				BANCS.INPUT.acfNum	   	= CUST.DATA.slLimitId
				BANCS.INPUT.balance    	= FORMAT$(CDOUBLE(CUST.DATA.prevEntityAmt),"%2.2f")
				BANCS.INPUT.currency   	= CUST.DATA.b2kCcy
				IF(CUST.DATA.amendInd == "R") THEN
				#{	
					CUST.DATA.amendAmtWithTol = CDOUBLE(CUST.DATA.amendAmt)+ (CDOUBLE(CUST.DATA.amendAmt)*(CDOUBLE(CUST.DATA.amdTolPcnt)/100))
					BANCS.INPUT.balance = -1 * CDOUBLE(CUST.DATA.amendAmtWithTol)
                                	BANCS.INPUT.balance = FORMAT$(CDOUBLE(BANCS.INPUT.balance),"%2.2f")
				#}
				ENDIF
				BANCS.INPUT.updTypeFlag	= "UO"
				sv_a = func_callUpdAvailLimitAPI(BYREF CUST.DATA.errorFlg)
				IF(CUST.DATA.errorFlg == "Y")THEN
				#{
					### REVERSE PREVIOUS STEP ###
					BANCS.INPUT.earType	= "R"
					sv_a = func_callMngEarMarkAPI(BYREF CUST.DATA.errorFlg2)
					IF(CUST.DATA.errorFlg2 == "Y")THEN
					#{
						GOTO ENDOFSCRIPT
					#}
					ENDIF
					GOTO ENDOFSCRIPT
				#}
				ENDIF
			#}
			ENDIF
		#}
		ENDIF
		### VERIFY ENHANCEMENT OR OTHER MODIFICATIONS ###
		IF((CUST.DATA.slLimitId != "")AND(CDOUBLE(CUST.DATA.prevEarMark) > 0))THEN
		#{
			### INPUTS TO UPDATE AVAILABLE LIMIT API ###
			BANCS.INPUT.holdAmount 	= FORMAT$(CDOUBLE(CUST.DATA.prevEarMark),"%2.2f")
			BANCS.INPUT.refType 	= "T"
			BANCS.INPUT.txnAmount  	= FORMAT$(CDOUBLE(CUST.DATA.prevEarMark),"%2.2f")
			BANCS.INPUT.refNum	   	= CUST.DATA.b2kRefNo
			BANCS.INPUT.acfNum	   	= CUST.DATA.slLimitId
			BANCS.INPUT.balance    	= FORMAT$(CDOUBLE(CUST.DATA.prevEntityAmt),"%2.2f")
			BANCS.INPUT.currency   	= CUST.DATA.b2kCcy
			BANCS.INPUT.updTypeFlag	= "RU"
			IF((CUST.DATA.prevSrvName != "SRV_CloseInwardDcDtl")AND(CUST.DATA.prevSrvName != "SRV_NOBillUtilInwardDCDtl"))THEN
			#{
				BANCS.INPUT.balance = -1 * CDOUBLE(BANCS.INPUT.txnAmount)
				BANCS.INPUT.balance = FORMAT$(CDOUBLE(BANCS.INPUT.txnAmount),"%2.2f")
			#}
			ENDIF
			sv_a = func_callUpdAvailLimitAPI(BYREF CUST.DATA.errorFlg)
			IF(CUST.DATA.errorFlg == "Y")THEN
			#{
				GOTO ENDOFSCRIPT
			#}
			ENDIF
		#}
		ENDIF
		
		CUST.DATA.totalEarMark = "0.00"
		
		### CALL TRANSFER FUND API AND PERFORM DB OPERATIONS ###
		CUST.DATA.isTranAPIFail = "N"
		CALL("SLAcct_inqTransferStatus.scr")
		PRINT(CUST.DATA.isTranAPIFail)
		IF(CUST.DATA.isTranAPIFail == "Y")THEN
		#{
			### REVERSAL OF VERIFY REDUCTION IN EARMARK ###
			IF((CUST.DATA.slLimitId != "")AND(CDOUBLE(CUST.DATA.prevEarMark) < 0))THEN
			#{
				### INPUTS TO UPDATE AVAILABLE LIMIT API ###
				BANCS.INPUT.updTypeFlag	= "RU"
				BANCS.INPUT.txnAmount = -1 * CDOUBLE(BANCS.INPUT.txnAmount)
				BANCS.INPUT.txnAmount = FORMAT$(CDOUBLE(BANCS.INPUT.txnAmount),"%2.2f")
				sv_a = func_callUpdAvailLimitAPI(BYREF CUST.DATA.errorFlg)
				IF(CUST.DATA.errorFlg == "Y")THEN
				#{
					GOTO ENDOFSCRIPT
				#}
				ENDIF
			#}
			ENDIF
			
			### REVERSAL OF VERIFY ENHANCEMENT OR OTHER MODIFICATIONS ###
			IF((CUST.DATA.slLimitId != "")AND(CDOUBLE(CUST.DATA.prevEarMark) > 0) AND (CUST.DATA.amendInd != "N"))THEN
			#{
				CUST.DATA.prevEarMark 	= -1 * CDOUBLE(CUST.DATA.prevEarMark)
				### INPUTS TO MANAGE EARMARK API ###
				BANCS.INPUT.acfNum 		= CUST.DATA.slLimitId
				BANCS.INPUT.holdAmount 	= FORMAT$(CDOUBLE(CUST.DATA.prevEarMark),"%2.2f")
				BANCS.INPUT.earType		= "A"
				BANCS.INPUT.currency 	= CUST.DATA.b2kCcy
				sv_a = func_callMngEarMarkAPI(BYREF CUST.DATA.errorFlg)
				IF(CUST.DATA.errorFlg == "Y")THEN
				#{
					GOTO ENDOFSCRIPT
				#}
				ENDIF
				### INPUTS TO UPDATE AVAILABLE LIMIT API ###
				BANCS.INPUT.holdAmount 	= FORMAT$(CDOUBLE(CUST.DATA.prevEarMark),"%2.2f")
				BANCS.INPUT.refType 	= "T"
				BANCS.INPUT.txnAmount  	= FORMAT$(CDOUBLE(CUST.DATA.prevEarMark),"%2.2f")
				BANCS.INPUT.refNum	   	= CUST.DATA.b2kRefNo
				BANCS.INPUT.acfNum	   	= CUST.DATA.slLimitId
				BANCS.INPUT.balance    	= FORMAT$(CDOUBLE(CUST.DATA.prevEntityAmt),"%2.2f")
				BANCS.INPUT.currency   	= CUST.DATA.b2kCcy
				BANCS.INPUT.updTypeFlag	= "UO"
				BANCS.INPUT.balance = -1 * BANCS.INPUT.balance
                        	BANCS.INPUT.balance = FORMAT$(CDOUBLE(BANCS.INPUT.balance),"%2.2f")
				sv_a = func_callUpdAvailLimitAPI(BYREF CUST.DATA.errorFlg)
				IF(CUST.DATA.errorFlg == "Y")THEN
				#{
					GOTO ENDOFSCRIPT
				#}
				ENDIF
			#}
			ENDIF
		#}
		ENDIF
	#}
	ENDIF
	
	### FUNCTION M-MODIFY ###
	IF(CUST.DATA.serviceName == "SRV_ModifyInwardDcDtl")THEN
	#{
		### FETCH PREVIOUS OPERATION VALUES ###
		sub_getSlLimitId()
		PRINT(CUST.DATA.slLimitId)
		CUST.DATA.prevslLimitId = CUST.DATA.slLimitId
		PRINT(CUST.DATA.prevEarMark)
		PRINT(CUST.DATA.prevSrvName)
		PRINT(CUST.DATA.prevEntityAmt)
		
		### FETCH CURRENT SL LIMIT ID FROM ONS REPOS ###
		sub_getFieldValuesfromONSB("1","CUST","DATA","tfc_limit_details_FIELD_1","slLimitId","")
		CUST.DATA.slLimitId	= TOUPPER(CUST.DATA.slLimitId)
		PRINT(CUST.DATA.slLimitId)
		
		sub_getFieldValuesfromSRVStructB("1","CUST","DATA","dcInMsgDtl.dcAddlnDtl.totDcConfAmt","confrmAmt")
		PRINT(CUST.DATA.confrmAmt)
		IF((CUST.DATA.isConfrmReqd == "Y") AND (CUST.DATA.addCon == "Y")) THEN
                #{
                        CUST.DATA.confrmAmt = CDOUBLE(CUST.DATA.b2kEventAmt) + (CDOUBLE(CUST.DATA.b2kEventAmt) * (CDOUBLE(CUST.DATA.tolrncPcnt)/100))
                #}
                ENDIF
		IF((CUST.DATA.amdConfrmReqd == "Y") AND (CUST.DATA.amdAddCon == "Y")) THEN
		#{
			CUST.DATA.confrmAmt = CDOUBLE(CUST.DATA.amdDcConfAmt) + (CDOUBLE(CUST.DATA.amdDcConfAmt) * (CDOUBLE(CUST.DATA.amdTolPcnt)/100))
		#}
		ENDIF
		PRINT(CUST.DATA.confrmAmt)
		### (APPLICABLE ONLY BEFORE ENTITY VERIFICTION ###
		### IF SL_LIMIT_ID IS MODIFIED ###
		### REVERSE PREVIOUS EARMARK ###
		IF((CUST.DATA.prevslLimitId != "") AND(CDOUBLE(CUST.DATA.prevEarMark) != 0))THEN
		#{
			BANCS.INPUT.acfNum 		= CUST.DATA.prevslLimitId
			BANCS.INPUT.holdAmount 	= FORMAT$(CDOUBLE(CUST.DATA.prevEarMark),"%2.2f")
			BANCS.INPUT.currency 	= CUST.DATA.b2kCcy
			BANCS.INPUT.earType 	= "R"
			sv_a = func_callMngEarMarkAPI(BYREF CUST.DATA.errorFlg)
			IF(CUST.DATA.errorFlg == "Y")THEN
			#{
				GOTO ENDOFSCRIPT
			#}
			ENDIF
			CUST.DATA.totalEarMark = "0.00"
		#}
		ENDIF
		### CURRENT EARMARK AMOUNT ###
		IF((CUST.DATA.slLimitId != "")AND(CDOUBLE(CUST.DATA.confrmAmt) != 0)AND((CUST.DATA.isConfrmReqd == "Y") OR (CUST.DATA.amdConfrmReqd == "Y"))) THEN
		#{
			BANCS.INPUT.acfNum 		= CUST.DATA.slLimitId
			IF(CUST.DATA.amendInd != "E") THEN
			#{
				BANCS.INPUT.holdAmount 	= FORMAT$(CDOUBLE(CUST.DATA.confrmAmt),"%2.2f")
			#}
			ELSE
			#{
				CUST.DATA.amendAmtWithTol = CDOUBLE(CUST.DATA.amendAmt)+ (CDOUBLE(CUST.DATA.amendAmt)*(CDOUBLE(CUST.DATA.amdTolPcnt)/100))
				BANCS.INPUT.holdAmount  = FORMAT$(CDOUBLE(CUST.DATA.amendAmtWithTol),"%2.2f")
			#}
			ENDIF
			BANCS.INPUT.currency 	= CUST.DATA.b2kCcy
			BANCS.INPUT.earType 	= "A"
			sv_a = func_callMngEarMarkAPI(BYREF CUST.DATA.errorFlg)
			IF(CUST.DATA.errorFlg == "Y")THEN
			#{
				GOTO ENDOFSCRIPT
			#}
			ENDIF
			IF(CUST.DATA.amendInd != "E") THEN
			#{
				CUST.DATA.totalEarMark = CUST.DATA.confrmAmt
			#}
			ELSE
			#{
				CUST.DATA.totalEarMark = CUST.DATA.amendAmtWithTol
			#}
			ENDIF
		#}
		ENDIF
		IF((CUST.DATA.slLimitId == "")OR(CDOUBLE(CUST.DATA.confrmAmt) == 0))THEN
		#{
			CUST.DATA.totalEarMark = "0.00"
		#}
		ENDIF
		PRINT(CUST.DATA.totalEarMark)
		
		### PERFORM DB OPEARIONS ###
		BANCS.INPARAM.BINDVARS = CUST.DATA.entityB2kId + "|" + CUST.DATA.b2kIdType + "|" + BANCS.STDIN.contextBankId
		BANCS.INPARAM.BINDVARS = BANCS.INPARAM.BINDVARS + "|" + CUST.DATA.entityB2kId + "|" + CUST.DATA.b2kIdType + "|" + BANCS.STDIN.contextBankId
		PRINT(BANCS.INPARAM.BINDVARS)
		sv_a = "DELETE FROM CUSTOM.C_TFCT_TBL WHERE B2K_ID = ?SVAR AND B2KID_TYPE = ?SVAR AND BANK_ID = ?SVAR "
		sv_a = sv_a + "AND SRL_NUM = (SELECT MAX(SRL_NUM) FROM CUSTOM.C_TFCT_TBL WHERE B2K_ID = ?SVAR AND B2KID_TYPE = ?SVAR AND BANK_ID = ?SVAR) AND ENTITY_CRE_FLG = 'N'"
		PRINT(sv_a)
		sv_a = urhk_dbSQLWithBind(sv_a)
		PRINT(sv_a)
		IF(sv_a !=0)THEN
		#{
			#CUST.DATA.errorFlg = "Y"
			#CUST.DATA.errorMsg = "DELETE FROM CUSTOM.C_TFCT TABLE FAILED"
			#GOTO ENDOFSCRIPT
		#}
		ENDIF
		CUST.DATA.serviceName = CUST.DATA.prevSrvName
		sv_a = func_dbOps(BYREF CUST.DATA.errorFlg)
		IF(sv_a != 0)THEN
		#{
			GOTO ENDOFSCRIPT
		#}
		ENDIF
	#}
	ENDIF
	
	### 7.ERROR HANDLING ###
	ENDOFSCRIPT :
		IF(CUST.DATA.errorFlg == "Y")THEN
		#{
			PRINT(CUST.DATA.errorMsg)
			sv_a = urhk_SRV_SetErr(CUST.DATA.errorMsg)
			sv_u = urhk_setOrbOut("SuccessOrFailure|N")
			BANCS.OUTPUT.successOrFailure = "F"
		#}
		ENDIF
		sub_deleteRepClassB("CUST","DATA")
		TRACE OFF
END-->
