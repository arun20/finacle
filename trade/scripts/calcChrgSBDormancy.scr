##########################################################################################################################################
# Name of the file      : calcChrgSBDormancy.scr 
# Start Date            : 24-May-2018
# Description           : This script is used for calculation of charges for SB account dormancy 
# Design Id             : Liabilities_013 
# Menu Option           : HPTTM
# Input parameters      : Foracid,chrgCollCrncy,minimumChargeAmount,minimumChargeAmountCrncy,maximumChargeAmount,maximumChargeAmountCrncy,
#                         rateCode,rateValue,discountPercentage,roundOffIndicator,roundOffValue,chrgCollCrncy,acctCrncyCode,inputCrncy 
# Output parameters     : collAmount,AmountWithNoDiscount,collCrncy 
# Author                : Apurva Seth 
# Called Script         : NA
# Calling Script        : NA 
# Bank                  : LH Bank
# Modification History:
# <Serial No.>         <Date>         <Author Name>              <Description>
#      0.1            24-May-2018      Apurva Seth               Initial Draft
##########################################################################################################################################
IMPORT LibCommonB001
IMPORT LibCommonB002 
IMPORT pttmScriptBasedCharges
<--START
TRACE ON
#----------------------------------------------
# Create repository and class
#----------------------------------------------
sub_createRepClassB("CHRG","DATA")
#----------------------------------------------
# Initializing variables
#----------------------------------------------
CHRG.DATA.convtLimit = "0"
CHRG.DATA.tLimit = "0"
CHRG.DATA.dormChrg = "0"
CHRG.DATA.Foracid = ""
CHRG.DATA.clearBalance = "0"
CHRG.DATA.acctCrncyCode = ""
CHRG.DATA.acid = ""
CHRG.DATA.rateCode = ""
CHRG.DATA.rate = ""
CHRG.DATA.bodDate = MID$(BANCS.STDIN.BODDate,0,10)
CHRG.DATA.acctStatusDate = ""
CHRG.DATA.collAmount = "0"
CHRG.DATA.chargeCalcCurr = ""
CHRG.DATA.tLimitCcy = "USD"
#sv_r = urhk_b2k_printrepos("BANCS")
#----------------------------------------------
# Fetching Account Details
#----------------------------------------------
CHRG.DATA.acid = BANCS.INPUT.entityId
print(CHRG.DATA.acid)
BANCS.INPARAM.BINDVARS = CHRG.DATA.acid
print(BANCS.INPARAM.BINDVARS)
sv_a = "clearBalance,acctCrncyCode|SELECT CLR_BAL_AMT,ACCT_CRNCY_CODE FROM TBAADM.GAM WHERE ACID = ?SVAR"
PRINT(sv_a)
sv_d = urhk_dbSelectWithBind(sv_a)
PRINT(sv_d)
IF(sv_d == 0)THEN
#{
	CHRG.DATA.clearBalance = BANCS.OUTPARAM.clearBalance
	print(CHRG.DATA.clearBalance)
	CHRG.DATA.acctCrncyCode = BANCS.OUTPARAM.acctCrncyCode
	print(CHRG.DATA.acctCrncyCode)
#}
ELSE
#{
	GOTO ENDOFSCRIPT
#}
ENDIF
#----------------------------------------------
# Fetching parameter value of SB_DORM_TLIMIT 
#----------------------------------------------
lv_a = func_getCPARAMValueB("SB_DORM_TLIMIT","CASA",BANCS.STDIN.contextBankId,BYREF CHRG.DATA.tLimit)
print(CHRG.DATA.tLimit)  
IF(lv_a != 0)THEN
#{
	GOTO ENDOFSCRIPT
#}
ENDIF
#-------------------------------------------------------------
# Converting Threshold Limit if account currency is not USD
#-------------------------------------------------------------
IF(CHRG.DATA.acctCrncyCode != CHRG.DATA.tLimitCcy)THEN
#{
	CHRG.DATA.rateCode = BANCS.INPUT.rateCode
	print(CHRG.DATA.rateCode)
	lv_c = func_convertAmountB(CHRG.DATA.tLimit,CHRG.DATA.tLimitCcy,CHRG.DATA.acctCrncyCode,CHRG.DATA.rateCode,CHRG.DATA.rate,BYREF CHRG.DATA.convtLimit)
	print(lv_c)	
	IF(lv_c != 0)THEN
	#{
		GOTO ENDOFSCRIPT
	#}
	ENDIF
#}
ELSE
#{
	CHRG.DATA.convtLimit = CHRG.DATA.tLimit
#}
ENDIF
print(CHRG.DATA.convtLimit)
#----------------------------------------------
# Fetching account status date 
#----------------------------------------------
CHRG.DATA.keyFields = "ACID|BANK_ID"
CHRG.DATA.keyValues = CHRG.DATA.acid + "|" + BANCS.STDIN.contextBankId
lv_a = func_selectFromCustTableB("acctStatusDate","TO_CHAR(ACCT_STATUS_DATE,'DD-MM-YYYY')","TBAADM.SMT",CHRG.DATA.keyFields,CHRG.DATA.keyValues)
print(lv_a)
IF(lv_a == 0)THEN
#{
	sub_copyOutparamFieldB("acctStatusDate","CHRG","DATA","acctStatusDate","")
	print(CHRG.DATA.acctStatusDate)
#}
ELSE
#{
	GOTO ENDOFSCRIPT
#}
ENDIF
print(CHRG.DATA.acctStatusDate)
print(CHRG.DATA.bodDate)
#---------------------------------------------------------------------
# Charge is derived from CPARAM if the clear balance is less than the 
# threshold limit and account status date is not equal to BOD
#---------------------------------------------------------------------
IF((CDOUBLE(CHRG.DATA.clearBalance) < CDOUBLE(CHRG.DATA.convtLimit))AND(CHRG.DATA.acctStatusDate != CHRG.DATA.bodDate))THEN
#{
	#----------------------------------------------
	# Fetching parameter value of SB_DORM_CHRG
	#----------------------------------------------
	lv_b = func_getCPARAMValueB("SB_DORM_CHRG","CASA",BANCS.STDIN.contextBankId,BYREF CHRG.DATA.dormChrg)
	print(CHRG.DATA.dormChrg)
	IF(lv_b != 0)THEN
	#{
		GOTO ENDOFSCRIPT
	#}
	ENDIF	
	CHRG.DATA.collAmount = CHRG.DATA.dormChrg
	print(CHRG.DATA.collAmount)
#}
ELSE
#{
	CHRG.DATA.collAmount = "0"
#}
ENDIF
#--------------------------------------------------------------------------
# If collection amount is greater than 0, func_finalChargeAmount is 
# called for conversion/min max amount check/discounting and rounding off
#--------------------------------------------------------------------------
IF(CHRG.DATA.collAmount > "0")THEN
#{
	CHRG.DATA.chargeAmount = CHRG.DATA.collAmount
	print(CHRG.DATA.chargeAmount)
	IF(BANCS.INPUT.chrgCalcCrncy == "")THEN
	#{
		CHRG.DATA.chargeCalcCurr = BANCS.STDIN.homeCrncyCode
	#}
	ELSE
	#{
		CHRG.DATA.chargeCalcCurr   = BANCS.INPUT.chrgCalcCrncy
	#}
	ENDIF	
	print(CHRG.DATA.chargeCalcCurr)
	CHRG.DATA.chrgCollCrncy            = BANCS.INPUT.chrgCollCrncy
	CHRG.DATA.minimumChargeAmount      = BANCS.INPUT.minimumChargeAmount
	CHRG.DATA.minimumChargeAmountCrncy = BANCS.INPUT.minimumChargeAmountCrncy	
	CHRG.DATA.maximumChargeAmount      = BANCS.INPUT.maximumChargeAmount
	CHRG.DATA.maximumChargeAmountCrncy = BANCS.INPUT.maximumChargeAmountCrncy
	CHRG.DATA.rateCode                 = BANCS.INPUT.rateCode
	CHRG.DATA.rateValue                = BANCS.INPUT.rateValue
	CHRG.DATA.discountPercentage       = BANCS.INPUT.discountPercentage
	CHRG.DATA.roundOffIndicator        = BANCS.INPUT.roundOffIndicator
	CHRG.DATA.roundOffValue            = BANCS.INPUT.roundOffValue
	CHRG.DATA.debitCrncy               = BANCS.INPUT.chrgCollCrncy
	IF(TRIM(BANCS.INPUT.chrgCollCrncy) == "")THEN
	#{
		CHRG.DATA.chrgCollCrncy  = BANCS.INPUT.inputCrncy
		CHRG.DATA.debitCrncy     = BANCS.INPUT.inputCrncy
	#}
	ENDIF
	lv_d = func_finalChargeAmount("CHRG","DATA")
	PRINT(lv_d)
	IF(lv_d != 0)THEN
	#{
		BANCS.OUTPUT.collAmount           = "0.0"
		BANCS.OUTPUT.collCrncy            = BANCS.INPUT.inputCrncy
		BANCS.OUTPUT.AmountWithNoDiscount = "0.0"	
		GOTO ENDOFSCRIPT
	#}
	ENDIF
	BANCS.OUTPUT.collAmount           = CHRG.DATA.collAmount
	BANCS.OUTPUT.AmountWithNoDiscount = CHRG.DATA.AmountWithNoDiscount
	BANCS.OUTPUT.collCrncy            = CHRG.DATA.collCrncy	
#}
ELSE
#{
	BANCS.OUTPUT.collAmount           = "0.0"
	BANCS.OUTPUT.collCrncy            = BANCS.INPUT.inputCrncy
	BANCS.OUTPUT.AmountWithNoDiscount = "0.0"
#}
ENDIF
PRINT(BANCS.OUTPUT.collAmount)
PRINT(BANCS.OUTPUT.AmountWithNoDiscount)
PRINT(BANCS.OUTPUT.collCrncy)

ENDOFSCRIPT:
#----------------------------------------------
# Delete repository and class
#----------------------------------------------
sub_deleteRepClassB("CHRG","DATA")
TRACE OFF
END-->
