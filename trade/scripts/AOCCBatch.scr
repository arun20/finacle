#############################################################################################################
#    Name                   : AOCCBatch.scr
#    Date                   : 20-06-2018
#    Description            : Check and Update AOCC details
#    Author                 : Chaitanya Yandrapu
#    Called Script          : none
#    Calling Script         : none
#    Modification History   :
#    SNo         Date                   Author Name               Description
#    1           20-06-2018             Chaitanya Yandrapu      Check and Update AOCC details
###############################################################################################################
IMPORT LibCommonB001
IMPORT LibCommonB002
<--START
	TRACE ON
	LIBNAME CUSTOMSO
	#------------------------------------------
	# Creating the repositories
	#------------------------------------------
	IF (REPEXISTS("CUST") == 0 ) THEN
	#{
		CREATEREP("CUST")
	#}
	ENDIF
	IF (CLASSEXISTS("CUST","LHB") == 0) THEN
	#{
		CREATECLASS("CUST","LHB",5)
	#}
	ENDIF
	#-------------------------------------
	# Creating a File
	#-------------------------------------
	#--------------------------------------------------------------------------------
	# Fetching CPARAM value for AML Batch Path
	#--------------------------------------------------------------------------------
	sv_s = func_getCPARAMValueB("AOCC_BATCH_PATH", "INTF" , BANCS.STDIN.contextBankId , BYREF CUST.LHB.AOCCBatchPath)
	IF(sv_s == 0) THEN
	#{
		PRINT(CUST.LHB.AOCCBatchPath)
	#}
	ELSE
	#{
		PRINT("CPARAM not configured for AML Batch Path")
		CUST.LHB.AOCCBatchPath = "$TBA_PROD_ROOT/CDCI_LOGS/"
	#}
	ENDIF
	sv_h = strlen(CUST.LHB.AOCCBatchPath)
	print(sv_h)
	CUST.LHB.sqlFile = CUST.LHB.AOCCBatchPath + "allRecords.sql"
	#===========================================================================
	# Fetching BOD date in YYYYMMDD format.
	#===========================================================================
	sv_q = "sysDate|SELECT TO_CHAR(DC_CLS_DATE,'DD-MM-YYYY HH24:MI:SS') FROM TBAADM.GCT"
	sv_d = urhk_dbSelectWithBind(sv_q)
	CUST.LHB.systemDate = BANCS.OUTPARAM.sysDate
	CUST.LHB.sysDate = MID$(CUST.LHB.systemDate,6,4) + MID$(CUST.LHB.systemDate,3,2) + LEFT$(CUST.LHB.systemDate,2) 
	print(CUST.LHB.sysDate)
	CUST.LHB.repDate = LEFT$(CUST.LHB.systemDate,2) + MID$(CUST.LHB.systemDate,3,2) + MID$(CUST.LHB.systemDate,8,2)
	print(CUST.LHB.repDate)
	CUST.LHB.fileDateReq = LEFT$(CUST.LHB.systemDate,2) + MID$(CUST.LHB.systemDate,3,2) + MID$(CUST.LHB.systemDate,6,4)
	print(CUST.LHB.fileDateReq)
	lv_a = urhk_B2k_PID("")
	CUST.LHB.pid  = BANCS.OUTPARAM.PID
	print(CUST.LHB.pid)
	CUST.LHB.inputFile = "inputFile_" + CUST.LHB.sysDate + ".TXT"
	CUST.LHB.failLog = "failure_" + CUST.LHB.sysDate + ".log"
	CUST.LHB.rptLst = "reportList_" + CUST.LHB.sysDate + ".lst"	
	CUST.LHB.AOCCFileName = "BSSOFFR_" + CUST.LHB.sysDate + ".TXT"

	#-------------------------------------
	# Copy from SFTP Server to Finacle
	#-------------------------------------

	sv_u = urhk_getFileLocation("COM|sftp_tf_get.com")
	print(sv_u)
	IF(sv_u == 0) THEN
	#{
        	sv_m = BANCS.OUTPARAM.fileLocation
        	print(sv_m)

		sv_a = sv_m + "sftp_tf_get.com " + CUST.LHB.AOCCFileName + " /FTP_DATA/FIN/WORKING " + CUST.LHB.AOCCBatchPath + " > " + CUST.LHB.AOCCBatchPath +"AOCCUpload_SFTP" + CUST.LHB.sysDate + ".log"
        	print(sv_a)

        	sv_v = system(sv_a)
        	print(sv_v)
		IF(sv_v != 0)THEN
		#{
			CUST.LHB.errMsg = "SFTP Connection Failed"	
			sv_s = "echo '" + CUST.LHB.errMsg + "|||' >> " + CUST.LHB.rptLst
                	print(sv_s)
                	sv_t = system(sv_s)
                	print(sv_t)
                	GOTO ENDOFSCRIPT
		#}
		ENDIF
	#}
	ENDIF

	sv_r = "ls " + CUST.LHB.AOCCBatchPath + "BSSOFFR_" + CUST.LHB.sysDate + ".TXT" + " > " + CUST.LHB.inputFile
	PRINT(sv_r)
	sv_s = system(sv_r)
	PRINT(sv_s)

	IF (sv_s != 0) THEN
	#{
		CUST.LHB.errMsg = "File not found"
		sv_s = "echo '" + CUST.LHB.errMsg + "|||' >> " + CUST.LHB.rptLst
		print(sv_s)
		sv_t = system(sv_s)
		print(sv_t)	
		GOTO ENDOFSCRIPT
	#}
	ELSE
	#{
		sv_t = urtn_fileOpen(CUST.LHB.inputFile + "|r")
		PRINT(sv_t)
		IF (sv_t < 0) THEN
		#{
			CUST.LHB.errMsg = "Unable to open"
			sv_s = "echo '" + CUST.LHB.errMsg + "|||' >> " + CUST.LHB.rptLst
			print(sv_s)
			sv_t = system(sv_s)
			print(sv_t)	
			GOTO ENDOFSCRIPT
		#}
		ELSE
		#{
			sv_p = "echo 'DELETE FROM CUSTOM.CAOCT;" + "' > " + CUST.LHB.sqlFile
			print(sv_p)
			sv_u = system(sv_p)
			print(sv_u)
			CUST.LHB.readFileIndex = sv_t
			CUST.LHB.fileListRecord = ""
			sv_t = urtn_fileRead(CUST.LHB.readFileIndex + "|CUST.LHB.fileListRecord")
			print(sv_t)
			print(CUST.LHB.fileListRecord)
	
			WHILE (sv_t ==0)
			#{	
				sv_f = strlen(CUST.LHB.fileListRecord)
				print(sv_f)
				CUST.LHB.inputFileName = MID$(CUST.LHB.fileListRecord,sv_h,sv_f)
				print(CUST.LHB.inputFileName)
		
				sv_m = getposition(CUST.LHB.inputFileName,".")
				print(sv_m)
				CUST.LHB.newInputFileName = MID$(CUST.LHB.inputFileName,0,sv_m-1)
				print(CUST.LHB.newInputFileName)
				CUST.LHB.newInputFileName = CUST.LHB.newInputFileName + ".TXT"
				print(CUST.LHB.newInputFileName)
		
				sv_a = urtn_fileAccess(CUST.LHB.fileListRecord)
				print(sv_a)
				IF(sv_a != 0) THEN
				#{	
					CUST.LHB.errMsg = "Unable to Access the file BSSOFFR_" + CUST.LHB.sysDate
					sv_s = "echo '" + CUST.LHB.errMsg + "|||' >> " + CUST.LHB.rptLst
					print(sv_s)
					sv_u = system(sv_s)
					print(sv_u)	
					GOTO NEXTFILE
				#}
				ENDIF
		
				sv_t = urtn_fileOpen(CUST.LHB.fileListRecord + "|r")
				PRINT(sv_t)
				IF (sv_t < 0) THEN
				#{
					CUST.LHB.errMsg = "Unable to open file BSSOFFR_" + CUST.LHB.sysDate
					sv_s = "echo '" + CUST.LHB.errMsg + "|||' >> " + CUST.LHB.rptLst
					print(sv_s)
					sv_u = system(sv_s)
					print(sv_u)	
					GOTO NEXTFILE
				#}
				ENDIF
	
				CUST.LHB.readIndex = sv_t
				CUST.LHB.record = ""	
				sv_v = urtn_fileRead(CUST.LHB.readIndex + "|CUST.LHB.record")
				print(sv_v)
				IF (sv_v != 0) THEN
				#{
					CUST.LHB.errMsg = "No Records Found In File BSSOFFR_" + CUST.LHB.sysDate
					sv_s = "echo '" + CUST.LHB.errMsg + "|||' >> " + CUST.LHB.rptLst
					print(sv_s)
					sv_u = system(sv_s)
					print(sv_u)
					GOTO NEXTFILE
				#}
				ENDIF
		
				WHILE(sv_v == 0)
				#{
					print(CUST.LHB.record)
					IF(LEFT$(CUST.LHB.record,1) == "H") THEN
					#{
						CUST.LHB.fileDate = MID$(CUST.LHB.record,1,8)
						print(CUST.LHB.fileDate)
						IF(CUST.LHB.fileDate != CUST.LHB.fileDateReq) THEN
						#{
							CUST.LHB.errMsg = "Header Date Mismatch"
							sv_s = "echo '" + CUST.LHB.errMsg + "|||' >> " + CUST.LHB.rptLst
							print(sv_s)
							sv_u = system(sv_s)
							print(sv_u)
							GOTO ENDOFSCRIPT
						#}
						ENDIF
					#}
					ENDIF
					IF(LEFT$(CUST.LHB.record,1) == "D") THEN
					#{
						CUST.LHB.SSOOFF = MID$(CUST.LHB.record,1,3)
						CUST.LHB.SSOBRN = MID$(CUST.LHB.record,4,3)
						CUST.LHB.SSOIDN = MID$(CUST.LHB.record,7,10)
						CUST.LHB.SSONAM = MID$(CUST.LHB.record,17,40)
						CUST.LHB.SSOSNA = MID$(CUST.LHB.record,58,20)
						CUST.LHB.SSOCUR = MID$(CUST.LHB.record,79,4)
						CUST.LHB.SSOALG = MID$(CUST.LHB.record,83,1)
						CUST.LHB.SSOALM = MID$(CUST.LHB.record,84,15)
						CUST.LHB.SSCNTR = MID$(CUST.LHB.record,99,3)
						CUST.LHB.SSDEPT = MID$(CUST.LHB.record,102,3)
						print(CUST.LHB.SSOOFF)
						print(CUST.LHB.SSOBRN)
						print(CUST.LHB.SSOIDN)
						print(CUST.LHB.SSONAM)
						print(CUST.LHB.SSOSNA)
						print(CUST.LHB.SSOCUR)
						print(CUST.LHB.SSOALG)
						print(CUST.LHB.SSOALM)
						print(CUST.LHB.SSCNTR)
						print(CUST.LHB.SSDEPT)
						sv_a = "INSERT INTO CUSTOM.CAOCT VALUES(@" + CUST.LHB.inputFileName + "@,TO_DATE(@" + CUST.LHB.fileDate
						sv_a = sv_a + "@,@DD-MM-YYYY@),@" + TRIM(CUST.LHB.SSOOFF) + "@,@" + TRIM(CUST.LHB.SSOBRN) 
						sv_a = sv_a + "@,@" + TRIM(CUST.LHB.SSOIDN) + "@,@" + TRIM(CUST.LHB.SSONAM) + "@,@" + TRIM(CUST.LHB.SSOSNA)
						sv_a = sv_a + "@,@" + TRIM(CUST.LHB.SSOCUR) + "@,@" + TRIM(CUST.LHB.SSOALG) + "@,@" + TRIM(CUST.LHB.SSOALM)
						sv_a = sv_a + "@,@" + TRIM(CUST.LHB.SSCNTR) + "@,@" + TRIM(CUST.LHB.SSDEPT)	
						sv_a = sv_a + "@,@N@,@SYSTEM@,SYSDATE,@SYSTEM@,SYSDATE,@01@);"
						print(sv_a)
						sv_p = "echo '" + sv_a + "' >> " + CUST.LHB.sqlFile
						print(sv_p)
						sv_k = SYSTEM(sv_p)
						print(sv_k)
						IF(CUST.LHB.SSOOFF != "") THEN
						#{
							sv_p = "echo '" + CUST.LHB.SSOOFF + "|" + CUST.LHB.SSOBRN + "|SUCCESS|" + "' >> " + CUST.LHB.rptLst
						#}
						ELSE
						#{
							sv_p = "echo '" + CUST.LHB.SSOOFF + "|" + CUST.LHB.SSOBRN + "|FAILURE|INSERT FAILED" + "' >> " + CUST.LHB.rptLst
						#}
						ENDIF
						print(sv_p)
						sv_k = SYSTEM(sv_p)
						print(sv_k)
					#}
					ENDIF
					NEXTREC:
					sv_v = urtn_fileRead(CUST.LHB.readIndex + "|CUST.LHB.record")
					print(sv_v)
				#}
				DO
		
				NEXTFILE:	
				sv_a = urtn_fileClose(CUST.LHB.readIndex)
				print(sv_a)
				sv_r = "mv " + CUST.LHB.AOCCBatchPath + CUST.LHB.inputFileName + " " + CUST.LHB.AOCCBatchPath + CUST.LHB.inputFileName + "_" + CUST.LHB.sysDate + CUST.LHB.pid +".complete"
				print(sv_r)
				sv_t = SYSTEM(sv_r)
				print(sv_t)
		
				sv_t = urtn_fileRead(CUST.LHB.readFileIndex + "|CUST.LHB.fileListRecord")
				print(sv_t)
			#}
			DO
			sv_a = urtn_fileClose(CUST.LHB.readFileIndex)
			print(sv_a)
		#}
		ENDIF
	#}
	ENDIF

	ENDOFSCRIPT:
	sv_i = "AOCodeUpdationReport.jasper|" + CUST.LHB.rptLst+ "|AOCodeUpdationReport_" + CUST.LHB.sysDate + "||"
	sv_o = urhk_B2k_GenRpt4004(sv_i)
	PRINT(sv_o)
	sv_a = "AOCodeUpdationReport_" + CUST.LHB.sysDate + ".TXT|" + "AO CC Upload Report" + "|MANAGER|1"
	sv_x =  urhk_B2k_Insert_PQT(sv_a)
	PRINT(sv_x)
	IF(sv_x != 0)THEN
	#{
		PRINT("Pushing The Report to Background Menu Failed !")
	#}
	ENDIF

	TRACE OFF
END-->
