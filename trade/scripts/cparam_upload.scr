#=================================================
# IMPORTANT: Auto Generated Header. DO NOT CHANGE MANUALLY.
# category: Script Name Based
# script: cparam_val.scr
# event: NA
# description: VAlidation script
#=================================================

#############################################################################
#	Name					   :   cparam_upload.scr
#	Date					   :   25-11-12
#	Description				:   This script is for the uploading the Parameter file.
#	Input					  :
#	Output					 :   NA
#	Author					 :   Santosh 	 
#	Called From				:   
#	Calling Script			 :   NA
#	Reference				  :   NA
#	Modification History	   :   
#############################################################################

<--start
LIBNAME CUSTOMSO
#sv_c = urhk_B2K_printRepos("BANCS")
#print(sv_c)

###############################################################################
#	CREATING REPOSITERIES	
###############################################################################
IF (REPEXISTS("XLSUPL") == 0) THEN
#{
	CREATEREP("XLSUPL")
#}
ENDIF
IF (CLASSEXISTS("XLSUPL", "UPL") == 0) THEN
#{
	CREATECLASS("XLSUPL", "UPL", 5)
#}
ENDIF

#----------------------------
# Calling CReAM_INFENG.scr
#----------------------------
sv_s = "CReAM_" + BANCS.STDIN.languageCode + ".scr"
print(sv_s)
sv_u = urhk_getFileLocation("SCRIPT|" + sv_s)
IF (sv_u !=0) THEN
#{
        GOTO ENDOFSCRIPT
#}
ENDIF
CALL(sv_s)

###############################################################################
#	STORING THE INPUTS FROM xlsupl MENU
###############################################################################

XLSUPL.UPL.appFile = BANCS.INPUT.appFileName
PRINT(XLSUPL.UPL.appFile)
XLSUPL.UPL.localFileName = BANCS.INPUT.localFileName
PRINT(XLSUPL.UPL.localFileName)
XLSUPL.UPL.fileLoc = BANCS.INPUT.fileLocation
PRINT(XLSUPL.UPL.fileLoc)

XLSUPL.UPL.actionTaken = BANCS.INPUT.actionValue

IF (XLSUPL.UPL.fileLoc == "userPath") THEN
#{
	XLSUPL.UPL.localFileName = ""
	PRINT(XLSUPL.UPL.localFileName)
#}
ELSE
#{
	XLSUPL.UPL.appFile = ""
	PRINT(XLSUPL.UPL.appFile)
#}
ENDIF



###############################################################################
#	INITIALIZING VARIABLES FOR ACTION CODE TRIAL/POST REQUIREMENT
###############################################################################
XLSUPL.UPL.trialFailRPTName = ""
XLSUPL.UPL.trialsuccessRPTName = ""
XLSUPL.UPL.trialFinalRPTName = ""

IF (XLSUPL.UPL.localFileName != "") THEN
#{
	BANCS.INPUT.InpString = BANCS.INPUT.localFileName
	#-- Uploading file --
	BANCS.INPUT.OutputString = ""
	
	IF (BANCS.INPUT.InpString == "") THEN
	#{
		BANCS.INPUT.OutputString = BANCS.INPUT.InpString
		GOTO ENDOFSCRIPT
	#}
	ENDIF
	
	sv_a = STRLEN(BANCS.INPUT.InpString)
	BANCS.INPUT.OutputStringtemp = ""
	
	WHILE(sv_a > 0)
	#{
		sv_l = "\"
		sv_n = GETPOSITION(BANCS.INPUT.InpString, sv_l)
		IF (sv_n == 0) THEN
		#{
			BANCS.INPUT.OutputStringtemp = BANCS.INPUT.InpString
			BANCS.INPUT.OutputString = BANCS.INPUT.OutputString + BANCS.INPUT.InpString
			GOTO Out
		#}
		ELSE
		#{
			BANCS.INPUT.OutputStringtemp = MID$(BANCS.INPUT.InpString, 0, sv_n - 1)
			BANCS.INPUT.OutputString = BANCS.INPUT.OutputString + BANCS.INPUT.OutputStringtemp + "\\\\"
			sv_a = sv_a - sv_n
			BANCS.INPUT.InpString = MID$(BANCS.INPUT.InpString, sv_n, sv_a)
		#}
		ENDIF
	#}
	DO
	
	Out:
	#-- END OF UPLOADING FILE --
	XLSUPL.UPL.filename = BANCS.INPUT.InpString
#}
ELSE
#{
	XLSUPL.UPL.filename = XLSUPL.UPL.appFile
	XLSUPL.UPL.InFile = XLSUPL.UPL.appFile
#}
ENDIF



IF ((XLSUPL.UPL.localFileName != "")) THEN
#{
	###############################################################################
	## EXIT WITH ERROR IF ANY OF uploadFileName OR uploadIPAddress IS NOT PRESENT #
	###############################################################################
	IF ((FIELDEXISTS(BANCS.INPUT.uploadFileName) == 0) OR (FIELDEXISTS(BANCS.INPUT.uploadIPAddress) == 0)) THEN
	#{
		sv_a = urhk_setOrbOut("SuccessOrFailure|N")
		XLSUPL.UPL.errId = "CCAP200080"
		#sv_a = urtn_getMsg(XLSUPL.UPL.errId)
		#print(sv_a)
		#XLSUPL.UPL.err = "Upload Config Error: Invalid Input Params for File Transfer.Please contact your Administrator"
		XLSUPL.UPL.err = CREAM.MESG.M0924
		sv_a = urhk_SetOrbOut("Error_0|" + XLSUPL.UPL.errId + "^" + XLSUPL.UPL.err + "^dummy")
		EXITSCRIPT
	#}
	ENDIF
	
	sv_r = urhk_getEnv("FILEUPLOAD_JLIMO_PORTNUM")
	#print(sv_r)
	IF (sv_r != 0) THEN
	#{
		BANCS.INPUT.uploadPortNum = ""
		sv_a = urhk_setOrbOut("SuccessOrFailure|N")
		XLSUPL.UPL.errId = "CCAP200081"
		#sv_a = urtn_getMsg(XLSUPL.UPL.errId)
		#print(sv_a)
		#XLSUPL.UPL.err = "ENV FILEUPLOAD_JLIMO_PORTNUM not set.Please contact your Administrator"
		XLSUPL.UPL.err = CREAM.MESG.M0925
		sv_a = urhk_SetOrbOut("Error_1|" + XLSUPL.UPL.errId + "^" + XLSUPL.UPL.err + "^dummy")
		GOTO ENDOFSCRIPT
	#}
	ELSE
	#{
		BANCS.INPUT.uploadPortNum = BANCS.OUTPARAM.envValue
		#print(BANCS.INPUT.uploadPortNum)
	#}
	ENDIF
	
	##print(BANCS.INPUT.uploadPortNum)
	################################################################################
	#SETTING UP THE ENVIRONMENT VARIABLE REQUIRED FOR FILE TRANSFER
	################################################################################
	sv_r = urhk_getEnv("LIMOC_CONFIG_PATH")
	IF (sv_r != 0) THEN
	#{
		sv_j = "UPLOAD_CLIENT_FILE|$TBA_PROD_ROOT/services/finlistval/fce/finlistval-client.cfg"
		sv_k = urhk_putEnv(sv_j)
	#}
	ELSE
	#{
		PRINT(BANCS.OUTPARAM.envValue)
		sv_j = "UPLOAD_CLIENT_FILE|" + BANCS.OUTPARAM.envValue
		sv_k = urhk_putEnv(sv_j)
	#}
	ENDIF
	
	sv_m = "UPLOAD_CLIENT_LOG|."
	sv_n = urhk_putEnv(sv_m)
	
	sv_f = BANCS.INPUT.uploadFileName
	
	IF (BANCS.INPUT.uploadPortNum != "") THEN
	#{
		sv_i = BANCS.INPUT.uploadIPAddress + ":" + BANCS.INPUT.uploadPortNum
	#}
	ENDIF
	
	IF (MID$(BANCS.INPUT.uploadFileName, 0, 1) == "/") THEN
	#{
		### FILENAME IS PREFIXED WITH ESC CHAR FOR UNIX FILESYSTEM
		sv_p = "uploadclient LIMO://" + sv_i + "//\ " + sv_f
	#}
	ELSE
	#{
		sv_p = "uploadclient LIMO://" + sv_i + "///" + sv_f
	#}
	ENDIF
	PRINT(sv_p)
	
	sv_x = SYSTEM(sv_p)
	
	#print(sv_x)
	
	IF (sv_x != 0) THEN
	#{
		sv_a = urhk_setOrbOut("SuccessOrFailure|N")
		XLSUPL.UPL.errId = "CCAP200082"
		#sv_a = urtn_getMsg(XLSUPL.UPL.errId)
		#print(sv_a) 
		#XLSUPL.UPL.err = "File Transfer Unsucessful. Please contact your Administrator"
		XLSUPL.UPL.err = CREAM.MESG.M0926
		sv_a = urhk_SetOrbOut("Error_2|" + XLSUPL.UPL.errId + "^" + XLSUPL.UPL.err + "^dummy")
		GOTO ENDOFSCRIPT
	#}
	ENDIF
	
	
	
	XLSUPL.UPL.InFile = XLSUPL.UPL.filename
#}
ENDIF
PRINT(XLSUPL.UPL.InFile)

# If the file is an excel file calling the appropriate com file to convert the file 
# into a text file.
sv_v = STRLEN(XLSUPL.UPL.InFile)
sv_j = GETPOSITION(XLSUPL.UPL.InFile, '.')
sv_o = ""
IF (sv_j != 0) THEN
#{
	#sv_j = sv_j + 1
	
	# Selecting the value before the pipe ie the name
	sv_o = MID$(XLSUPL.UPL.InFile, sv_j, sv_v)
	PRINT(sv_o)
	
#}
ENDIF

IF ((sv_o == "xls") OR (sv_o == "XLS") OR (sv_o == "xlsx") OR (sv_o == "XLSX")) THEN
#{
	sv_a = urhk_B2k_PID("")
	XLSUPL.UPL.PID = BANCS.OUTPARAM.PID
	
	XLSUPL.UPL.DatFileName = "CPARAM_XLS_TO_DAT_" + XLSUPL.UPL.PID + ".DAT"
	XLSUPL.UPL.ResXLSFileName = "CPARAM_RESULT_XLS_" + XLSUPL.UPL.PID + ".xls"
	XLSUPL.UPL.SkipFileName = "CPARAM_SKIP_" + XLSUPL.UPL.PID + ".DAT"
	
	sv_u = urhk_getFileLocation("COM|cust_xlsupload.com")
	#print(sv_u)
	IF (sv_u == 0) THEN
	#{
		#print(BANCS.OUTPARAM.fileLocation)
		sv_m = BANCS.OUTPARAM.fileLocation
		#print(sv_a)
	#}
	ELSE
	#{
		sv_a = urhk_setOrbOut("SuccessOrFailure|N")
		#XLSUPL.UPL.err = "Unable to find the file cust_xlsupload.com"
		XLSUPL.UPL.err = CREAM.MESG.M0927
		sv_a = urhk_SetOrbOut("Error_0|Err ^" + XLSUPL.UPL.err + "^dummy")
		GOTO ENDOFSCRIPT
	#}
	ENDIF
	

	sv_a = "nohup " + sv_m + "/cust_xlsupload.com " + XLSUPL.UPL.filename + " $TBA_UXML/cparam_xls.xml " + XLSUPL.UPL.DatFileName + " " + XLSUPL.UPL.ResXLSFileName + " " + XLSUPL.UPL.SkipFileName
	PRINT(sv_a)
	sv_v = SYSTEM(sv_a)
	
	
	BANCS.INPARAM.inpCommand = "[ -f " + XLSUPL.UPL.DatFileName + " ] && echo 1 || echo 2"
	sv_r = urtn_execSysCmd("")
	sv_n = 0
	WHILE(sv_n < CINT(BANCS.OUTPUT.opCount))
	#{
		sv_m = FORMAT$(sv_n, "%d")
		sv_s = ("BANCS").("OUTPUT").("sysOutput_" + sv_m)
		PRINT(sv_s)
		sv_n = sv_n + 1
	#}
	DO
	
	
	IF (sv_s == "2") THEN
	#{
		sv_q = "exebatch babx4040 $B2K_SESSION_ID '" + XLSUPL.UPL.ResXLSFileName + "' 'Result Xls file for CPARAM Menu Flat File Conversion ' MANAGER 1 N"
		sv_v = SYSTEM(sv_q)
		sv_a = urhk_setOrbOut("SuccessOrFailure|Y")
		#sv_a = urhk_SetOrbOut("RESULT_MSG|Process invoked successfully. Unable to convert the XLS to flat file. Please check the Report XLS in HPR")
		sv_a = urhk_SetOrbOut("RESULT_MSG|"+CREAM.MESG.M0928)
		EXITSCRIPT
	#}
	ENDIF
	
	XLSUPL.UPL.InFile = XLSUPL.UPL.DatFileName
#}
ENDIF

##################
# Now that we have a DAT/ASCII File write the logic for upload. --- START
##################
PRINT(XLSUPL.UPL.InFile)

sv_r = SYSTEM("babx4061 $B2K_SESSION_ID cparam_upload_proc.scr " + XLSUPL.UPL.InFile + " " + XLSUPL.UPL.actionTaken + " &")

sv_q = "exebatch babx4040 $B2K_SESSION_ID '" + XLSUPL.UPL.ResXLSFileName + "' 'Result Xls file for CPARAM Menu Flat File Conversion ' MANAGER 1 N"
sv_v = SYSTEM(sv_q)

sv_q = "exebatch babx4040 $B2K_SESSION_ID '" + XLSUPL.UPL.InFile + "' 'ASCII file for CPARAM Menu' MANAGER 1 N"
sv_v = SYSTEM(sv_q)

##################
# Now that we have a DAT/ASCII File write the logic for upload. --- END
##################

###############################################################################
# Exit script
###############################################################################
SUCCESS:
sv_a = urhk_setOrbOut("SuccessOrFailure|Y")
sv_a = urhk_SetOrbOut("RESULT_MSG|"+CREAM.MESG.M0929)


###############################################################################
#	CALLING THE SCRIPT FOR TRANSFERING FILE TO CDCI USING UPLOADLCIENT EXE
###############################################################################

################################################################################
# Delete class only if present
################################################################################

ENDOFSCRIPT:
IF (CLASSEXISTS("XLSUPL", "UPL") != 0) THEN
#{
	DELETECLASS("XLSUPL", "UPL")
#}
ENDIF

################################################################################
# Delete repository only if present
################################################################################
IF (REPEXISTS("XLSUPL") != 0) THEN
#{
	DELETEREP("XLSUPL")
#}
ENDIF

end-->
