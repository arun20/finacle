#============================================================
# IMPORTANT: Auto Generated Header. DO NOT CHANGE MANUALLY.
# Product: Finacle Core
# Category: User Defined
# Script: CIFRecordReading.scr
# Type: NA|default
# Description: CIFRecordReading.scr
# Author: Divya_John01
# Date: 7/18/18 9:40 AM
# Modification Log:
#============================================================
IMPORT fileProcessingB001
IMPORT LibCommonB001
IMPORT LibCommonB002
FUNCTION executeSqlFileLH(fv_fileNameWithArgs)
#{
	fv_o = SYSTEM("chmod 755 "+fv_fileNameWithArgs)
	PRINT(fv_fileNameWithArgs)
	fv_o = SYSTEM("exebatch bauu9151 "+fv_fileNameWithArgs)
	PRINT(fv_o)
	RETURN fv_o
#}
ENDFUNCTION

FUNCTION createInsertSqlLH(fv_inpRepos,fv_inpClass)
#{
	fv_r = fv_inpRepos
	fv_c = fv_inpClass
	fv_errorCode = ""
	fv_errorMsg = ""
	
	fv_m = "inpFileNameWithPath|inpFileDelimiter|tableName|columnNames|columnCount"
	fv_e = ""
	
	fv_f = func_mandatoryCheckB(fv_r,fv_c,fv_m,BYREF fv_e)
	IF(fv_f == 1)THEN
	#{
		(fv_r).(fv_c).("errorMsg") = fv_e
		PRINT((fv_r).(fv_c).("errorMsg"))
		RETURN 1
	#}
	ENDIF
	
	fv_nm = "primaryKeyCol|numberColumns|dateColWithFormat|fileColSize|sqlFileName"
	fv_f = func_chkNonMandatorySRVInputsB(fv_r,fv_c,fv_nm)
	
	IF(TRIM((fv_r).(fv_c).("sqlFileName"))=="")THEN
	#{
		(fv_r).(fv_c).("sqlFileNameWithPath") = func_getUniqueFileNameB("TableInsert","sql")
		#}
	ELSE
		#{
		IF(RIGHT$(TOUPPER((fv_r).(fv_c).("sqlFileName")),4)==".SQL")THEN
		#{
			(fv_r).(fv_c).("sqlFileNameWithPath") = (fv_r).(fv_c).("sqlFileName")
			#}
		ELSE
			#{
			(fv_r).(fv_c).("sqlFileNameWithPath") = func_getUniqueFileNameB((fv_r).(fv_c).("sqlFileName"),"sql")
		#}
		ENDIF
	#}
	ENDIF
	
	(fv_r).(fv_c).("columnNames") = TRIM((fv_r).(fv_c).("columnNames"),',')
	(fv_r).(fv_c).("primaryKeyCol") = TRIM((fv_r).(fv_c).("primaryKeyCol"),',')
	(fv_r).(fv_c).("numberColumns") = TRIM((fv_r).(fv_c).("numberColumns"),',')
	(fv_r).(fv_c).("dateColWithFormat") = TRIM((fv_r).(fv_c).("dateColWithFormat"),',')
	(fv_r).(fv_c).("fileColSize") = TRIM((fv_r).(fv_c).("fileColSize"),',')
	
	fv_tmpComFileName = ""
	fv_tmpComFileName = func_getUniqueFileNameB("fileProcessTmp","com")
	fv_o = SYSTEM(">"+fv_tmpComFileName)
	
	fv_s = "cat " + (fv_r).(fv_c).("inpFileNameWithPath") + "|"
	fv_f = func_addDataToFileB(fv_tmpComFileName, fv_s)
	#fv_s = "sed DBQTYSTRs/'/''/gDBQTYSTR" + "|"
	#fv_f = func_addDataToFileB(fv_tmpComFileName, fv_s)
	fv_s = "sed DBQTYSTRs/^/'/gDBQTYSTR" + "|"
	fv_f = func_addDataToFileB(fv_tmpComFileName, fv_s)
	fv_s = "sed DBQTYSTRs/$/'/gDBQTYSTR" + "|"
	fv_f = func_addDataToFileB(fv_tmpComFileName, fv_s)
	fv_s = "sed DBQTYSTRs/"+ (fv_r).(fv_c).("inpFileDelimiter") +"/'"+ (fv_r).(fv_c).("inpFileDelimiter") +"'/gDBQTYSTR" + "|"
	fv_f = func_addDataToFileB(fv_tmpComFileName, fv_s)
	
	fv_s = "awk 'BEGIN {FS=DBQTYSTR"+ (fv_r).(fv_c).("inpFileDelimiter") +"DBQTYSTR;OFS=DBQTYSTR"+ (fv_r).(fv_c).("inpFileDelimiter") +"DBQTYSTR;}"
	fv_f = func_addDataToFileB(fv_tmpComFileName, fv_s)
	#########################################################################
	# DATE
	#########################################################################
	IF(TRIM((fv_r).(fv_c).("dateColWithFormat")) != "")THEN
	#{
		fv_i = 1
		fv_n = 0
		fv_f = func_getCountOfCharB((fv_r).(fv_c).("dateColWithFormat"),",",BYREF fv_n)
		fv_n = fv_n + 1
		WHILE(fv_i <= fv_n)
		#{
			fv_tmpString = func_getNthFieldFromStringB((fv_r).(fv_c).("dateColWithFormat"),",",fv_i)
			fv_dateCol = func_getNthFieldFromStringB(fv_tmpString,"|",1)
			fv_dateFormat = func_getNthFieldFromStringB(fv_tmpString,"|",2)
			fv_s = "{$" + fv_dateCol + "=DBQTYSTRTO_DATE(DBQTYSTR$" + fv_dateCol + "DBQTYSTR,'\''"+fv_dateFormat+"'\'')DBQTYSTR;}"
			fv_f = func_addDataToFileB(fv_tmpComFileName, fv_s)
			fv_i = fv_i + 1
		#}
		DO
	#}
	ENDIF
	
	#########################################################################
	# NUMBER
	#########################################################################
	IF(TRIM((fv_r).(fv_c).("numberColumns")) != "")THEN
	#{
		fv_i = 1
		fv_n = 0
		fv_f = func_getCountOfCharB((fv_r).(fv_c).("numberColumns"),",",BYREF fv_n)
		fv_n = fv_n + 1
		WHILE(fv_i <= fv_n)
		#{
			fv_tmpString = func_getNthFieldFromStringB((fv_r).(fv_c).("numberColumns"),",",fv_i)
			fv_s = "{$" + fv_tmpString + "=DBQTYSTRTO_NUMBER(DBQTYSTR$" + fv_tmpString + "DBQTYSTR)DBQTYSTR;}"
			fv_f = func_addDataToFileB(fv_tmpComFileName, fv_s)
			fv_i = fv_i + 1
		#}
		DO
	#}
	ENDIF
	
	#########################################################################
	# INSERT SQL STRING
	#########################################################################
	IF(TRIM((fv_r).(fv_c).("columnNames")) != "")THEN
	#{
		fv_i = 1
		fv_n = 0
		fv_f = func_getCountOfCharB((fv_r).(fv_c).("columnNames"),",",BYREF fv_n)
		fv_n = fv_n + 1
		WHILE(fv_i <= fv_n)
		#{
			fv_tmpString = func_getNthFieldFromStringB((fv_r).(fv_c).("columnNames"),",",fv_i)
			fv_colNum = func_getNthFieldFromStringB(fv_tmpString,"|",1)
			fv_colName = func_getNthFieldFromStringB(fv_tmpString,"|",2)
			(fv_r).(fv_c).("colName_"+FORMAT$(CINT(fv_colNum),"%d")) = fv_colName
			fv_i = fv_i + 1
		#}
		DO
		
		fv_i = 0
		fv_s = "INSERT INTO " + (fv_r).(fv_c).("tableName") + " ("
		WHILE(fv_i <= CDOUBLE((fv_r).(fv_c).("columnCount")))
		#{
			IF(FIELDEXISTS((fv_r).(fv_c).("colName_"+FORMAT$(fv_i,"%d"))))THEN
			#{
				fv_s = fv_s + (fv_r).(fv_c).("colName_"+FORMAT$(fv_i,"%d")) + ","
			#}
			ENDIF
			fv_i = fv_i + 1
		#}
		DO
		fv_s = LEFT$(fv_s,STRLEN(fv_s) - 1)
		fv_s = fv_s + ") VALUES ("
		
		fv_s = "{$1=DBQTYSTR" + fv_s + "DBQTYSTR$1;}"
		#Debug1
		print(fv_s)
		fv_f = func_addDataToFileB(fv_tmpComFileName, fv_s)
	#}
	ENDIF
	
	fv_s = "{" + TOLOWER("PRINT") + ";}"
	fv_f = func_addDataToFileB(fv_tmpComFileName, fv_s)
	fv_s = "END{}'" + "|"
	fv_f = func_addDataToFileB(fv_tmpComFileName, fv_s)
	
	fv_s = "sed DBQTYSTRs/"+ (fv_r).(fv_c).("inpFileDelimiter") +"/,/gDBQTYSTR" + "|"
	fv_f = func_addDataToFileB(fv_tmpComFileName, fv_s)
	
	fv_s = "sed DBQTYSTRs/$/);/gDBQTYSTR > " + (fv_r).(fv_c).("sqlFileNameWithPath")
	fv_f = func_addDataToFileB(fv_tmpComFileName, fv_s)
	
	fv_u = urhk_getFileLocation("COM|replaceInFile.com")
	IF(fv_u != 0)THEN
	#{
		RETURN fv_u
	#}
	ENDIF
	
	fv_comFileLocation = ""
	fv_comFileLocation = BANCS.OUTPARAM.fileLocation
	fv_s = fv_comFileLocation + "replaceInFile.com " + " CURRENT_PATH DBQTYSTR " + fv_tmpComFileName + " " + fv_tmpComFileName + "_TMP"
	fv_o = SYSTEM(fv_s)
	IF(fv_o != 0)THEN
	#{
		RETURN 1
	#}
	ENDIF
	fv_s = "mv " + fv_tmpComFileName + "_TMP " + fv_tmpComFileName
	fv_o = SYSTEM(fv_s)
	IF(fv_o != 0)THEN
	#{
		RETURN 1
	#}
	ENDIF
	
	fv_o = SYSTEM("chmod 755 "+fv_tmpComFileName)
	sv_k = CUST.DATA.path
	sv_p = sv_k + "/" + fv_tmpComFileName
	fv_o = SYSTEM(sv_p)
	PRINT(sv_p)
	PRINT(fv_o)
	IF(fv_o != 0)THEN
	#{
		fv_o = SYSTEM("rm -f "+fv_tmpComFileName)
		RETURN 1
	#}
	ENDIF
	fv_o = SYSTEM("rm -f "+fv_tmpComFileName)
	
	RETURN 0
#}
ENDFUNCTION

FUNCTION insertIntoTableFromFileLH(fv_inpRepos,fv_inpClass)
#{
	fv_r = fv_inpRepos
	fv_c = fv_inpClass
	fv_f = func_createInsertSqlLH(fv_r,fv_c)
	PRINT(fv_f)
	IF(fv_f == 0)THEN
	#{
		fv_f = func_executeSqlFileLH((fv_r).(fv_c).("sqlFileNameWithPath"))
		PRINT(fv_f)
	#}
	ENDIF
	RETURN fv_f
#}
ENDFUNCTION

FUNCTION modifyInpFileForStdUploadLH(fv_inpRepos,fv_inpClass)
#{
	fv_r = fv_inpRepos
	fv_c = fv_inpClass
	fv_errorCode = ""
	fv_errorMsg = ""
	
	fv_tmpString = ""
	fv_m = "inpFileNameWithPath|inpFileDelimiter|tableName|uploadBatchId"
	fv_e = ""
	
	fv_f = func_mandatoryCheckB(fv_r,fv_c,fv_m,BYREF fv_e)
	IF(fv_f == 1)THEN
	#{
		(fv_r).(fv_c).("errorMsg") = fv_e
		PRINT((fv_r).(fv_c).("errorMsg"))
		RETURN 1
	#}
	ENDIF
	
	IF(TRIM((fv_r).(fv_c).("inpFileDelimiter"))=="|")THEN
	#{
		fv_locDelimiter = ","
		#}
	ELSE
		#{
		fv_locDelimiter = "|"
	#}
	ENDIF
	
	(fv_r).(fv_c).("columnNames") = "1|UPLOAD_REC_SRL_NUM,2|UPLOAD_STRING,3|UPLOAD_FILE_NAME,4|UPLOAD_BATCH_ID,5|UPLOAD_STATUS,6|ENTITY_CRE_FLG,7|DEL_FLG,8|LCHG_USER_ID,9|LCHG_TIME,10|RCRE_USER_ID,11|RCRE_TIME,12|BANK_ID"
	(fv_r).(fv_c).("columnCount") = "12"
	
	fv_tmpComFileName = ""
	fv_tmpComFileName = func_getUniqueFileNameB("fileProcessTmp","com")
	fv_o = SYSTEM(">"+fv_tmpComFileName)
	
	fv_s = "cat -n " + (fv_r).(fv_c).("inpFileNameWithPath") + "|"
	fv_f = func_addDataToFileB(fv_tmpComFileName, fv_s)
	fv_s = "sed DBQTYSTRs/./&"+fv_locDelimiter+"/7DBQTYSTR" + "|"
	fv_f = func_addDataToFileB(fv_tmpComFileName, fv_s)
	#FIX TO INSERT '&'
	fv_s = "sed DBQTYSTRs/&/'|| chr(38) ||'/gDBQTYSTR" + "|"
	fv_f = func_addDataToFileB(fv_tmpComFileName, fv_s)
	
	fv_n = 0
	fv_f = func_getCountOfCharB((fv_r).(fv_c).("inpFileNameWithPath"),"/",BYREF fv_n)
	fv_n = fv_n + 1
	fv_tmpString = func_getNthFieldFromStringB((fv_r).(fv_c).("inpFileNameWithPath"),"/",fv_n)
	fv_s = "sed DBQTYSTRs/$/"+fv_locDelimiter+fv_tmpString+"/gDBQTYSTR" + "|"
	fv_f = func_addDataToFileB(fv_tmpComFileName, fv_s)
	fv_s = "sed DBQTYSTRs/$/"+fv_locDelimiter+(fv_r).(fv_c).("uploadBatchId")+"/gDBQTYSTR" + "|"
	fv_f = func_addDataToFileB(fv_tmpComFileName, fv_s)
	fv_tmpString = func_getSysDateTimeWithFormatB("YYYYMMDDHH24MISS")
	(fv_r).(fv_c).("inpFileNameWithPath") = CUST.DATA.tempPath + "/SampleSql.txt"
	fv_a = SYSTEM("chmod 777 "+(fv_r).(fv_c).("inpFileNameWithPath"))
	PRINT(fv_a)
	fv_s = "sed DBQTYSTRs/$/"+fv_locDelimiter+"S"+fv_locDelimiter+"Y"+fv_locDelimiter+"N"+fv_locDelimiter+BANCS.STDIN.userId+fv_locDelimiter+fv_tmpString+fv_locDelimiter+BANCS.STDIN.userId+fv_locDelimiter+fv_tmpString+fv_locDelimiter+BANCS.STDIN.contextBankId+"/gDBQTYSTR" + " >> " + (fv_r).(fv_c).("inpFileNameWithPath")
	fv_f = func_addDataToFileB(fv_tmpComFileName, fv_s)
	
	fv_u = urhk_getFileLocation("COM|replaceInFile.com")
	IF(fv_u != 0)THEN
	#{
		RETURN fv_u
	#}
	ENDIF
	
	fv_comFileLocation = ""
	fv_comFileLocation = BANCS.OUTPARAM.fileLocation
	fv_s = fv_comFileLocation + "replaceInFile.com " + " CURRENT_PATH DBQTYSTR " + fv_tmpComFileName + " " + fv_tmpComFileName + "_TMP"
	fv_o = SYSTEM(fv_s)
	IF(fv_o != 0)THEN
	#{
		RETURN 1
	#}
	ENDIF
	fv_s = "mv " + fv_tmpComFileName + "_TMP " + fv_tmpComFileName
	fv_o = SYSTEM(fv_s)
	IF(fv_o != 0)THEN
	#{
		RETURN 1
	#}
	ENDIF
	
	sv_k = CUST.DATA.path
	sv_p = sv_k + "/" + fv_tmpComFileName
	PRINT(sv_p)
	fv_tmpComFileName = sv_p
	fv_o = SYSTEM("chmod 755 "+fv_tmpComFileName)
	fv_o = SYSTEM(fv_tmpComFileName)
	IF(fv_o != 0)THEN
	#{
		fv_o = SYSTEM("rm -f "+fv_tmpComFileName)
		RETURN 1
	#}
	ENDIF
	fv_o = SYSTEM("rm -f "+fv_tmpComFileName)
	
	(fv_r).(fv_c).("inpFileDelimiter") = fv_locDelimiter
	(fv_r).(fv_c).("primaryKeyCol") = ""
	(fv_r).(fv_c).("numberColumns") = ""
	(fv_r).(fv_c).("dateColWithFormat") = "9|YYYYMMDDHH24MISS,11|YYYYMMDDHH24MISS"
	(fv_r).(fv_c).("fileColSize") = ""
	(fv_r).(fv_c).("sqlFileName") = ""
	
	RETURN 0
#}
ENDFUNCTION


######################################################################
# FUNCTION TO INSERT DELIMETER FILE INTO CUSTOM TABLE
#######################################################################
FUNCTION readAndinsertFileDataLH(fv_fileNamewitPath,fv_fileName,fv_colCount,fv_tableName,fv_insertColumns,fv_fileColSize,fv_primKeyCol,fv_dateColWithFrmt,fv_NumberColumns,fv_uplBatchId,fv_delimiter,fv_addParam)
#{
	IF(FIELDEXISTS(BANCS.INPARAM.useInsertSql))THEN
	#{
		IF(TRIM(BANCS.INPARAM.useInsertSql) == "Y")THEN
		#{
			sub_createRepClassB ("RAPD","DATA")
			RAPD.DATA.inpFileNameWithPath=fv_fileNamewitPath
			RAPD.DATA.inpFileDelimiter=fv_delimiter
			RAPD.DATA.tableName=fv_tableName
			RAPD.DATA.uploadBatchId = fv_uplBatchId
			RAPD.DATA.sqlFileName=""
			sv_f = func_modifyInpFileForStdUploadLH("RAPD","DATA")
			PRINT(sv_f)
			IF(sv_f == 0)THEN
			#{
				sv_f = func_insertIntoTableFromFileLH("RAPD","DATA")
				PRINT(sv_f)
				IF(sv_f == 0)THEN
				#{
					RAPD.DATA.customSchema = ""
					RAPD.DATA.customSchema = func_getCustomSchemaNameB()
					RAPD.DATA.sqlFileName=func_getUniqueFileNameB("READ_AND_POPULATE_DATA","sql")
					sv_s = "EXECUTE "+RAPD.DATA.customSchema+".READ_AND_POPULATE_DATA.READ_AND_POPULATE_DATA_PROC("
					sv_s = sv_s + "'"+fv_fileName+"'" + ","
					sv_s = sv_s + "'"+fv_colCount+"'" + ","
					sv_s = sv_s + "'"+fv_tableName+"'" + ","
					sv_s = sv_s + "'"+fv_insertColumns+"'" + ","
					sv_s = sv_s + "'"+fv_fileColSize+"'" + ","
					sv_s = sv_s + "'"+fv_primKeyCol+"'" + ","
					sv_s = sv_s + "'"+fv_dateColWithFrmt+"'" + ","
					sv_s = sv_s + "'"+fv_NumberColumns+"'" + ","
					sv_s = sv_s + "'"+fv_uplBatchId+"'" + ","
					sv_s = sv_s + "'"+fv_delimiter+"'" + ","
					sv_s = sv_s + "'"+fv_addParam+"'" + ","
					sv_s = sv_s + "'"+BANCS.STDIN.contextBankId+"')"
					PRINT(sv_s)
					sv_f = func_addDataToFileB(RAPD.DATA.sqlFileName, sv_s)
					sv_f = func_executeSqlFileB(RAPD.DATA.sqlFileName)
					PRINT(sv_f)
					#Debug2
					sv_o = SYSTEM("cp "+RAPD.DATA.sqlFileName+" "+RAPD.DATA.sqlFileName+".copy")
					print(sv_o)
					sv_o = SYSTEM("rm -f "+RAPD.DATA.sqlFileName)
					print(sv_o)
					#sv_o = '0'
					BANCS.INPARAM.useInsertSql = "N"
					RETURN sv_o
				#}
				ENDIF
			#}
			ENDIF
			BANCS.INPARAM.useInsertSql = "N"
			RETURN sv_f
		#}
		ENDIF
	#}
	ENDIF
	sub_createRepClassB("RAIFD","ABCDE")
	PRINT(fv_fileName)
	PRINT(fv_colCount)
	PRINT(fv_tableName)
	PRINT(fv_insertColumns)
	PRINT(fv_delimiter)
	PRINT(fv_fileColSize)
	PRINT(fv_primKeyCol)
	PRINT(fv_dateColWithFrmt)
	PRINT(fv_NumberColumns)
	PRINT(fv_addParam)
	PRINT(fv_uplBatchId)
	RAIFD.ABCDE.fv_recCnt = "1"
	RAIFD.ABCDE.fv_colLoopCount = "0"
	#fv_colCount = CINT(fv_colCount) - 1
	sv_t= urtn_fileOpen(fv_fileNamewitPath + "|r")
	PRINT(sv_t)
	IF (sv_t != 0) THEN
	#{
		RETURN 1
	#}
	ENDIF
	IF (sv_t == 0) THEN
	#{
		fv_fileindex = sv_t
		PRINT(fv_fileindex)
		fv_fileInput = ""
		sv_t = urtn_fileRead(fv_fileindex + "|BANCS.INPUT.outRecord")
		PRINT (sv_t)
		WHILE(sv_t==0)
		#{
			PRINT(BANCS.INPUT.outRecord)
			fv_outRecord = BANCS.INPUT.outRecord
			fv_outRecord1 = fv_outRecord
			PRINT(fv_outRecord1)
			fv_uplErrMsg = ""
			lv_d = func_validateRecordDataB(fv_tableName,fv_fileName,fv_outRecord,fv_primKeyCol,fv_fileColSize,fv_dateColWithFrmt,fv_NumberColumns,fv_addParam,fv_delimiter,BYREF sv_g,BYREF sv_h)
			PRINT(sv_g)
			PRINT(sv_h)
			fv_uplErrMsg = sv_g
			PRINT(fv_uplErrMsg)
			fv_outRecord = sv_h
			PRINT(fv_outRecord)
			
			fv_colNamesList = fv_insertColumns
			PRINT(fv_colNamesList)
			RAIFD.ABCDE.fv_colNamesList = ""
			RAIFD.ABCDE.fv_outRecord = ""
			lv_s = func_getCountOfCharB(fv_colNamesList,",",BYREF RAIFD.ABCDE.fv_colLoopCount)
			PRINT(RAIFD.ABCDE.fv_colLoopCount)
			RAIFD.ABCDE.fv_colLoopCount = CINT(RAIFD.ABCDE.fv_colLoopCount) + 1
			PRINT(RAIFD.ABCDE.fv_colLoopCount)
			fv_columnCount2 = 1
			WHILE(fv_columnCount2 <= CINT(RAIFD.ABCDE.fv_colLoopCount))
			#{
				
				IF(CINT(RAIFD.ABCDE.fv_colLoopCount) == 1)THEN
				#{
					PRINT(fv_colNamesList)
					RAIFD.ABCDE.fv_colNamesList1 = fv_colNamesList
					#}
				ELSE
					#{
					RAIFD.ABCDE.fv_colNamesList1 = func_getNthFieldFromStringB(fv_colNamesList,",",fv_columnCount2)
				#}
				ENDIF
				PRINT(RAIFD.ABCDE.fv_colNamesList1)
				RAIFD.ABCDE.fv_colNamesList2 = func_getNthFieldFromStringB(RAIFD.ABCDE.fv_colNamesList1,"|","1")
				PRINT(RAIFD.ABCDE.fv_colNamesList2)
				RAIFD.ABCDE.fv_colNamesList3 = func_getNthFieldFromStringB(RAIFD.ABCDE.fv_colNamesList1,"|","2")
				PRINT(RAIFD.ABCDE.fv_colNamesList3)
				
				RAIFD.ABCDE.fv_colNamesList = RAIFD.ABCDE.fv_colNamesList + RAIFD.ABCDE.fv_colNamesList3
				PRINT(RAIFD.ABCDE.fv_colNamesList3)
				
				IF(fv_columnCount2 != CINT(RAIFD.ABCDE.fv_colLoopCount))THEN
				#{
					RAIFD.ABCDE.fv_colNamesList = RAIFD.ABCDE.fv_colNamesList + ","
					#}
				ELSE
					#{
					RAIFD.ABCDE.fv_colNamesList = RAIFD.ABCDE.fv_colNamesList + ""
				#}
				ENDIF
				PRINT(RAIFD.ABCDE.fv_colNamesList)
				
				RAIFD.ABCDE.fv_outRecord1 = func_getNthFieldFromStringB(fv_outRecord,fv_delimiter,RAIFD.ABCDE.fv_colNamesList2)
				PRINT(RAIFD.ABCDE.fv_outRecord1)
				RAIFD.ABCDE.fv_outRecord = RAIFD.ABCDE.fv_outRecord + RAIFD.ABCDE.fv_outRecord1
				
				IF(fv_columnCount2 != CINT(RAIFD.ABCDE.fv_colLoopCount))THEN
				#{
					RAIFD.ABCDE.fv_outRecord  = RAIFD.ABCDE.fv_outRecord + fv_delimiter
					#}
				ELSE
					#{
					RAIFD.ABCDE.fv_outRecord = RAIFD.ABCDE.fv_outRecord  + ""
				#}
				ENDIF
				PRINT(RAIFD.ABCDE.fv_outRecord)
				fv_columnCount2 = fv_columnCount2 + 1
				PRINT(fv_columnCount2)
			#}
			DO
			PRINT(RAIFD.ABCDE.fv_colNamesList)
			PRINT(RAIFD.ABCDE.fv_outRecord)
			fv_colNames = RAIFD.ABCDE.fv_colNamesList
			fv_outRecord = RAIFD.ABCDE.fv_outRecord
			PRINT(fv_outRecord)
			fv_colNamesList = fv_colNames
			PRINT(fv_colNamesList)
			fv_insertVal = ""
			PRINT(fv_colCount)
			PRINT(fv_colNames)
			fv_columnCount2 = 1
			WHILE(fv_columnCount2 <= fv_colCount)
			#{
				PRINT(fv_colNames)
				IF (fv_colNames != "") THEN
				#{
					fv_nextPosition = GETPOSITION(fv_colNamesList,",")
					WHILE((fv_nextPosition > 0))
					#{
						fv_columns = TRIM(MID$(fv_colNamesList,0,fv_nextPosition - 1))
						PRINT(fv_columns)
						fv_dateIndicator = MID$(fv_columns,0,1)
						IF(fv_dateIndicator == "^")THEN
						#{
							fv_insertVal1 = func_getNthFieldFromStringB(fv_outRecord,fv_delimiter,fv_columnCount2)
							IF(fv_insertVal1 != "") THEN
							#{
								fv_insertVal1 = func_replaceCharB(fv_insertVal1,"/","-")
								fv_insertVal = fv_insertVal+"DT"+fv_insertVal1
								#}
							ELSE
								#{
								fv_insertVal = fv_insertVal + fv_insertVal1
							#}
							ENDIF
							PRINT(fv_insertVal)
							#}
						ELSE
							#{
							fv_insertVal1 = func_getNthFieldFromStringB(fv_outRecord,fv_delimiter,fv_columnCount2)
							fv_insertVal = fv_insertVal + fv_insertVal1
						#}
						ENDIF
						PRINT(fv_insertVal)
						fv_insertVal = fv_insertVal +"|"
						PRINT(fv_insertVal)
						fv_colNamesList =  RIGHT$(fv_colNamesList,(STRLEN(fv_colNamesList)-fv_nextPosition))
						PRINT(fv_colNamesList)
						fv_nextPosition = GETPOSITION(fv_colNamesList,",")
						fv_columnCount2 = fv_columnCount2 + 1
						PRINT(fv_nextPosition)
						
					#}
					DO
					IF(fv_nextPosition == 0)THEN
					#{
						fv_dateIndicator = MID$(fv_colNamesList,0,1)
						IF(fv_dateIndicator == "^")THEN
						#{
							fv_insertVal1 = func_getNthFieldFromStringB(fv_outRecord,fv_delimiter,fv_columnCount2)
							IF(fv_insertVal1 != "") THEN
							#{
								fv_insertVal1 = func_replaceCharB(fv_insertVal1,"/","-")
								fv_insertVal = fv_insertVal+"DT"+fv_insertVal1
								#}
							ELSE
								#{
								fv_insertVal = fv_insertVal + fv_insertVal1
							#}
							ENDIF
							PRINT(fv_insertVal)
							#}
						ELSE
							#{
							fv_insertVal1 = func_getNthFieldFromStringB(fv_outRecord,fv_delimiter,fv_columnCount2)
							fv_insertVal = fv_insertVal + fv_insertVal1
						#}
						ENDIF
						PRINT(fv_insertVal)
						fv_insertVal = fv_insertVal +"|"
						PRINT(fv_insertVal)
					#}
					ENDIF
				#}
				ENDIF
				fv_columnCount2 = fv_columnCount2 + 1
			#}
			DO
			
			PRINT(fv_colNames)
			PRINT(fv_insertVal)
			fv_outRecord1 = func_replaceCharB(fv_outRecord1,"|",",")
			PRINT(fv_outRecord1)
			fv_colNames1 = fv_colNames + ",UPLOAD_FILE_NAME,UPLOAD_STATUS,UPLOAD_STRING,UPLOAD_ERR_MSG,UPLOAD_BATCH_ID,UPLOAD_REC_SRL_NUM"
			IF(fv_uplErrMsg != "")THEN
			#{
				fv_insertVal = fv_insertVal + fv_fileName + "|F|" + fv_outRecord1 + "|" +fv_uplErrMsg + "|" +fv_uplBatchId  + "|" + FORMAT$(CINT(RAIFD.ABCDE.fv_recCnt),"%d")
				#}
			ELSE
				#{
				fv_insertVal = fv_insertVal + fv_fileName + "|S|" + fv_outRecord1 + "|" +fv_uplErrMsg + "|" +fv_uplBatchId + "|" + FORMAT$(CINT(RAIFD.ABCDE.fv_recCnt),"%d")
			#}
			ENDIF
			
			fv_colNames1 = func_replaceCharB(fv_colNames1,"^","")
			PRINT(fv_insertVal)
			PRINT(fv_colNames1)
			
			sv_f = func_insertIntoCustTableB(fv_tableName, fv_colNames1, fv_insertVal)
			
			RAIFD.ABCDE.fv_recCnt = CINT(RAIFD.ABCDE.fv_recCnt) + 1
			PRINT(RAIFD.ABCDE.fv_recCnt)
			sv_t = urtn_fileRead(fv_fileindex + "|BANCS.INPUT.outRecord")
			PRINT (sv_t)
			
		#}
		DO
		
	#}
	ENDIF
	sv_t =urtn_fileClose(fv_fileindex)
	PRINT(sv_t)
	sub_deleteRepClassB("RAIFD","ABCDE")
	RETURN 0
#}
ENDFUNCTION


##############################################################################
# FUNCTION TO CONVERT FIXED LENGTH TO DELIMETER
##############################################################################

FUNCTION convFixLengthFileToDelimited(fv_inpRepos,fv_inpClass)
#{
	fv_r = fv_inpRepos
	fv_c = fv_inpClass
	fv_errorCode = ""
	fv_errorMsg = ""
	
	fv_m = "inpFileNameWithPath|"
	fv_m = fv_m + "delimiterPosition|"
	fv_m = fv_m + "outputFileDelimiter|"
	fv_m = fv_m + "outputFileName"
	
	fv_e = ""
	
	fv_f = func_mandatoryCheckB(fv_r,fv_c,fv_m,BYREF fv_e)
	IF(fv_f == 1)THEN
	#{
		(fv_r).(fv_c).("errorMsg") = fv_e
		PRINT((fv_r).(fv_c).("errorMsg"))
		RETURN 1
	#}
	ENDIF
	
	fv_nm = "trimSpaceFlg"
	fv_f = func_chkNonMandatorySRVInputsB(fv_r,fv_c,fv_nm)
	
	fv_k = ""
	
	fv_tmpComFileName = func_getUniqueFileNameB("fileProcessTmp","com")
	fv_tmpOutFileName = func_getUniqueFileNameB("fileProcessTmpOut","txt")
	PRINT(fv_tmpComFileName)
	PRINT(fv_tmpOutFileName)
	fv_n = 0
	fv_f = func_getCountOfCharB((fv_r).(fv_c).("delimiterPosition"),",",BYREF fv_n)
	IF(fv_f != 0)THEN
	#{
		RETURN fv_f
	#}
	ENDIF
	fv_n = fv_n + 1
	fv_f=SYSTEM(">"+fv_tmpComFileName)
	PRINT(fv_f)
	IF(fv_f != 0)THEN
	#{
		RETURN fv_f
	#}
	ENDIF
	
	fv_k = "awk '{OFS=DBQTYSTR"+(fv_r).(fv_c).("outputFileDelimiter")+"DBQTYSTR};{" + TOLOWER("PRINT ")
	fv_tmpString = ""
	fv_a = 1
	fv_configCounter = 1
	WHILE(fv_a <= fv_n)
	#{
		fv_tmpString = func_getNthFieldFromStringB((fv_r).(fv_c).("delimiterPosition"),",",fv_a)
		PRINT(fv_tmpString)
		
		fv_k = fv_k + "substr($0,"+format$(fv_configCounter,"%d")+","+fv_tmpString+"),"
		PRINT(fv_k)
		
		fv_configCounter = fv_configCounter + CINT(fv_tmpString)
		PRINT(fv_configCounter)
		fv_a = fv_a + 1
	#}
	DO
	
	fv_k = LEFT$(fv_k,STRLEN(fv_k) - 1)
	fv_k = fv_k + "}' "+ (fv_r).(fv_c).("inpFileNameWithPath")
	
	IF((fv_r).(fv_c).("trimSpaceFlg") == "N")THEN
	#{
		fv_k = fv_k + ">"+(fv_r).(fv_c).("outputFileName")
		#}
	ELSE
		#{
		fv_k = fv_k + ">"+fv_tmpOutFileName
	#}
	ENDIF
	
	fv_f = func_addDataToFileB(fv_tmpComFileName, fv_k)
	fv_u = urhk_getFileLocation("COM|replaceInFile.com")
	IF(fv_u != 0)THEN
	#{
		RETURN fv_u
	#}
	ENDIF
	
	fv_comFileLocation = ""
	fv_comFileLocation = BANCS.OUTPARAM.fileLocation
	fv_u = fv_comFileLocation + "replaceInFile.com " + " CURRENT_PATH DBQTYSTR " + fv_tmpComFileName + " " + fv_tmpComFileName + "_TMP"
	fv_f = SYSTEM(fv_u)
	IF(fv_f != 0)THEN
	#{
		RETURN 1
	#}
	ENDIF
	fv_u = "mv " + fv_tmpComFileName + "_TMP " + fv_tmpComFileName
	fv_f = SYSTEM(fv_u)
	PRINT(fv_f)
	IF(fv_f != 0)THEN
	#{
		RETURN fv_f
	#}
	ENDIF
	
	IF((fv_r).(fv_c).("trimSpaceFlg") != "N")THEN
	#{
		fv_k = "sed -e 's/[[:space:]]*"+(fv_r).(fv_c).("outputFileDelimiter")+"[[:space:]]*/"+(fv_r).(fv_c).("outputFileDelimiter")+"/g' " +fv_tmpOutFileName +">" +(fv_r).(fv_c).("outputFileName")
		fv_f = func_addDataToFileB(fv_tmpComFileName, fv_k)
	#}
	ENDIF
	fv_l = urhk_getEnv("PWD")
	IF(fv_l != 0)THEN
	#{
		RETURN fv_l
	#}
	ENDIF
	fv_b = BANCS.OUTPARAM.envValue
	PRINT(fv_b)
	fv_f = SYSTEM("chmod 755 "+fv_tmpComFileName)
	PRINT(fv_f)
	IF(fv_f != 0)THEN
	#{
		RETURN fv_f
	#}
	ENDIF
	fv_u = fv_b +"/" + fv_tmpComFileName
	#fv_u = fv_tmpComFileName
	PRINT(fv_u)
	fv_f = SYSTEM(fv_u)
	PRINT(fv_f)
	IF(fv_f != 0)THEN
	#{
		RETURN fv_f
	#}
	ENDIF
	
	fv_u = "rm -f " +fv_tmpComFileName
	fv_f = SYSTEM(fv_u)
	fv_u = "rm -f " +fv_tmpOutFileName
	fv_f = SYSTEM(fv_u)
	
	RETURN 0
#}
ENDFUNCTION


SUB genFailureLst1()
#{
	CUST.DATA.failCount = CINT(CUST.DATA.failCount) + 1
	
	CUST.DATA.failureReason = "FAILED"
	
	CUST.DATA.outRecord  =   CUST.DATA.failCount + "|"  + CUST.DATA.errorMsg   + "|" + CUST.DATA.failureReason
	PRINT(CUST.DATA.outRecord)
	PRINT(CUST.DATA.failureLst)
	sv_r = func_addDataToFileB(CUST.DATA.failureLst,CUST.DATA.outRecord)
	
#}
ENDSUB

<--START
	# Script body goes here
	LIBNAME CUSTOMSO
	TRACE ON
	
	sub_createRepClassB("CUST","DATA")
	
	
	CUST.DATA.insertSuccess = "N"
	CUST.DATA.failCount = "0"
	CUST.DATA.BODDate = MID$(BANCS.STDIN.BODDate,0,10)
	PRINT(CUST.DATA.BODDate)
	
	CUST.DATA.failureLst            = func_getUniqueFileNameB("LHCIFBatchReadingFailure", "lst")
	PRINT(CUST.DATA.failureLst)
	#-----------------------------------------------------------------------
	# GET UPLOADED FILE PATH AND FILE NAME FROM CPARAM
	#-----------------------------------------------------------------------
	
	lv_u = "uplPath|SELECT PARAMETER_VALUE "
	lv_u = lv_u + " FROM CUSTOM.C_CPMASTER CPARAM, CUSTOM.C_CPVALUE CPVALUE"
	lv_u = lv_u + " WHERE CPVALUE.PARAMETER_ID = 'CIF_UPL_PATH' AND CPARAM.PARAMETER_ID = CPVALUE.PARAMETER_ID"
	lv_u = lv_u + " AND CPVALUE.DEL_FLG != 'Y' AND CPVALUE.ENTITY_CRE_FLG = 'Y' AND "
	lv_u = lv_u + " CPARAM.DEL_FLG != 'Y' AND CPARAM.ENTITY_CRE_FLG = 'Y' AND CPARAM.MODULE_NAME = 'LOANS' "
	lv_u = lv_u + " AND CPVALUE.BANK_ID = ?SVAR  AND CPARAM.BANK_ID = ?SVAR"
	
	
	BANCS.INPARAM.BINDVARS =  BANCS.STDIN.contextBankId +  "|" + BANCS.STDIN.contextBankId
	lv_z = urhk_dbSelectWithBind(lv_u)
	IF(lv_z != "0")THEN
	#{
		PRINT("CPARAM FETCH NOT SUCCESS")
		CUST.DATA.errorMsg = "CPARAM Fetch failed for - CIF_UPL_PATH"
		CUST.DATA.successOrFailure = "F"
		sub_genFailureLst1()
		GOTO END
	#}
	ENDIF
	sub_copyOutparamFieldB("uplPath","CUST","DATA","uplPath","")
	PRINT(CUST.DATA.uplPath)
	
	lv_u = "uplFileName|SELECT PARAMETER_VALUE "
	lv_u = lv_u + " FROM CUSTOM.C_CPMASTER CPARAM, CUSTOM.C_CPVALUE CPVALUE"
	lv_u = lv_u + " WHERE CPVALUE.PARAMETER_ID = 'CIF_UPL_FILE' AND CPARAM.PARAMETER_ID = CPVALUE.PARAMETER_ID"
	lv_u = lv_u + " AND CPVALUE.DEL_FLG != 'Y' AND CPVALUE.ENTITY_CRE_FLG = 'Y' AND "
	lv_u = lv_u + " CPARAM.DEL_FLG != 'Y' AND CPARAM.ENTITY_CRE_FLG = 'Y' AND CPARAM.MODULE_NAME = 'LOANS' "
	lv_u = lv_u + " AND CPVALUE.BANK_ID = ?SVAR  AND CPARAM.BANK_ID = ?SVAR"
	
	
	BANCS.INPARAM.BINDVARS =  BANCS.STDIN.contextBankId +  "|" + BANCS.STDIN.contextBankId
	lv_z = urhk_dbSelectWithBind(lv_u)
	IF(lv_z != "0")THEN
	#{
		PRINT("CPARAM FETCH NOT SUCCESS")
		CUST.DATA.errorMsg = "CPARAM Fetch failed for - CIF_UPL_FILE"
		CUST.DATA.successOrFailure = "F"
		CUST.DATA.cifId = ""
		sub_genFailureLst1()
		GOTO END
	#}
	ENDIF
	sub_copyOutparamFieldB("uplFileName","CUST","DATA","uplFileName","")
	PRINT(CUST.DATA.uplFileName)
	
	CUST.DATA.inpFileNameWithPath   = CUST.DATA.uplPath + "/" + CUST.DATA.uplFileName
	PRINT(CUST.DATA.inpFileNameWithPath)
	
	CUST.DATA.inFile = CUST.DATA.inpFileNameWithPath
	#-------------------------------------
	# TO CHECK IF FILE IS IN .TXT FORMAT
	#--------------------------------------
	CUST.DATA.uplFileExtn = func_getNthFieldFromStringB(CUST.DATA.inpFileNameWithPath,".",2)
	PRINT(CUST.DATA.uplFileExtn)
	
	IF((CUST.DATA.uplFileExtn != "txt") AND (TRIM(CUST.DATA.uplFileExtn) != "TXT"))THEN
	#{
		PRINT("File Extension Mismath Main")
		
		CUST.DATA.errorMsg = " Uploaded File should be in .txt format"
		CUST.DATA.successOrFailure = "F"
		CUST.DATA.cifId = ""
		sub_genFailureLst1()
		GOTO END
		
	#}
	ENDIF
	
	#-------------------------------------
	# VALIDATE HEADER INFO IN FILE.TXT
	#--------------------------------------
	sv_t= urtn_fileOpen(CUST.DATA.inFile + "|r")
	PRINT(sv_t)
	
	IF (sv_t == 0) THEN
	#{
		CUST.DATA.fileindex = sv_t
		PRINT(CUST.DATA.fileindex)
		
		sv_w = urtn_fileRead(CUST.DATA.fileindex + "|CUST.DATA.record")
		PRINT(sv_w)
		
		IF(sv_w == 0)THEN
		#{
			CUST.DATA.selRec=CUST.DATA.record
			PRINT(CUST.DATA.selRec)
			PRINT(STRLEN(CUST.DATA.selRec))
			
			#IF(STRLEN(CUST.DATA.selRec) != 9) THEN
			#{
			#	sv_t = urtn_fileClose(CUST.DATA.fileindex)
			#	PRINT(sv_t)
			#	CUST.DATA.errorMsg = " Header Record is not in correct format: HDDMMYYYY"
		#		sub_genFailureLst1()
		#		GOTO END
				#}
		#	ELSE
				#{
				#CUST.DATA.headerDate = MID$(CUST.DATA.selRec,1,9)
				#PRINT(CUST.DATA.headerDate)
				
				#lv_h = "headerDate|SELECT TO_CHAR(TO_DATE(?SVAR,'DDMMYYYY'),'DD-MM-YYYY') FROM DUAL"
				#PRINT(lv_h)
				
				#BANCS.INPARAM.BINDVARS = CUST.DATA.headerDate
				
				#sv_d=urhk_dbSelectWithBind(lv_h)
				#sub_copyOutparamFieldB("headerDate","CUST","DATA","headerDate","")
				#CUST.DATA.headerDate = BANCS.OUTPARAM.headerDate
				#PRINT(CUST.DATA.headerDate)
				
				#sv_e = func_dateDiffB(CUST.DATA.headerDate,CUST.DATA.BODDate,"D",BYREF CUST.DATA.diffDays)
				#PRINT(CUST.DATA.diffDays)
				
				#IF(CUST.DATA.diffDays != "0")THEN
				#{
				#	sv_t = urtn_fileClose(CUST.DATA.fileindex)
				#	PRINT(sv_t)
				#	CUST.DATA.errorMsg = "Please Upload CIF File of today's date: " +  CUST.DATA.BODDate
				#	CUST.DATA.successOrFailure = "F"
				#	sub_genFailureLst1()
				#	GOTO END
				#}
				#ENDIF
				
			#}
			#ENDIF
			
		#}
		ENDIF
	#}
	ENDIF
	
	sv_t = urtn_fileClose(CUST.DATA.fileindex)
	PRINT(sv_t)
	
	#############################################################################################
	#### TO CONVERT BANK'S FILE FROM FIXED  LENGTH TO DELIMIETER
	#############################################################################################
	
	PRINT(CUST.DATA.inpFileNameWithPath)
	sv_r = urhk_getEnv("PWD")
	sv_n = BANCS.OUTPARAM.envValue
	PRINT(sv_n)
	
	CUST.DATA.path=sv_n
	CUST.DATA.tempPath = CUST.DATA.path + "/FILE_DIR"
	PRINT(CUST.DATA.tempPath)
	sv_a = SYSTEM("mkdir "+CUST.DATA.tempPath)
	PRINT(sv_a)
	sv_f = SYSTEM("chmod 777 "+CUST.DATA.tempPath)
	PRINT(sv_f)
	sv_f = SYSTEM("rm  -f "+CUST.DATA.tempPath+"/*" )
	PRINT(sv_f)
	#This part will remove the first AND last lines from current file, so that it can be passed directly to the FUNCTION.
	sv_a = " sed '1d;$d' "+CUST.DATA.inpFileNameWithPath+ ">"+CUST.DATA.tempPath+"/temp2.txt"
	PRINT(sv_a)
	sv_b= SYSTEM(sv_a)
	PRINT(sv_b)

	sv_a = " sed -e 's/,/ /g' " + CUST.DATA.tempPath + "/temp2.txt" + ">" + CUST.DATA.tempPath + "/temp1.txt"
	print(sv_a)
	sv_b = SYSTEM(sv_a)
	PRINT(sv_b)
	
	CUST.DATA.inpFileNameWithPath = CUST.DATA.tempPath+"/temp1.txt"
	PRINT(CUST.DATA.inpFileNameWithPath)
	
	CUST.DATA.outputFileName=CUST.DATA.tempPath+"/NEWUPLOADFILE.txt"
	PRINT(CUST.DATA.outputFileName)
	
	sv_m = "rm -f " + CUST.DATA.outputFileName
	PRINT(sv_m)
	sv_b= SYSTEM(sv_m)
	PRINT(sv_b)
	
	CUST.DATA.delimiterPosition 				 = "1,1,19,40,40,40,20,40,3,1,1,"
	CUST.DATA.delimiterPosition 				 = CUST.DATA.delimiterPosition + "1,8,20,20,20,2,30,"
	CUST.DATA.delimiterPosition 				 = CUST.DATA.delimiterPosition + "2,50,8,15,3,8,15,"
	
	CUST.DATA.delimiterPosition 				 = CUST.DATA.delimiterPosition + "1,200,40,20,3,5,"
	CUST.DATA.delimiterPosition 				 = CUST.DATA.delimiterPosition + "1,200,40,20,3,5,"
	CUST.DATA.delimiterPosition 				 = CUST.DATA.delimiterPosition + "1,200,40,20,3,5,"
	CUST.DATA.delimiterPosition 				 = CUST.DATA.delimiterPosition + "1,200,40,20,3,5,"
	CUST.DATA.delimiterPosition 				 = CUST.DATA.delimiterPosition + "1,200,40,20,3,5,"
	
	CUST.DATA.delimiterPosition 				 = CUST.DATA.delimiterPosition + "1,1,1,1,20,20,"
	CUST.DATA.delimiterPosition 				 = CUST.DATA.delimiterPosition + "40,40,40,1,8,1,"
	CUST.DATA.delimiterPosition 				 = CUST.DATA.delimiterPosition + "3,1,20,1,20,19,"
	CUST.DATA.delimiterPosition 				 = CUST.DATA.delimiterPosition + "2,8,3,3,3,20"
	PRINT(CUST.DATA.delimiterPosition)
	
	
	CUST.DATA.outputFileDelimiter= "|"
	CUST.DATA.trimSpaceFlg = "Y"
	sv_c = func_convFixLengthFileToDelimited("CUST","DATA")
	PRINT(sv_c)
	
	IF(sv_c != 0)THEN
	#{
		CUST.DATA.errorMsg = "Conversion of Fixed Length to Delimeter Failed"
		CUST.DATA.successOrFailure = "F"
		sub_genFailureLst1()
		GOTO END
	#}
	ENDIF
	
	#############################################################################################
	# DELETING RECORDS FROM CUSTOM TABLE BEFORE INSERTION
	#############################################################################################
	
	#	CUST.DATA.outputFields = "count"
	#	CUST.DATA.tableNameDel = "CUSTOM.LHCIF_UPLOAD"
	#	CUST.DATA.keyFieldsDel = ""
	#	CUST.DATA.keyValuesDel = ""
	#
	#	sv_a = func_selectFromCustTableB(CUST.DATA.outputFields,"count(*)",CUST.DATA.tableNameDel,CUST.DATA.keyFieldsDel, CUST.DATA.keyValuesDel)
	#	PRINT(sv_w)
	#
	#	IF(sv_w == 0)THEN
	#	#{
	#		sub_copyOutparamFieldB("count","CUST","DATA","count","0")
	#		PRINT(CUST.DATA.count)
	#		IF(CINT(CUST.DATA.count) > 0)THEN
	#		#{
	#			sv_d = func_deleteFromCustTableB(CUST.DATA.tableNameDel, CUST.DATA.keyFieldsDel, CUST.DATA.keyValuesDel)
	#			PRINT(sv_d)
	#
	#			IF(sv_d !=0)THEN
	#			#{
	#				CUST.DATA.errorMsg = "Deletion of existing records failed(DB Error)!"
	#				CUST.DATA.successOrFailure = "F"
	#				sub_genFailureLst1()
	#				GOTO END
	#			#}
	#			ENDIF
	#		#}
	#		ENDIF
	#
	#		#}
	#	ELSE
	#		#{
	#		CUST.DATA.errorMsg = "DB Error For Custom Table"
	#		CUST.DATA.successOrFailure = "F"
	#		sub_genFailureLst1()
	#		GOTO END
	#	#}
	#	ENDIF
	#
	
	lv_h = "count|SELECT COUNT(*) FROM CUSTOM.LHCIF_UPLOAD"
	PRINT(lv_h)
	
	BANCS.INPARAM.BINDVARS = ""
	
	sv_d=urhk_dbSelectWithBind(lv_h)
	sub_copyOutparamFieldB("count","CUST","DATA","count","0")
	PRINT(CUST.DATA.count)
	
	IF(CINT(CUST.DATA.count) > 0)THEN
	#{
		
		sv_s = "DELETE FROM CUSTOM.LHCIF_UPLOAD"
		PRINT(sv_s)
		sv_d = urhk_dbSQLWithBind(sv_s)
		PRINT(sv_d)
		
		IF(sv_d !=0)THEN
		#{
			CUST.DATA.errorMsg = "Deletion of existing records failed(DB Error)!"
			CUST.DATA.successOrFailure = "F"
			sub_genFailureLst1()
			GOTO END
		#}
		ENDIF
		
		
	#}
	ENDIF
	
	
	sv_x = urhk_dbSqlWithBind("COMMIT")
	PRINT(sv_x)
	#############################################################################################
	#### TO INSERT THE DATA IN DELIMETERFILE.TXT TO A CUSTOM TABLE
	#############################################################################################
	PRINT(CUST.DATA.outputFileName)
	CUST.DATA.inputFileNameWithPath = CUST.DATA.outputFileName
	PRINT(CUST.DATA.inputFileNameWithPath)
	
	sv_k = "chmod 755 "  + CUST.DATA.inputFileNameWithPath
	PRINT(sv_k)
	sv_f = SYSTEM(sv_k)
	PRINT(sv_f)
	
	CUST.DATA.inputFileName 		= "NEWUPLOADFILE.txt"
	CUST.DATA.noOfColumns			 = "79"
	CUST.DATA.tableName				 = "CUSTOM.LHCIF_UPLOAD"
	
	CUST.DATA.insertColumns				 = "1|RECORD_TYPE, 2|UPDATE_FLG, 3|CUST_NUM, 4|ENG_TITLE, 5|ENG_FIRST_NAME, 6|ENG_LAST_NAME, 7|SHORT_NAME, 8|CORP_NAME, 9|PRIMARYRM, 10|FORCE_LOAN, 11|SECTOR,"
	CUST.DATA.insertColumns           = CUST.DATA.insertColumns + "12|SUB_SECTOR, 13|BUSSINESS_CODE, 14|HOME_PHONE, 15|OFFICE_PHONE, 16|OTHER_PHONE, 17|TEL_CNTRY_CODE, 18|ELECTRONIC_ADDR,"
	CUST.DATA.insertColumns           = CUST.DATA.insertColumns + "19|IDTYPE_CODE, 20|ID_DESC, 21|^ISSUE_DATE, 22|ID_NUM, 23|ISSUE_CNTRY, 24|^EXP_DATE, 25|TAX_ID,"
	
	CUST.DATA.insertColumns           = CUST.DATA.insertColumns + "26|ADDR_TYPE1, 27|ADDRESS1, 28|CITYSTATEZIP1, 29|STATE1, 30|COUNTRY1, 31|ZIPCODE1,"
	CUST.DATA.insertColumns           = CUST.DATA.insertColumns + "32|ADDR_TYPE2, 33|ADDRESS2, 34|CITYSTATEZIP2, 35|STATE2, 36|COUNTRY2, 37|ZIPCODE2,"
	CUST.DATA.insertColumns           = CUST.DATA.insertColumns + "38|ADDR_TYPE3, 39|ADDRESS3, 40|CITYSTATEZIP3, 41|STATE3, 42|COUNTRY3, 43|ZIPCODE3,"
	CUST.DATA.insertColumns           = CUST.DATA.insertColumns + "44|ADDR_TYPE4, 45|ADDRESS4, 46|CITYSTATEZIP4, 47|STATE4, 48|COUNTRY4, 49|ZIPCODE4,"
	CUST.DATA.insertColumns           = CUST.DATA.insertColumns + "50|ADDR_TYPE5, 51|ADDRESS5, 52|CITYSTATEZIP5, 53|STATE5, 54|COUNTRY5, 55|ZIPCODE5,"
	#
	CUST.DATA.insertColumns           = CUST.DATA.insertColumns + "56|TF_FLG, 57|TS_FLG, 58|CUST_TYPE, 59|CLASS_CODE, 60|CLASS_CODE_DESC, 61|TITLE, "
	CUST.DATA.insertColumns           = CUST.DATA.insertColumns + "62|FIRST_NAME, 63|LAST_NAME, 64|ALIAS_NAME, 65|GENDER, 66|^BIRTH_DATE, 67|NON_RESIDENT_FLG,"
	CUST.DATA.insertColumns           = CUST.DATA.insertColumns + "68|NATIONALITY, 69|MARITAL_STATUS, 70|MARITAL_STATUS_DESC, 71|HOLD_MAIL_FLG, 72|OTHER_NAME, 73|RLNSHIP_CIF,"
	CUST.DATA.insertColumns           = CUST.DATA.insertColumns + "74|RLNSHIP_TYPE, 75|^INCORP_DATE, 76|INCORP_CNTRY, 77|ULTIMATE_RISK, 78|CUST_RATING, 79|CUST_RATING_DESC"
	PRINT(CUST.DATA.insertColumns)
	
	CUST.DATA.columnSize 				 = "1,1,19,40,40,40,20,40,3,1,1,"
	CUST.DATA.columnSize 				 = CUST.DATA.columnSize + "1,8,20,20,20,2,30,"
	CUST.DATA.columnSize 				 = CUST.DATA.columnSize + "2,50,8,15,3,8,15,"
	
	CUST.DATA.columnSize 				 = CUST.DATA.columnSize + "1,200,40,20,3,5,"
	CUST.DATA.columnSize 				 = CUST.DATA.columnSize + "1,200,40,20,3,5,"
	CUST.DATA.columnSize 				 = CUST.DATA.columnSize + "1,200,40,20,3,5,"
	CUST.DATA.columnSize 				 = CUST.DATA.columnSize + "1,200,40,20,3,5,"
	CUST.DATA.columnSize 				 = CUST.DATA.columnSize + "1,200,40,20,3,5,"
	
	CUST.DATA.columnSize 				 = CUST.DATA.columnSize + "1,1,1,1,20,20,"
	CUST.DATA.columnSize 				 = CUST.DATA.columnSize + "40,40,40,1,8,1,"
	CUST.DATA.columnSize 				 = CUST.DATA.columnSize + "3,1,20,1,20,19,"
	CUST.DATA.columnSize 				 = CUST.DATA.columnSize + "2,8,3,3,3,20"
	PRINT(CUST.DATA.columnSize)
	
	CUST.DATA.primKeyColumns 			 = "2,3"
	CUST.DATA.dateColumnWithFormat 		 = "21|DDMMYYYY, 24|DDMMYYYY, 66|DDMMYYYY, 75|DDMMYYYY "
	CUST.DATA.numberColumn 			 		= ""
	CUST.DATA.uploadBatchId 			 = "D34578"
	CUST.DATA.delimiter 			 	= "|"
	CUST.DATA.additionalParam 			 = ""
	BANCS.INPARAM.useInsertSql 			 = "Y"
	
	lv_a = func_readAndinsertFileDataLH(CUST.DATA.inputFileNameWithPath, CUST.DATA.inputFileName ,CUST.DATA.noOfColumns, CUST.DATA.tableName,CUST.DATA.insertColumns,CUST.DATA.columnSize,CUST.DATA.primKeyColumns, CUST.DATA.dateColumnWithFormat, CUST.DATA.numberColumn, CUST.DATA.uploadBatchId, CUST.DATA.delimiter, CUST.DATA.additionalParam)
	PRINT(lv_a)
	
	IF(lv_a !=0)THEN
	#{
		CUST.DATA.errorMsg = "Insertion of Delimeter File To Custom table failed!"
		CUST.DATA.successOrFailure = "F"
		sub_genFailureLst1()
		GOTO END
	#}
	ENDIF
	
	#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	#### UPDATE PROCESSED_FLG='N' FOR ALL RECORDS ###
	#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	
	IF(lv_a == 0) THEN
	#{
		#sv_x = urhk_dbSqlWithBind("COMMIT")
		#PRINT(sv_x)
		
		sv_s = "UPDATE CUSTOM.LHCIF_UPLOAD SET PROCESSED_FLG = 'N' WHERE PROCESSED_FLG IS NULL"
		PRINT(sv_s)
		sv_d = urhk_dbSQLWithBind(sv_s)
		PRINT(sv_d)
		
		IF(sv_d == 0)THEN
		#{
			CUST.DATA.insertSuccess = "Y"
			GOTO SUCC
		#}
		ENDIF
		
	#}
	ENDIF
	
	##**********************************************************************
	#		IF ANY ISSUES DUMP TO FAILURE REPORT AND EXIT
	##**********************************************************************
	
	END:
		
		PRINT(CUST.DATA.failureLst)
		CUST.DATA.jasperFileNameForFailure = "GenericRpt_3Fields.jasper"
		sv_u = "LHCIFBatchReadingFailureRpt"
		PRINT(sv_u)
		
		#sv_n= "chmod 777 " + CUST.DATA.reportLst + " " + CUST.DATA.rptName + ".PDF"
		sv_n= "chmod 777 " + CUST.DATA.failureLst + " " + sv_u + ".PDF"
		PRINT(sv_n)
		sv_m= SYSTEM(sv_n)
		PRINT(sv_m)
		
		#sub_genReportAndPushToHPRB(CUST.DATA.jasperFileName,CUST.DATA.reportLst,CUST.DATA.rptName,CUST.DATA.reportTitle,"PDF")
		sub_genReportAndPushToHPRB(CUST.DATA.jasperFileNameForFailure,CUST.DATA.failureLst,sv_u,sv_u,"PDF")
		PRINT("AFTER REPORT")
		
		#END:
		
		
	SUCC:
		PRINT("END OF CIF RECORD READING SCR")
END-->
