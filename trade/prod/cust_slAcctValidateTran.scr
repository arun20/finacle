#########################################################################################################################
# Name of the file      : cust_slAcctValidateTran.scr
# Start Date            : 13-Jun-2018
# Description           : This script will validate number or credit and debit legs with SL account details.
# Design Id             : HTM
# Menu Option           : HTM,HXFER
# Input parameters      : NA
# Output parameters     : NA
# Author                : Amandeep Kaur
# Called Script         : NA
# Calling Script        : SRV_AddAndPostXferTran_validate_data.scr, SRV_AddXferTranForPTranPost_validate_data.scr,
#						: SRV_AddXferTran_validate_data.scr, SRV_ModifyXferTranForPTranPost_validate_data.scr,
#						: SRV_ModifyXferTran_validate_data.scr, UserDefinedXcpns.scr
# Bank                  : LH Bank
# Modification History:
# <Serial No.>         <Date>         <Author Name>              <Description>
#      0.1            13-Jun-2018     Amandeep Kaur               Initial Draft
##############################################################################################################################
IMPORT LibCommonB001
IMPORT LibCommonB002
IMPORT LibAuditB001

<--START
	TRACE ON
	libname CUSTOMSO

	#----------------------------------------------
	#Create repository and class
	#----------------------------------------------
	sub_createRepClassB("HTM", "DATA")

	#--------------------------------------------
	#Initialize variables
	#--------------------------------------------
	HTM.DATA.bankId			= BANCS.STDIN.contextBankId
	HTM.DATA.funcCode		= ""
	HTM.DATA.delFlg			= "N"
	HTM.DATA.entityCreFlg	= "N"
	HTM.DATA.postFlg		= "N"
	HTM.DATA.userId			= BANCS.STDIN.userId
	HTM.DATA.purCode 		= ""
	HTM.DATA.acid 			= ""
	HTM.DATA.foracid 		= ""
	HTM.DATA.tranId 		= ""
	HTM.DATA.partTranSrlNum = ""
	HTM.DATA.tranDate 		= ""
	HTM.DATA.partTranType 	= ""
	HTM.DATA.noOfRecords	= ""
	HTM.DATA.purCodeOld		= ""
	HTM.DATA.tablename		= "C_DTD_P_EXT"
	HTM.DATA.BODDate		= MID$(BANCS.STDIN.BODDate,0,10)

	#---------------------------------------------
	#Fetch the custom data from frontend
	#---------------------------------------------
	IF (FIELDEXISTS(ONS.CUSTOM.custDataIn) == 0) THEN
	#{
		GOTO ENDOFSCRIPT
	#}
	ENDIF

	ONS.CUSTOM.custDataIn = TRIM(ONS.CUSTOM.custDataIn)

	IF (ONS.CUSTOM.custDataIn == "") THEN
	#{
		GOTO ENDOFSCRIPT
	#}
	ENDIF
	PRINT(ONS.CUSTOM.custDataIn)
	sv_a = ONS.CUSTOM.custDataIn
	sv_u = urhk_ParseONSCustData(sv_a)
	PRINT(sv_u)
	HTM.DATA.pageName = "tmdet"
	HTM.DATA.debitTran = 0
	HTM.DATA.creditTran = 0
	sv_v = 0
	sv_w = 0
	IF(sv_u == 0)THEN
	#{

		#-------------------------------------------------------------------------------------------------
		#  FIELD DESCRIPTION
		#-------------------------------------------------------------------------------------------------
		#     FIELD_2 - No.of multirecs
		#     FIELD_4 - custom field, Purpose Code
		#-------------------------------------------------------------------------------------------------

		IF(FIELDEXISTS(("BANCS").("INPUT").(HTM.DATA.pageName+"_FIELD_2"))) THEN
		#{
			HTM.DATA.noOfRecords = ("BANCS").("INPUT").(HTM.DATA.pageName+"_FIELD_2")
			PRINT(HTM.DATA.noOfRecords)
		#}
		ELSE
		#{
			GOTO ENDOFSCRIPT
		#}
		ENDIF
		sv_c = HTM.DATA.noOfRecords
		IF (sv_c > 0) THEN
		#{
			sv_d = 0
			sv_n = 0
			#--------------------------------------------------------------------------------------------------
			#  Getting multirec inputs
			#--------------------------------------------------------------------------------------------------
			WHILE (sv_n < sv_c)
			#{
				sv_z = sv_n
				sv_g = FORMAT$(sv_z,"%d")

				##################################
				sv_d = sv_d + 7
				sv_f = FORMAT$(sv_d,"%d")
				PRINT(sv_f)
				IF (("BANCS").("INPUT").(HTM.DATA.pageName+"_FIELD_"+sv_f) == "NULL") THEN
				#{
					("BANCS").("INPUT").(HTM.DATA.pageName+"_FIELD_"+sv_f) = ""
				#}
				ENDIF
				("HTM").("DATA").("slAcctId_"+sv_g) = ("BANCS").("INPUT").(HTM.DATA.pageName+"_FIELD_"+sv_f)
				PRINT("SL Account is ["+("HTM").("DATA").("slAcctId_"+sv_g)+"]")

				#--------------------------------------------------------
				# Fetching the product fields from SRV
				#--------------------------------------------------------

				sv_u = urhk_SRV_GetVal("tranDtl.partTranDetailLL.<rec_"+sv_g+">.partTranType.code")
				IF(sv_u == 0) THEN
				#{
					("BANCS").("OUTPUT").("partTranType_"+sv_g) = BANCS.OUTPARAM.srvValue
					PRINT(("BANCS").("OUTPUT").("partTranType_"+sv_g))
				#}
				ENDIF

				sv_u = urhk_SRV_GetVal("tranDtl.partTranDetailLL.<rec_"+sv_g+">.delFlg")
				IF(sv_u == 0) THEN
				#{
					("BANCS").("OUTPUT").("delFlg_"+sv_g) = BANCS.OUTPARAM.srvValue
					PRINT(("BANCS").("OUTPUT").("delFlg_"+sv_g))
				#}
				ENDIF

				IF ((("HTM").("DATA").("slAcctId_"+sv_g) != "") AND (("BANCS").("OUTPUT").("delFlg_"+sv_g) != "Y")) THEN
				#{
					IF (("BANCS").("OUTPUT").("partTranType_"+sv_g) == "D") THEN
					#{
						HTM.DATA.debitTran = CINT(HTM.DATA.debitTran) + 1
						sv_v = CINT(HTM.DATA.debitTran)
						("HTM").("DATA").("slAcctIdDr_"+FORMAT$(sv_v,"%d")) = ("HTM").("DATA").("slAcctId_"+sv_g)
					#}
					ELSE
					#{
						HTM.DATA.creditTran =  CINT(HTM.DATA.creditTran) + 1
						sv_w = CINT(HTM.DATA.creditTran)
						("HTM").("DATA").("slAcctIdCr_"+FORMAT$(sv_w,"%d")) = ("HTM").("DATA").("slAcctId_"+sv_g)
					#}
					ENDIF
				#}
				ENDIF

				sv_n = sv_n + 1
				PRINT(sv_n)
				IF(sv_n == HTM.DATA.noOfRecords) THEN
				#{
					GOTO TRANEND
				#}
				ENDIF
			#}
			DO
		#}
		ENDIF

	TRANEND:
			HTM.DATA.totSLAcntTran = CINT(HTM.DATA.debitTran) + CINT(HTM.DATA.creditTran)
			PRINT(HTM.DATA.totSLAcntTran)
			IF ((CINT(HTM.DATA.debitTran) > 5 ) or (CINT(HTM.DATA.creditTran) > 5 ))  THEN
					HTM.DATA.ErrorDesc = "Total SL Credits/Debits crossed 5"
					sv_u = urhk_SRV_SetErr(HTM.DATA.ErrorDesc)
					sv_u = urhk_setOrbOut("SuccessOrFailure|N")
					BANCS.OUTPUT.successOrFailure = "F"
					PRINT("Total SL Credits/Debits crossed 5")
					GOTO ENDOFSCRIPT
			ELSE
				IF (HTM.DATA.totSLAcntTran == HTM.DATA.noOfRecords) THEN
					HTM.DATA.ErrorDesc = "SL A/c Id cannot be entered for all the Part Trans"
					sv_u = urhk_SRV_SetErr(HTM.DATA.ErrorDesc)
					sv_u = urhk_setOrbOut("SuccessOrFailure|N")
                                        BANCS.OUTPUT.successOrFailure = "F"
					PRINT("Debit and Credit cannot be to SL Account")
					GOTO ENDOFSCRIPT
				ENDIF
			ENDIF
	#}
	ENDIF
	ENDOFSCRIPT:
	###################################################################################################
	#	START-	DELETE CLASS AND REPOSITORY
	###################################################################################################
	sub_deleteRepClassB("HTM", "DATA")
	EXITSCRIPT
END-->
