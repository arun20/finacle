#######################################################################################################################################################
#    Name                : intp4ribFCAcctListInqmn01.scr
#    Date                : 20-Jun-2018
#    Description         : Extract the list of FCD accounts of a given customer
#    Input               : CIF Id
#    Output              : List of FCD Accounts
#    Author              : Divya
#    Called Script       : None
#    Calling Script      : None
#    Reference           : None
#    Modification History: v1.0
#    version    Date            Author          Description
#        1.0        20-06-2018  Divya K         Base Version
#######################################################################################################################################################
IMPORT LibCommonB002
<--START
TRACE ON

        #====================================
        # CREATING CUST REPOS AND DATA CLASS
        #====================================

	IF (REPEXISTS("CUST") == 0) THEN
	#{
		CREATEREP("CUST")
	#}
	ENDIF

	IF (CLASSEXISTS("CUST", "DATA") == 0) THEN
	#{
		CREATECLASS("CUST", "DATA", 5)
	#}
	ENDIF

        #===============================
        # Reading input variables
        #===============================
	sv_e = 0

	IF (FIELDEXISTS(("BANCS").("INPUT").("FCAcctListInq_Req.cifId")) == 0) THEN
	#{
		sv_e = 1
		CUST.DATA.ERRORCODE = "INTF001"
		CUST.DATA.SuccessOrFailure = "F"
		CUST.DATA.ERRORMSG= "Cif Id not populated"
		print(CUST.DATA.ERRORMSG)
		GOTO ENDOFSCRIPT
	#}
	ELSE
	#{
		CUST.DATA.cifId =  TRIM(("BANCS").("INPUT").("FCAcctListInq_Req.cifId"))
		print(CUST.DATA.cifId)
	#}
	ENDIF

	IF(FIELDEXISTS(("BANCS").("INPUT").("FCAcctListInq_Req.numRec")) == 0)THEN
	#{
		CUST.DATA.numRec = 10
	#}
	ELSE
	#{
		CUST.DATA.numRec = TRIM(("BANCS").("INPUT").("FCAcctListInq_Req.numRec"))
		print(CUST.DATA.numRec)
	#}
	ENDIF

	IF(FIELDEXISTS(("BANCS").("INPUT").("FCAcctListInq_Req.lstAcctNum")) == 0)THEN
	#{
		CUST.DATA.lstAcctNum = ""
	#}
	ELSE
	#{
		CUST.DATA.lstAcctNum = TRIM(("BANCS").("INPUT").("FCAcctListInq_Req.lstAcctNum"))
		print(CUST.DATA.lstAcctNum)
	#}
	ENDIF

        #===============================
        # Defining Output Variables
        #===============================

	CUST.DATA.cifNo                 =       ""
	CUST.DATA.acctType              =       ""
	CUST.DATA.acctNumber            =       ""
	CUST.DATA.acctName              =       ""
	CUST.DATA.acctStatus            =       ""
	CUST.DATA.closedFlag            =       ""
	CUST.DATA.availBalance          =       ""
	CUST.DATA.currentBalance        =       ""
	CUST.DATA.acctCrncy             =       ""
	CUST.DATA.fcdAcctCnt            =       "0"
	CUST.DATA.hasMoreFlag           =       "Y"
	CUST.DATA.tdAvailBalance	=	"0"
	sv_r                            =       0

        #===========================================
        # Validating CIF Id
        #===========================================
        sv_s = "recCount|"
        sv_s = sv_s + "SELECT count(*)"
        sv_s = sv_s + " FROM TBAADM.CMG WHERE "
        sv_s = sv_s + " CIF_ID = ?SVAR AND "
        sv_s = sv_s + " BANK_ID = ?SVAR"

        BANCS.INPARAM.BINDVARS = CUST.DATA.cifId + "|" + BANCS.STDIN.contextBankId

        print(sv_s)
        print(BANCS.INPARAM.BINDVARS)
        sv_h = urhk_dbSelectWithBind(sv_s)
        print(sv_h)

        IF(sv_h == 0)THEN
        #{
		CUST.DATA.cifCount = BANCS.OUTPARAM.recCount
		sv_m = CINT(CUST.DATA.cifCount)
		IF(sv_m == 0)THEN
		#{
			sv_e = 1
			CUST.DATA.ERRORCODE = "INTF005"
			CUST.DATA.SuccessOrFailure = "F"
			CUST.DATA.ERRORMSG= "Invalid CIF Id"
			print(CUST.DATA.ERRORMSG)
			GOTO ENDOFSCRIPT
		#}
		ELSE
		#{
			print("Valid CIF")
		#}
		ENDIF
        #}
        ELSE
        #{
		sv_e = 1
		CUST.DATA.ERRORCODE = "INTF002"
		CUST.DATA.SuccessOrFailure = "F"
		CUST.DATA.ERRORMSG= "Internal Finacle Error.Select Query Failed"
		print(CUST.DATA.ERRORMSG)
		GOTO ENDOFSCRIPT
        #}
        ENDIF

        #============================================
        # Total number of accounts for the given cif
        #============================================
		
	sv_s = "recCount|"
	sv_s = sv_s + "SELECT count(*) FROM ("
	sv_s = sv_s + " SELECT * FROM("
	sv_s = sv_s + " SELECT cif_id as cifid,schm_type as schmtype,foracid as foracid,acct_name as acctname,"
	sv_s = sv_s + " acct_cls_flg as acctclsflg,clr_bal_amt as clrbalamt,acct_crncy_code as acctcrncycd,acid as acid"
	sv_s = sv_s + " FROM TBAADM.GAM WHERE "
	sv_s = sv_s + " SCHM_TYPE IN ('SBA','CAA') AND CIF_ID = ?SVAR AND BANK_ID = ?SVAR "
	sv_s = sv_s + " UNION"
	sv_s = sv_s + " SELECT cif_id as cifid,'TDA' as schmtype,master_acct_num as foracid,acct_name as acctname,"
	sv_s = sv_s + " acct_cls_flg as acctclsflg,0.00 as clrbalamt,consol_crncy_code as acctcrncycd,master_b2k_id as acid"
	sv_s = sv_s + " FROM TBAADM.MAM WHERE "
	sv_s = sv_s + " CIF_ID = ?SVAR AND BANK_ID = ?SVAR)"
	sv_s = sv_s + " )"

	BANCS.INPARAM.BINDVARS = CUST.DATA.cifId + "|" + BANCS.STDIN.contextBankId + "|" + CUST.DATA.cifId + "|" + BANCS.STDIN.contextBankId

	IF(TRIM(CUST.DATA.lstAcctNum) != "")THEN
	#{
		sv_s = sv_s + " WHERE foracid > ?SVAR"

		BANCS.INPARAM.BINDVARS = BANCS.INPARAM.BINDVARS + "|" + CUST.DATA.lstAcctNum
	#}
	ENDIF
	sv_s = sv_s + " ORDER BY foracid"

        print(sv_s)
        print(BANCS.INPARAM.BINDVARS)
        sv_h = urhk_dbSelectWithBind(sv_s)
        print(sv_h)
        IF(sv_h == 0)THEN
        #{
		CUST.DATA.recCount = BANCS.OUTPARAM.recCount
		print(CUST.DATA.recCount)
		CUST.DATA.totRecCount = CUST.DATA.recCount
		IF(CUST.DATA.recCount == 0)THEN
		#{
			sv_e = 1
			CUST.DATA.ERRORCODE = "INTF002"
			CUST.DATA.SuccessOrFailure = "F"
			CUST.DATA.ERRORMSG= "No Accounts available for the given CIF"
			print(CUST.DATA.ERRORMSG)
			GOTO ENDOFSCRIPT
		#}
		ELSE
		#{
			sv_q = CINT(CUST.DATA.recCount)
			print(sv_q)
		#}
		ENDIF
        #}
        ELSE
        #{
			sv_e = 1
			CUST.DATA.ERRORCODE = "INTF002"
			CUST.DATA.SuccessOrFailure = "F"
			CUST.DATA.ERRORMSG= "Internal Finacle Error.Select Query Failed"
			print(CUST.DATA.ERRORMSG)
			GOTO ENDOFSCRIPT
        #}
        ENDIF
		
        #If numRec is sent in request XML. Send only those many no.of records in response.
        IF(TRIM(CUST.DATA.numRec) != "")THEN
        #{
		CUST.DATA.recCount = CUST.DATA.numRec
        #}
        ENDIF
		
	IF(CINT(CUST.DATA.numRec) >= CINT(CUST.DATA.totRecCount))THEN
	#{
		CUST.DATA.hasMoreFlag = "N"
		#Looping will be equal to total num of records i.e. CUST.DATA.recCount
	#}
	ELSE
	#{
		CUST.DATA.hasMoreFlag = "Y"
		CUST.DATA.recCount = CUST.DATA.numRec
		#If requested number is less than available, loop only requested number of times
		#Variable used to check loop count is CUST.DATA.recCount
	#}
	ENDIF
		
	#=====================================
        # Fetching the list of accounts
        #=====================================
		
	sv_s = "cifNo,acctType,acctNumber,acctName,closedFlag,currentBalance,acctCrncy,acid|"
	sv_s = sv_s + "SELECT * FROM("
	sv_s = sv_s + " SELECT cif_id as cifid,schm_type as schmtype,foracid as foracid,acct_name as acctname,"
	sv_s = sv_s + " acct_cls_flg as acctclsflg,clr_bal_amt as clrbalamt,acct_crncy_code as acctcrncycd,acid as acid"
        sv_s = sv_s + " FROM TBAADM.GAM WHERE "
        sv_s = sv_s + " SCHM_TYPE IN ('SBA','CAA') AND CIF_ID = ?SVAR AND BANK_ID = ?SVAR "
        sv_s = sv_s + " UNION"
	sv_s = sv_s + " SELECT cif_id as cifid,'TDA' as schmtype,master_acct_num as foracid,acct_name as acctname,"
	sv_s = sv_s + " acct_cls_flg as acctclsflg,0.00 as clrbalamt,consol_crncy_code as acctcrncycd,master_b2k_id as acid"
        sv_s = sv_s + " FROM TBAADM.MAM WHERE "
        sv_s = sv_s + " CIF_ID = ?SVAR AND BANK_ID = ?SVAR"
	sv_s = sv_s + " )"

        BANCS.INPARAM.BINDVARS = CUST.DATA.cifId + "|" + BANCS.STDIN.contextBankId + "|" + CUST.DATA.cifId + "|" + BANCS.STDIN.contextBankId

        IF(TRIM(CUST.DATA.lstAcctNum) != "")THEN
        #{
		sv_s = sv_s + " WHERE foracid > ?SVAR"
		
		BANCS.INPARAM.BINDVARS =  BANCS.INPARAM.BINDVARS + "|" + CUST.DATA.lstAcctNum
        #}
        ENDIF

        sv_s = sv_s + " ORDER BY foracid"	

        print(sv_s)
        print(BANCS.INPARAM.BINDVARS)

        sv_i = urhk_dbCursorOpenWithBind(sv_s)
        print(sv_i)

        IF(sv_i == 0) THEN
        #{
		sv_j = BANCS.OUTPARAM.DB_CURSOR_NUMBER
		sv_n = urhk_dbCursorFetch(sv_j)

		print(sv_n)
		IF (sv_n !=0) THEN
		#{
			sv_e = 1
			CUST.DATA.ERRORCODE = "INTF002"
			CUST.DATA.SuccessOrFailure = "F"
			CUST.DATA.ERRORMSG= "Internal Finacle Error.Cursor Fetch failed"
			print(CUST.DATA.ERRORMSG)
			sv_n = urhk_dbCursorClose(sv_j)	
			GOTO ENDOFSCRIPT
		#}
		ENDIF

		IF(CUST.DATA.numRec != "")THEN
		#{
			CUST.DATA.recCount =CUST.DATA.numRec
			print(CUST.DATA.recCount)
		#}
		ENDIF

		# Initializing number to zero. Will be used as seq for populating multirec output.
		CUST.DATA.number = "0"
		sv_b = 0

		WHILE(sv_n == 0)
		#{
			CUST.DATA.cifNo                 = TRIM(BANCS.OUTPARAM.cifNo)
			CUST.DATA.acctType              = TRIM(BANCS.OUTPARAM.acctType)
			CUST.DATA.acctNumber            = TRIM(BANCS.OUTPARAM.acctNumber)
			CUST.DATA.acctName              = TRIM(BANCS.OUTPARAM.acctName)
			CUST.DATA.closedFlag            = TRIM(BANCS.OUTPARAM.closedFlag)
			CUST.DATA.currentBalance        = TRIM(BANCS.OUTPARAM.currentBalance)
			CUST.DATA.acctCrncy             = TRIM(BANCS.OUTPARAM.acctCrncy)
			CUST.DATA.acid                  = TRIM(BANCS.OUTPARAM.acid)
				
			print(CUST.DATA.cifNo)
			print(CUST.DATA.acctType)
			print(CUST.DATA.acctNumber)
			print(CUST.DATA.acctName)
			print(CUST.DATA.closedFlag)
			print(CUST.DATA.currentBalance)
			print(CUST.DATA.acctCrncy)

			# Deriving Account Status

			sv_q = "acctStatus | select ACCT_STATUS "
			IF ((CUST.DATA.acctType == "SBA") OR (CUST.DATA.acctType == "CAA")) THEN
			#{
				sv_q = sv_q + "from SMT "
				sv_q = sv_q + " where acid = ?SVAR and bank_id = ?SVAR"
					
				BANCS.INPARAM.BINDVARS = CUST.DATA.acid + "|" + BANCS.STDIN.contextBankId
				print(sv_q)
				print(BANCS.INPARAM.BINDVARS)

				sv_d = urhk_dbSelectWithBind(sv_q)
				print(sv_d)

				IF(sv_d == 0)THEN
				#{
					CUST.DATA.acctStatus = BANCS.OUTPARAM.acctStatus
					print(CUST.DATA.acctStatus)
				#}
				ELSE
				#{
					sv_e = 1
					CUST.DATA.ERRORCODE = "INTF004"
					CUST.DATA.SuccessOrFailure = "F"
					CUST.DATA.ERRORMSG= "Unable to derive account status"
					print(CUST.DATA.ERRORMSG)
					GOTO ENDOFSCRIPT
				#}
				ENDIF
			#}
			ENDIF
					
			IF (CUST.DATA.acctType == "TDA") THEN
			#{
				IF(CUST.DATA.closedFlag == "Y")THEN
				#{
					CUST.DATA.acctStatus = "I"
				#}
				ELSE
				#{
					CUST.DATA.acctStatus = "A"
				#}
				ENDIF
			#}
			ENDIF

			#Deriving currentBalance for TDA account
			IF (CUST.DATA.acctType == "TDA") THEN
			#{
				sv_q = "currentBalance|select sum(CLR_BAL_AMT) "
				sv_q = sv_q + " from TBAADM.GAM"
				sv_q = sv_q + " where MASTER_B2K_ID = ?SVAR"
				sv_q = sv_q + " and BANK_ID = ?SVAR"
				
				BANCS.INPARAM.BINDVARS = CUST.DATA.acid + "|" + BANCS.STDIN.contextBankId
					
				print(sv_q)
				print(BANCS.INPARAM.BINDVARS)
					
				sv_d = urhk_dbSelectWithBind(sv_q)
				print(sv_d)
				IF(sv_d == 0)THEN
				#{
					CUST.DATA.currentBalance = BANCS.OUTPARAM.currentBalance
					print(CUST.DATA.currentBalance)
				#}
				ELSE
				#{
					sv_e = 1
					CUST.DATA.ERRORCODE = "INTF004"
					CUST.DATA.SuccessOrFailure = "F"
					CUST.DATA.ERRORMSG= "Unable to derive account status"
					print(CUST.DATA.ERRORMSG)
					GOTO ENDOFSCRIPT							
				#}
				ENDIF						
			#}
			ENDIF
					
			# Deriving Available Balance for SBA,CAA Account
			IF ((CUST.DATA.acctType == "SBA") OR (CUST.DATA.acctType == "CAA")) THEN
			#{
				print(CUST.DATA.availBalance)
				print(BANCS.STDIN.BODDate)

				BANCS.INPARAM.acctId = CUST.DATA.acctNumber
				BANCS.INPARAM.asOnDate = BANCS.STDIN.BODDate

				print(BANCS.INPARAM.acctId)
				print(BANCS.INPARAM.asOnDate)

				sv_a = urhk_getAcctBalanceAsOnDate("")

				print(sv_a)
				IF(sv_a == 1)THEN
				#{
					print("Invalid inputs")
					CUST.DATA.openingBal = "0.00"
				#}
				ELSE
				#{
					print(BANCS.OUTPARAM.acctBal)
					CUST.DATA.availBalance = BANCS.OUTPARAM.acctBal
					print(CUST.DATA.availBalance)
				#}
				ENDIF
			#}
			ENDIF
				
			# Deriving Available Balance for TDA Account
			IF (CUST.DATA.acctType == "TDA") THEN
			#{
				sv_s = "chAcctNum|SELECT foracid"
				sv_s = sv_s + " FROM tbaadm.GAM"
				sv_s = sv_s + " WHERE master_b2k_id = ?SVAR"
				sv_s = sv_s + " AND bank_id = ?SVAR"
					
				BANCS.INPARAM.BINDVARS = CUST.DATA.acid + "|" + BANCS.STDIN.contextBankId
				
				print(sv_s)
				print(BANCS.INPARAM.BINDVARS)
					
				sv_h = urhk_dbCursorOpenWithBind(sv_s)
				print(sv_h)
				IF(sv_h == 0)THEN
				#{
					sv_g = BANCS.OUTPARAM.DB_CURSOR_NUMBER
					sv_k = urhk_dbCursorFetch(sv_g)

					print(sv_k)
					IF (sv_k !=0) THEN
					#{
                                                print("No Child Accounts exist for the master account")
						GOTO ENDOFTHISLOOP
                                                CUST.DATA.availBalance = "0.00"
					#}
					ENDIF

					WHILE(sv_k == 0)
					#{
						print(CUST.DATA.tdAvailBalance)
						CUST.DATA.chAcctNum = BANCS.OUTPARAM.chAcctNum
						
						#Calling UserHook
						
						BANCS.INPARAM.acctId = CUST.DATA.chAcctNum
						BANCS.INPARAM.asOnDate = BANCS.STDIN.BODDate

						print(BANCS.INPARAM.acctId)
						print(BANCS.INPARAM.asOnDate)

						sv_a = urhk_getAcctBalanceAsOnDate("")

						print(sv_a)
						IF(sv_a == 1)THEN
						#{
							print("Invalid inputs")
							CUST.DATA.tdAvailBalance = "0.00"
						#}
						ELSE
						#{
							print(BANCS.OUTPARAM.acctBal)
							CUST.DATA.tdAvailBalance = BANCS.OUTPARAM.acctBal
							print(CUST.DATA.tdAvailBalance)
								
							CUST.DATA.availBalance = CDOUBLE(CUST.DATA.availBalance) + CDOUBLE(CUST.DATA.tdAvailBalance)
							print(CUST.DATA.availBalance)
						#}
						ENDIF
															
						sv_k = urhk_dbCursorFetch(sv_g)
					#}
					DO
					ENDOFTHISLOOP:
					sv_n = urhk_dbCursorClose(sv_g)
					CUST.DATA.availBalance = FORMAT$(CDOUBLE(CUST.DATA.availBalance),"%2.2f")
					print(CUST.DATA.availBalance)
				#}
				ELSE
				#{
					sv_e = 1
					CUST.DATA.ERRORCODE = "INTF003"
					CUST.DATA.SuccessOrFailure = "F"
					CUST.DATA.ERRORMSG= "Internal Finacle Error.Cursor Opening failed"
					print(CUST.DATA.ERRORMSG)
					GOTO ENDOFSCRIPT
				#}
				ENDIF						
			#}
			ENDIF

			#=====================================
			#Sending the o/p to reponse xml
			#=====================================

			IF(CUST.DATA.cifNo == "")THEN
			#{
				CUST.DATA.cifNo  = " "
			#}
			ENDIF
			sv_z ="FCAcctListInq_Res.accountDetail.<rec_"+CUST.DATA.number+">.cifNo"+ "|" + CUST.DATA.cifNo
			sv_a = urhk_SetOrbOut(sv_z)

			IF(CUST.DATA.acctType == "")THEN
			#{
				CUST.DATA.acctType  = " "
			#}
			ENDIF
			sv_z ="FCAcctListInq_Res.accountDetail.<rec_"+CUST.DATA.number+">.acctType"+ "|" + CUST.DATA.acctType
			sv_a = urhk_SetOrbOut(sv_z)

			IF(CUST.DATA.acctNumber == "")THEN
			#{
				CUST.DATA.acctNumber  = " "
			#}
			ENDIF
			sv_z ="FCAcctListInq_Res.accountDetail.<rec_"+CUST.DATA.number+">.acctNumber"+ "|" + CUST.DATA.acctNumber
			sv_a = urhk_SetOrbOut(sv_z)

			IF(CUST.DATA.acctName == "")THEN
			#{
				CUST.DATA.acctName  = " "
			#}
			ENDIF
			sv_z ="FCAcctListInq_Res.accountDetail.<rec_"+CUST.DATA.number+">.acctName"+ "|" + CUST.DATA.acctName
			sv_a = urhk_SetOrbOut(sv_z)

			IF(CUST.DATA.acctStatus == "")THEN
			#{
				CUST.DATA.acctStatus  = " "
			#}
			ENDIF
			sv_z ="FCAcctListInq_Res.accountDetail.<rec_"+CUST.DATA.number+">.acctStatus"+ "|" + CUST.DATA.acctStatus
			sv_a = urhk_SetOrbOut(sv_z)

			IF(CUST.DATA.closedFlag == "")THEN
			#{
				CUST.DATA.closedFlag  = " "
			#}
			ENDIF
			sv_z ="FCAcctListInq_Res.accountDetail.<rec_"+CUST.DATA.number+">.closedFlag"+ "|" + CUST.DATA.closedFlag
			sv_a = urhk_SetOrbOut(sv_z)

			IF(CUST.DATA.availBalance == "")THEN
			#{
				CUST.DATA.availBalance  = " "
			#}
			ENDIF
			sv_z ="FCAcctListInq_Res.accountDetail.<rec_"+CUST.DATA.number+">.availBalance"+ "|" + CUST.DATA.availBalance
			sv_a = urhk_SetOrbOut(sv_z)

			IF(TRIM(CUST.DATA.currentBalance) == "")THEN
			#{
				CUST.DATA.currentBalance  = "0.00"
			#}
			ENDIF
			sv_z ="FCAcctListInq_Res.accountDetail.<rec_"+CUST.DATA.number+">.currentBalance"+ "|" + CUST.DATA.currentBalance
			sv_a = urhk_SetOrbOut(sv_z)

			IF(CUST.DATA.acctCrncy == "")THEN
			#{
				CUST.DATA.acctCrncy  = " "
			#}
			ENDIF
			sv_z ="FCAcctListInq_Res.accountDetail.<rec_"+CUST.DATA.number+">.acctCrncy"+ "|" + CUST.DATA.acctCrncy
			sv_a = urhk_SetOrbOut(sv_z)

			sv_b = sv_b+1
       	                print(sv_b)
                        CUST.DATA.number = sv_b
                        print(CUST.DATA.number)
                        print(CUST.DATA.recCount)
                        IF(CUST.DATA.number == CUST.DATA.recCount)THEN
                        #{
				sv_n = urhk_dbCursorClose(sv_j)
				GOTO ENDOFSCRIPT
                        #}
                        ENDIF

                        sv_n = urhk_dbCursorFetch(sv_j)
                #}
                DO
                sv_n = urhk_dbCursorClose(sv_j)

        #}
        ELSE
        #{
		sv_e = 1
		CUST.DATA.ERRORCODE = "INTF003"
		CUST.DATA.SuccessOrFailure = "F"
		CUST.DATA.ERRORMSG= "Internal Finacle Error.Cursor Opening failed"
		print(CUST.DATA.ERRORMSG)
		GOTO ENDOFSCRIPT
        #}
        ENDIF

        ENDOFSCRIPT:
        IF (sv_e == 1) THEN
        #{
		IF (CUST.DATA.ERRORMSG != "") THEN
		#{
			BANCS.OUTPUT.successOrFailure="F"
			sv_a = "ERROR.FIBUSINESSEXCEPTION.ERRORDETAIL.ERRORCODE"+"|"+CUST.DATA.ERRORCODE
			sv_u = urhk_SetOrbOut(sv_a)
			sv_a = "ERROR.FIBUSINESSEXCEPTION.ERRORDETAIL.ERRORDESC"+"|"+CUST.DATA.ERRORMSG
			sv_u = urhk_SetOrbOut(sv_a)
			sv_a = "ERROR.FIBUSINESSEXCEPTION.ERRORDETAIL.ERROTYPE"+"|BE"
			sv_u = urhk_SetOrbOut(sv_a)
		#}
		ENDIF
		trace off
		EXITSCRIPT
        #}
        ENDIF

        IF(CUST.DATA.hasMoreFlag == "")THEN
        #{
		CUST.DATA.hasMoreFlag  = " "
        #}
        ENDIF
        sv_z ="FCAcctListInq_Res.hasMoreData"+ "|" + CUST.DATA.hasMoreFlag
        sv_a = urhk_SetOrbOut(sv_z)


        #=============================================================================================
        #Deleting repository and class
        #=============================================================================================
        IF (CLASSEXISTS("CUST", "DATA") != 0) THEN
        #{
        	DELETECLASS("CUST", "DATA")
        #}
        ENDIF

        IF (REPEXISTS("CUST") != 0) THEN
        #{
		DELETEREP("CUST")
        #}
        ENDIF

TRACE OFF
END-->
