#============================================================
# IMPORTANT: Auto Generated Header. DO NOT CHANGE MANUALLY.
# Domain: Finacle Core
# Library Name: LHCIFAPIBatch.scl
# Description: LHCIFAPIBatch
#============================================================
###################################################################
#					SUB FOR SUCCESS RECORDS
####################################################################
SUB genSuccessLst()
#{
	#SRL NUM|ACCOUNT NUMBER|SUNDRY CR BAL|SUNDRY DR BAL|PENDING ON LOAN|TRAN_ID|REMARKS
	
	CUST.DATA.successCount = CINT(CUST.DATA.successCount) + 1
	
	PRINT(CUST.DATA.successCount)
	PRINT(CUST.DATA.cifId)
	PRINT(CUST.DATA.SuccessMsg)
	
	fv_successRecord     =   "S" +CUST.DATA.successCount + "|S"  + CUST.DATA.cifId   + "|S" + CUST.DATA.SuccessMsg
	
	PRINT(fv_successRecord)
	sv_r = func_addDataToFileB(CUST.BATCH.successLst,fv_successRecord)
	PRINT(CUST.BATCH.successLst)
	
	
#}
ENDSUB


###################################################################
#					SUB FOR FAILURE RECORDS
####################################################################
SUB genFailureLst()
#{
	
	CUST.DATA.failureCount = CINT(CUST.DATA.failureCount) + 1
	
	PRINT(CUST.DATA.failureCount)
	PRINT(CUST.DATA.cifId)
	PRINT(CUST.DATA.errorMsg)
	
	fv_failureRecord     =   "S" +CUST.DATA.failureCount + "|S"  + CUST.DATA.cifId  +  "|S"  + CUST.DATA.errorMsg
	PRINT(fv_failureRecord)
	
	sv_r = func_addDataToFileB(CUST.BATCH.failureLst,fv_failureRecord)
	PRINT(CUST.BATCH.failureLst)
	
#}
ENDSUB

###################################################################
#	FUNCTION TO DERIVE MINOR_FLG FOR ADDCUST
####################################################################
FUNCTION deriveMinorFlg(fv_dob)
#{
	PRINT(fv_dob)
	
	INTF.DATA.birthDateInp = fv_dob
	PRINT(STRLEN(INTF.DATA.birthDateInp))
	
	#Siri Correction
	#IF((TRIM (INTF.DATA.birthDateInp) == "") OR ((STRLEN(INTF.DATA.birthDateInp) != 8)))THEN
	IF((TRIM (INTF.DATA.birthDateInp) == "") OR ((STRLEN(INTF.DATA.birthDateInp) != 10)))THEN
	#{
		#Siri Correction
		#INTF.DATA.birthDateInp = "01-01-1900" +  "T00:00:00.000"
		INTF.DATA.birthDateInp = "1900-01-01"
		PRINT(INTF.DATA.birthDateInp)
		INTF.DATA.birthDate = INTF.DATA.birthDateInp
		#}
	ELSE
		#{
		lv_h = "BirthDtMinor|SELECT TO_CHAR(TO_DATE(?SVAR,'DD-MM-YYYY'),'YYYY-MM-DD') FROM DUAL"
		PRINT(lv_h)
		
		BANCS.INPARAM.BINDVARS = INTF.DATA.birthDateInp
		
		sv_d=urhk_dbSelectWithBind(lv_h)
		sub_copyOutparamFieldB("BirthDtMinor","INTF","DATA","BirthDtMinor","")
		INTF.DATA.birthDate = BANCS.OUTPARAM.BirthDtMinor
		PRINT(INTF.DATA.birthDate)
	#}
	ENDIF
	
	PRINT(INTF.DATA.birthDate)
	fv_dob = INTF.DATA.birthDate
	
	PRINT(BANCS.STDIN.BODDate)
	
	INTF.DATA.bodDate1 = mid$(BANCS.STDIN.BODDate,6,4) + "-" +  mid$(BANCS.STDIN.BODDate,3,2) + "-" + mid$(BANCS.STDIN.BODDate,0,2)
	PRINT(INTF.DATA.bodDate1)
	
	#INTF.DATA.DOB1 = mid$((fv_dob),6,4) + "-" +  mid$((fv_dob),3,2) + "-" + mid$((fv_dob),0,2)
	INTF.DATA.DOB1 = fv_dob
	PRINT(INTF.DATA.DOB1)
	
	sv_a = ""
	sv_a = sv_a + "dobDiff|select floor(months_between(date '"+INTF.DATA.bodDate1+"', date '"+INTF.DATA.DOB1+"') /12) from dual"
	PRINT(sv_a)
	
	sv_s=urhk_dbSelectWithBind(sv_a)
	PRINT(sv_s)
	PRINT(BANCS.OUTPARAM.dobDiff)
	
	IF(sv_s == 0)THEN
	#{
		INTF.DATA.dobDiff = BANCS.OUTPARAM.dobDiff
		PRINT(INTF.DATA.dobDiff)
		
		IF(CINT(INTF.DATA.dobDiff) < 18)THEN
		#{
			INTF.DATA.isMinor = "Y"
			#}
		ELSE
			#{
			INTF.DATA.isMinor = "N"
		#}
		ENDIF
		#}
	ELSE
		#{
		INTF.DATA.isMinor = "N"
	#}
	ENDIF
	PRINT(INTF.DATA.isMinor)
	
	sv_v = INTF.DATA.isMinor
	PRINT(sv_v)
	
	RETURN sv_v
#}
ENDFUNCTION

######################################################################################################
# FUNCTION TO GET TAG VALUE FROM RESPONSEXML
######################################################################################################
FUNCTION xmlParseFunc1(fv_resXml,fv_startTag,fv_endTag,BYREF fv_tagValue)
#{
	PRINT(fv_startTag)
	PRINT(fv_endTag)
	fv_u = GETPOSITION(fv_resXml,fv_startTag) + STRLEN(fv_startTag) - 1
	PRINT(fv_u)
	IF(fv_u != 0) THEN
	#{
		fv_v  = GETPOSITION(fv_resXml,fv_endTag) - 1
		PRINT(fv_v)
		fv_tagValue = MID$(fv_resXml,fv_u,(fv_v-fv_u))
		PRINT(fv_tagValue)
		RETURN fv_tagValue
	#}
	ENDIF
#}
ENDFUNCTION


######################################################################################################
# FUNCTION TO VERIFY CIFs BASED OF TRADE FINANCE FLG
######################################################################################################
FUNCTION CIFVerify(fv_repos,fv_class)
#{
	
	
	fv_r = fv_repos
	fv_c = fv_class
	
	PRINT((fv_r).(fv_c).("TFflg"))
	PRINT((fv_r).(fv_c).("genCifId"))
	PRINT((fv_r).(fv_c).("custType"))
	#====================================================================
	# If tradeFinCustFlag = "N", Then CIF creation should be verified
	#====================================================================
	IF(((fv_r).(fv_c).("TFflg")) == "N") THEN
	#{
		INTF.DATA.srvReqId = "verifyCustomerDetails"
		INTF.DATA.crmCifId = (fv_r).(fv_c).("genCifId")
		PRINT(INTF.DATA.crmCifId)
		
		#This is defined in CIFCommonFunctions.scl
		sub_createCIFVerify("INTF","DATA")
		
		PRINT(BANCS.OUTPARAM.RespMesg)
		
		CUST.DATA.responseXml = BANCS.OUTPARAM.RespMesg
		
		sv_e = func_xmlParseFunc1(CUST.DATA.responseXml,"<Status>","</Status>",BYREF CUST.DATA.FIStatus)
		PRINT(CUST.DATA.FIStatus)
		
		IF((TOUPPER((fv_r).(fv_c).("FIStatus"))) != "SUCCESS") THEN
		#{
			sv_e = func_xmlParseFunc1((fv_r).(fv_c).("responseXml"),"<ErrorDesc>","</ErrorDesc>",BYREF (fv_r).(fv_c).("errorMsg"))
			PRINT( (fv_r).(fv_c).("errorMsg"))
			
			(fv_r).(fv_c).("errorMsg") = "CIF Verification: " + (fv_r).(fv_c).("errorMsg")
			PRINT( (fv_r).(fv_c).("errorMsg"))
			(fv_r).(fv_c).("errorFlg")  = "Y"
			RETURN 1
		#}
		ENDIF
		
	#}
	ENDIF
	
	RETURN 0
#}
ENDFUNCTION


######################################################################################################################
#					BATCH FRAMEWORK FUNCTION --onEveryRecord()
######################################################################################################################

SUB onEveryRecord()
#{
	
	PRINT("ONEVERYRECORD - AS PER BATCH FRAMEWORK")
	sub_createRepClassB("INTF","DATA")
	#=======================================================================================================
	# INTIALIZE ALL VARIABLES FOR API
	#========================================================================================================
	sv_z=""
	CUST.DATA.errMsg = ""
	CUST.DATA.errorMsg = ""
	CUST.DATA.SuccessMsg = ""
	CUST.DATA.successCount = "0"
	CUST.DATA.failureCount = "0"
	CUST.DATA.successOrFailure = ""
	CUST.DATA.errorFlg  = "N"
	CUST.DATA.record = ""
	INTF.DATA.crmCifId = ""
	
	PRINT("IN ONEVERYRECORD")
	CUST.DATA.BODDate = MID$(BANCS.STDIN.BODDate,0,10)
	PRINT(CUST.DATA.BODDate)
	
	## *********** FOR ADD CUST API***************** ##
	
	CUST.DATA.modifyStatus = ""
	INTF.DATA.srvReqId = ""
	CUST.DATA.srvReqId = ""
	
	INTF.DATA.cifNum = ""
	INTF.DATA.titleEn = ""
	INTF.DATA.firstNameEn = ""
	INTF.DATA.lastNameEn = ""
	INTF.DATA.shortName = ""
	INTF.DATA.primaryRM = ""
	
	INTF.DATA.addrCount = "0"
	
	INTF.DATA.addrTypeDesc1 = ""
	INTF.DATA.addrTypeDesc2 = ""
	INTF.DATA.addrTypeDesc3 = ""
	INTF.DATA.addrTypeDesc4 = ""
	INTF.DATA.addrTypeDesc5 = ""
	
	INTF.DATA.addrLine11 = ""
	INTF.DATA.addrLine21 = ""
	INTF.DATA.addrLine31 = ""
	
	INTF.DATA.addrLine12 = ""
	INTF.DATA.addrLine22 = ""
	INTF.DATA.addrLine32 = ""
	
	INTF.DATA.addrLine13 = ""
	INTF.DATA.addrLine23 = ""
	INTF.DATA.addrLine33 = ""

	INTF.DATA.addrLine14 = ""
	INTF.DATA.addrLine24 = ""
	INTF.DATA.addrLine34 = ""

	INTF.DATA.addrLine15 = ""
	INTF.DATA.addrLine25 = ""
	INTF.DATA.addrLine35 = ""
	
	INTF.DATA.addrState1 = ""
	INTF.DATA.addrState2 = ""
	INTF.DATA.addrState3 = ""
	INTF.DATA.addrState4 = ""
	INTF.DATA.addrState5 = ""
	
	INTF.DATA.addrCountry1 = ""
	INTF.DATA.addrCountry2 = ""
	INTF.DATA.addrCountry3 = ""
	INTF.DATA.addrCountry4 = ""
	INTF.DATA.addrCountry5 = ""
	
	INTF.DATA.addrZipCode1 = ""
	INTF.DATA.addrZipCode2 = ""
	INTF.DATA.addrZipCode3 = ""
	INTF.DATA.addrZipCode4 = ""
	INTF.DATA.addrZipCode5 = ""
	
	INTF.DATA.tradeCustFlag = ""
	INTF.DATA.title = ""
	INTF.DATA.gender = ""
	INTF.DATA.nonResInd  = ""
	INTF.DATA.nationality = ""
	INTF.DATA.holdMailInd = ""
	
	INTF.DATA.docCount = "0"
	INTF.DATA.docTypeCode1 = ""
	INTF.DATA.issueCountry1 = ""
	INTF.DATA.expiryDate1 = ""
	INTF.DATA.uniqueID1 = ""
	INTF.DATA.custClassCode = ""
	
	
	INTF.DATA.staffIndCode = ""
	INTF.DATA.staffIndDesc = ""
	
	INTF.DATA.phoneCount = ""
	INTF.DATA.phoneType1 = ""
	INTF.DATA.phoneNumber1 = ""
	INTF.DATA.phoneCntyCode1 = ""
	
	INTF.DATA.docRefNumber1 = ""
	INTF.DATA.city1 = ""
	
	INTF.DATA.docRefNumber = ""
	INTF.DATA.city = ""
	INTF.DATA.custClassCode = ""
	INTF.DATA.slCifId = ""
	INTF.DATA.natLangCode = ""
	INTF.DATA.retDefAddrType = ""
	INTF.DATA.addrCtyStZip = ""
	INTF.DATA.addrCtyStZip1 = ""
	INTF.DATA.addrCtyStZip2 = ""
	INTF.DATA.addrCtyStZip3 = ""
	INTF.DATA.addrCtyStZip4 = ""
	INTF.DATA.addrCtyStZip5 = ""
	INTF.DATA.prmSolId = BANCS.STDIN.mySolId
	
	#=========OTHER MAND FIELDS FOR ADD-HARDODED AT LIABILITIES SIDE===============#
	INTF.DATA.empntStatus		= ""
	INTF.DATA.relOpnDate		= ""
	INTF.DATA.retSubSgmnt		= ""
	INTF.DATA.natLangCode		= ""
	INTF.DATA.segClass			= ""
	INTF.DATA.createdSysId 		= ""
	INTF.DATA.custLang			= ""
	INTF.DATA.occupation		= ""
	INTF.DATA.psychoText10		= ""
	INTF.DATA.psychoType		= ""
	INTF.DATA.prefLocale		= ""
	
	INTF.DATA.eBankAllow		= ""
	INTF.DATA.staffIndCode		= ""
	INTF.DATA.region			= ""
	
	INTF.DATA.placeOfIssue		= ""
	INTF.DATA.docRefNumber		= ""
	INTF.DATA.docTypeCode1 		= ""
	INTF.DATA.docCode			= ""
	INTF.DATA.status			= ""
	
	INTF.DATA.prefFormat 		= ""
	INTF.DATA.startDate			= ""
	INTF.DATA.freeTxtLabel			= ""
	INTF.DATA.addrHoldMail			= ""
	INTF.DATA.defCurrency			= ""
	
	
	
	#=========FOR CORPPORATE===============#
	INTF.DATA.custClassCode		= ""
	INTF.DATA.corpName			= ""
	
	INTF.DATA.otherName			= ""
	INTF.DATA.bussTypeCode 		= ""
	INTF.DATA.sectorCode 		= ""
	INTF.DATA.incorpDate		= ""
	INTF.DATA.incorpCountry 	= ""
	INTF.DATA.prefLang 			= ""
	INTF.DATA.branchNum 		= ""
	
	INTF.DATA.crncyCode 		= ""
	INTF.DATA.custHlth 			= ""
	INTF.DATA.relCrBy 			= ""
	INTF.DATA.corpSubSgmnt 		= ""
	INTF.DATA.corpSgmnt 		= ""
	INTF.DATA.priority 			= ""
	INTF.DATA.corpShortName 	= ""
	INTF.DATA.corpEntyType 		= ""
	INTF.DATA.defAddrType 		= ""
	INTF.DATA.langDesc 			= ""
	INTF.DATA.eBankingAllow 	= ""
	
	INTF.DATA.keyContName 		= ""
	INTF.DATA.corpRemarks 		= ""
	INTF.DATA.notes 			= ""
	INTF.DATA.cntryPOper 		= ""
	INTF.DATA.tradeCustFlag 	= ""
	INTF.DATA.regNumber 		= ""
	INTF.DATA.region 			= ""
	INTF.DATA.relType 			= ""
	INTF.DATA.taxId 			= ""
	INTF.DATA.entityClass 		= ""
	INTF.DATA.avgAnIncome 		= ""
	INTF.DATA.sourceOfFund 		= ""
	INTF.DATA.subsector 		= ""
	INTF.DATA.phonePrefFlag 	= ""
	
	INTF.DATA.prefAmount1		= ""
	INTF.DATA.prefDate1			= ""
	INTF.DATA.relCrBy 			= ""
	
	INTF.DATA.email 			= ""
	INTF.DATA.emailType 		= ""
	INTF.DATA.relCrBy 			= ""
	INTF.DATA.relCrBy 			= ""
	INTF.DATA.issueDate1 		= ""
	INTF.DATA.issueCntry 		= ""
	INTF.DATA.custType 			= ""
	
	
	#------------------------------------------------------------------------------#
	#   Initializing the fields FOR MOD
	#------------------------------------------------------------------------------#
	CUST.DATA.cifId 			= ""
	CUST.DATA.cust_id  			= ""
	CUST.DATA.cust_name 		= ""
	CUST.DATA.date_of_birth 	= ""
	CUST.DATA.sol_id 			= ""
	CUST.DATA.ibs_flg 			= ""
	CUST.DATA.introd_title_code = ""
	
	CUST.DATA.FirstName 		= ""
	CUST.DATA.MiddleName		= ""
	CUST.DATA.LastName 			= ""
	
	#~~~~~~~~Address Dtls ~~~~~~~~~~~~~~~~~#
	CUST.DATA.cust_pager_no 			= ""
	CUST.DATA.cust_comu_addr1			= ""
	CUST.DATA.cust_comu_addr2 			= ""
	CUST.DATA.cust_comu_city_code 		= ""
	CUST.DATA.cust_comu_state_code		= ""
	CUST.DATA.cust_comu_cntry_code 		= ""
	CUST.DATA.cust_comu_pin_code		= ""
	
	CUST.DATA.cust_comu_phone_num 		= ""
	CUST.DATA.AddrCategoryPerm 			= ""
	CUST.DATA.PrefFormatPerm 			= ""
	CUST.DATA.StartDtPerm 				= ""
	CUST.DATA.cust_perm_phone_num 		= ""
	
	CUST.DATA.cust_perm_addr1 			= ""
	CUST.DATA.cust_perm_addr2			= ""
	CUST.DATA.cust_perm_city_code		= ""
	CUST.DATA.cust_perm_state_code 		= ""
	CUST.DATA.cust_perm_pin_code 		= ""
	CUST.DATA.cust_perm_cntry_code 		= ""
	
	CUST.DATA.cust_emp_addr1			= ""
	CUST.DATA.cust_emp_addr2 			= ""
	CUST.DATA.cust_emp_city_code 		= ""
	CUST.DATA.cust_emp_state_code 		= ""
	CUST.DATA.cust_emp_pin_code 		= ""
	CUST.DATA.cust_emp_cntry_code		= ""
	CUST.DATA.cust_emp_phone_num_1		= ""
	CUST.DATA.cust_emp_phone_num_2 		= ""
	
	CUST.DATA.nre_lcl_reltn_addr1 		= ""
	CUST.DATA.nre_lcl_reltn_addr2 		= ""
	CUST.DATA.nre_lcl_reltn_city_code	= ""
	CUST.DATA.nre_lcl_reltn_state_code	= ""
	CUST.DATA.nre_lcl_reltn_pin_code 	= ""
	CUST.DATA.nre_lcl_reltn_cntry_code	= ""
	CUST.DATA.nre_lcl_reltn_phone_num 	= ""
	CUST.DATA.AddrCategory 				= ""
	
	CUST.DATA.birthDate 				= ""
	CUST.DATA.BirthDt 					= ""
	CUST.DATA.BirthMonth 				= ""
	CUST.DATA.BirthYear				    = ""
	CUST.DATA.cust_minor_flg 			= ""
	CUST.DATA.cust_nre_flg			    = ""
	CUST.DATA.cust_gender 				= ""
	CUST.DATA.cust_occp_code 			= ""
	
	CUST.DATA.email_id					= ""
	CUST.DATA.cust_comu_phone_num 		= ""
	CUST.DATA.commu_at 					= ""
	CUST.DATA.cust_title_code 			= ""
	CUST.DATA.cust_minor_flg 			= ""
	CUST.DATA.ibs_flg 					= ""
	CUST.DATA.introd_title_code			= ""
	
	CUST.DATA.EmploymentStatus			= ""
	CUST.DATA.marital_status			= ""
	CUST.DATA.cust_nre_flg 				= ""
	
	CUST.DATA.SegmentationClass 		= ""
	CUST.DATA.SubSegment				= ""
	CUST.DATA.TradeFinance 				= ""
	
	CUST.DATA.Language = ""
	CUST.DATA.cust_gender = ""
	CUST.DATA.Manager = ""
	CUST.DATA.DefaultAddrType = ""
	CUST.DATA.cust_introd_stat_code = ""
	CUST.DATA.cust_introd_name = ""
	CUST.DATA.introd_title_code = ""
	CUST.DATA.cust_introd_stat_code = ""
	CUST.DATA.cust_type_code = ""
	CUST.DATA.cust_grp = ""
	
	CUST.DATA.HoldMailFlag = ""
	CUST.DATA.PrefAddr = ""
	CUST.DATA.PrefFormatComu = ""
	CUST.DATA.PrefFormatPerm = ""
	CUST.DATA.StartDtComu = ""
	CUST.DATA.ft_hu_name = ""
	CUST.DATA.Region = ""
	CUST.DATA.RelationshipOpeningDt = ""
	CUST.DATA.CustStatusChngDate = ""
	CUST.DATA.cust_const =""
	
	CUST.DATA.minor_guard_code = ""
	CUST.DATA.Manager  = ""
	CUST.DATA.cust_emp_id  = ""
	CUST.DATA.nre_becoming_nre_date = ""
	CUST.DATA.nre_becoming_ord_date = ""
	CUST.DATA.NativeLanguageCode = ""
	
	#TO BE GIVEN MAPPING
	
	CUST.DATA.psprt_num = ""
	CUST.DATA.psprt_det = ""
	CUST.DATA.psprt_exp_date = ""
	CUST.DATA.psprt_issu_date = ""
	CUST.DATA.IdPrfIDIssuedOrganisation = ""
	CUST.DATA.IdPrfReferenceNum  = ""
	CUST.DATA.IdPrfIdIssueDt  = ""
	CUST.DATA.pan_gir_num = ""
	CUST.DATA.IdPrfCountryOfIssue = ""
	CUST.DATA.IdPrfDocCode  = ""
	#MAPPING VAR ENDS
	
	
	CUST.DATA.cust_commu_code = ""
	CUST.DATA.NATIONALITY =""
	CUST.DATA.IdPrfDocCode = ""
	CUST.DATA.IdPrfTypeCode = ""
	CUST.DATA.IdPrfTypeDesc = ""
	CUST.DATA.IdPrfReferenceNum = ""
	CUST.DATA.IdPrfPlaceOfIssue = ""
	CUST.DATA.prefCnt = ""
	
	CUST.DATA.AdPrfCountryOfIssue = ""
	CUST.DATA.AdPrfTypeDesc = ""
	CUST.DATA.AdPrfDocCode = ""
	CUST.DATA.AdPrfIdIssueDt = ""
	CUST.DATA.AdPrfTypeCode = ""
	CUST.DATA.AdPrfPlaceOfIssue = ""
	CUST.DATA.AdPrfReferenceNum = ""
	CUST.DATA.AdPrfIDIssuedOrganisation = ""
	CUST.DATA.preferredUniqueId = ""
	CUST.DATA.AdPrfIdIssueDt = ""
	
	CUST.DATA.childCustId = ""
	CUST.DATA.StrText10 = ""
	CUST.DATA.Type = ""
	CUST.DATA.minor_guard_code = ""
	CUST.DATA.cust_comu_telex_num = ""
	CUST.DATA.demoHoldMailFlg = ""
	CUST.DATA.shortNmeNative = ""
	CUST.DATA.cust_short_name = ""
	
	#HardCodingScript_Variables
	CUST.DATA.BODDate = MID$(BANCS.STDIN.BODDate,0,10)
	PRINT(CUST.DATA.BODDate)
	CUST.DATA.rcre_time = CUST.DATA.BODDate +  "T00:00:00.000"
	PRINT(CUST.DATA.rcre_time)
	
	CUST.DATA.id_proof = ""
	CUST.DATA.id_no = ""
	CUST.DATA.add_proof = ""
	CUST.DATA.cust_comu_city_code = ""
	CUST.DATA.StartDtNRE = ""
	CUST.DATA.StartDtEmp = ""
	CUST.DATA.RelationshipOpeningDt =""
	CUST.DATA.cust_occp_code = ""
	CUST.DATA.crncyDate = ""
	CUST.DATA.sol_id = BANCS.STDIN.mySolId
	
	CUST.DATA.cust_introd_cust_id = ""
	CUST.DATA.introd_title_code = ""
	CUST.DATA.cust_introd_name = ""
	CUST.DATA.tax_residence = ""
	CUST.DATA.childCustId = ""
	CUST.DATA.AddrCategoryComu = ""
	CUST.DATA.debit_card_flg = ""
	CUST.DATA.card_sub_type = ""
	CUST.DATA.TFflg = ""
	CUST.DATA.issueDate = ""
	
	
	#~~~~~~~~Address Dtls As Per New Batch Inputs Fields~~~~~~~~~~~~~~~~~#
	CUST.DATA.addrType1 = ""
	CUST.DATA.addrType2 = ""
	CUST.DATA.addrType3 = ""
	CUST.DATA.addrType4 = ""
	CUST.DATA.addrType5 = ""
	
	CUST.DATA.addrType1 = ""
	CUST.DATA.addrType2 = ""
	CUST.DATA.addrType3 = ""
	CUST.DATA.addrType4 = ""
	CUST.DATA.addrType5 = ""
	
	CUST.DATA.addrTypeDesc = ""
	CUST.DATA.addrTypeDesc1 = ""
	CUST.DATA.addrTypeDesc2 = ""
	CUST.DATA.addrTypeDesc3 = ""
	CUST.DATA.addrTypeDesc4 = ""
	CUST.DATA.addrTypeDesc5 = ""
	
	CUST.DATA.cntry1 = ""
	CUST.DATA.cntry2 = ""
	CUST.DATA.cntry3 = ""
	CUST.DATA.cntry4 = ""
	CUST.DATA.cntry5 = ""
	
	CUST.DATA.state1 = ""
	CUST.DATA.state2 = ""
	CUST.DATA.state3 = ""
	CUST.DATA.state4 = ""
	CUST.DATA.state5 = ""
	
	CUST.DATA.zipCode1 = ""
	CUST.DATA.zipCode2 = ""
	CUST.DATA.zipCode3 = ""
	CUST.DATA.zipCode4 = ""
	CUST.DATA.zipCode5 = ""
	
	CUST.DATA.AddrCategoryPerm = ""
	CUST.DATA.HomeAddr = ""
	CUST.DATA.HomeCity = ""
	CUST.DATA.HomeState = ""
	CUST.DATA.HomeCntry = ""
	CUST.DATA.HomePinCode = ""
	
	CUST.DATA.AddrCategoryMail = ""
	CUST.DATA.MailAddr = ""
	CUST.DATA.MailCity = ""
	CUST.DATA.MailState = ""
	CUST.DATA.MailCntry = ""
	CUST.DATA.MailPinCode = ""
	
	CUST.DATA.AddrCategoryWrk = ""
	CUST.DATA.WorkAddr = ""
	CUST.DATA.WorkCity = ""
	CUST.DATA.WorkState = ""
	CUST.DATA.WorkCntry = ""
	CUST.DATA.WorkPinCode = ""
	
	CUST.DATA.AddrCategoryCommu = ""
	CUST.DATA.CommuAddr = ""
	CUST.DATA.CommuCity = ""
	CUST.DATA.CommuState = ""
	CUST.DATA.CommuCntry = ""
	CUST.DATA.CommuPinCode = ""
	
	CUST.DATA.firstNameNativ = ""
	CUST.DATA.lastNameNativ = ""
	CUST.DATA.titleNativ = ""
	
	#ADDRESSLIST
	CUST.DATA.modAddrCount = "0"
	
	#PHONELIST
	CUST.DATA.phoneCount = "0"
	CUST.DATA.phnEmailType = ""
	CUST.DATA.phoneNumber1 = ""
	CUST.DATA.phoneNumber2 = ""
	CUST.DATA.phoneNumber3 = ""
	CUST.DATA.telCntryCode1 = ""
	CUST.DATA.PHONEEMAILID1 = ""
	
	##ENTITYDOC
	CUST.DATA.entityDocCount = "0"
	
	
	CUST.DATA.genCifId = ""
	CUST.DATA.custType = ""
	
	CUST.DATA.bindVar = ""
	CUST.DATA.corpShortNatv = ""
	CUST.DATA.nre_nationality = ""
	CUST.DATA.email = ""
	
	CUST.DATA.phoneEmailType = ""
	CUST.DATA.phoneEmailType1 = ""
	CUST.DATA.phoneEmailType2 = ""
	CUST.DATA.phoneEmailType3 = ""
	CUST.DATA.emailType = ""
	
	CUST.DATA.idTypeCode = ""
	CUST.DATA.entityDocumentId = ""
	
	CUST.DATA.responseXml = ""
	INTF.DATA.responseXml = ""
	
	#added by DIVZ
	INTF.DATA.DOB1 = ""
	#-------------------------------------------------------------------------------
	# Values Fetched from Cursor
	#-------------------------------------------------------------------------------
	PRINT(CUST.BATCH.updateFlg)
	PRINT(CUST.BATCH.custNum)
	PRINT(CUST.BATCH.engTitle)
	PRINT(CUST.BATCH.engFirstName)
	PRINT(CUST.BATCH.engLastName)
	PRINT(CUST.BATCH.shortName)
	PRINT(CUST.BATCH.corpName)
	
	PRINT(CUST.BATCH.priRlnMgrId)
	PRINT(CUST.BATCH.forceLoanCls)
	PRINT(CUST.BATCH.sector)
	PRINT(CUST.BATCH.subSector)
	PRINT(CUST.BATCH.businessType)
	
	PRINT(CUST.BATCH.homePhn)
	PRINT(CUST.BATCH.officePhn)
	PRINT(CUST.BATCH.othrPhn)
	PRINT(CUST.BATCH.telCntryCode)
	PRINT(CUST.BATCH.electronicAddr)
	PRINT(CUST.BATCH.RecSrlNum)
	PRINT(CUST.BATCH.processedFlg)
	
	
	CUST.DATA.updateFlg    			= 	CUST.BATCH.updateFlg
	CUST.DATA.custNum				=   CUST.BATCH.custNum
	CUST.DATA.engTitle				=   CUST.BATCH.engTitle
	CUST.DATA.engFirstName			=	CUST.BATCH.engFirstName
	CUST.DATA.engLastName			=	CUST.BATCH.engLastName
	CUST.DATA.shortName				= 	CUST.BATCH.shortName
	CUST.DATA.corpName				=	CUST.BATCH.corpName
	
	CUST.DATA.priRlnMgrId			=	CUST.BATCH.priRlnMgrId
	CUST.DATA.forceLoanCls			=	CUST.BATCH.forceLoanCls
	CUST.DATA.sector				=	CUST.BATCH.sector
	CUST.DATA.subSector				=	CUST.BATCH.subSector
	CUST.DATA.businessType			=	CUST.BATCH.businessType
	
	CUST.DATA.homePhn				=	CUST.BATCH.homePhn
	CUST.DATA.officePhn				=	CUST.BATCH.officePhn
	CUST.DATA.othrPhn				=	CUST.BATCH.othrPhn
	CUST.DATA.telCntryCode			=	CUST.BATCH.telCntryCode
	CUST.DATA.electronicAddr		=	CUST.BATCH.electronicAddr
	
	
	#############################################################
	# GET NEXT SET OF RECORDS-BEFORE ADDRESS SET
	##############################################################
	
	sv_b = " idTypeCode, idDesc, issueDate, idNum, idIssueCntryCode, expDate, taxId|"
	sv_b = sv_b + "SELECT IDTYPE_CODE, ID_DESC, TO_CHAR(ISSUE_DATE,'YYYY-MM-DD'), ID_NUM, ISSUE_CNTRY, TO_CHAR(EXP_DATE,'DD-MM-YYYY'), TAX_ID "
	sv_b = sv_b + "FROM CUSTOM.LHCIF_UPLOAD WHERE PROCESSED_FLG  = 'N' AND UPLOAD_REC_SRL_NUM = ?SVAR"
	
	BANCS.INPARAM.BINDVARS = CUST.BATCH.RecSrlNum
	PRINT(BANCS.INPARAM.BINDVARS)
	sv_d = urhk_dbSelectWithBind(sv_b)
	PRINT(sv_d)
	
	sub_copyOutparamFieldB("idTypeCode","CUST","DATA","idTypeCode","")
	sub_copyOutparamFieldB("idDesc","CUST","DATA","idDesc","")
	sub_copyOutparamFieldB("issueDate","CUST","DATA","issueDate","")
	sub_copyOutparamFieldB("idNum","CUST","DATA","idNum","")
	sub_copyOutparamFieldB("idIssueCntryCode","CUST","DATA","idIssueCntryCode","")
	sub_copyOutparamFieldB("expDate","CUST","DATA","expDate","")
	sub_copyOutparamFieldB("taxId","CUST","DATA","taxId","")
	
	#############################################################
	# GET NEXT SET OF RECORDS-ADDRESS SET
	##############################################################
	sv_b = " addrType1,cityStateZip1,state1,cntry1,zipCode1,"
	sv_b = sv_b + " addrType2,cityStateZip2,state2,cntry2,zipCode2,"
	sv_b = sv_b + " addrType3,cityStateZip3,state3,cntry3,zipCode3,"
	sv_b = sv_b + " addrType4,cityStateZip4,state4,cntry4,zipCode4,"
	sv_b = sv_b + " addrType5,cityStateZip5,state5,cntry5,zipCode5|"
	
	sv_b = sv_b + "SELECT ADDR_TYPE1, CITYSTATEZIP1, STATE1, COUNTRY1, ZIPCODE1, "
	sv_b = sv_b + "ADDR_TYPE2,  CITYSTATEZIP2, STATE2, COUNTRY2, ZIPCODE2, "
	sv_b = sv_b + "ADDR_TYPE3,  CITYSTATEZIP3, STATE3, COUNTRY3, ZIPCODE3, "
	sv_b = sv_b + "ADDR_TYPE4,  CITYSTATEZIP4, STATE4, COUNTRY4, ZIPCODE4, "
	sv_b = sv_b + "ADDR_TYPE5,  CITYSTATEZIP5, STATE5, COUNTRY5, ZIPCODE5 "
	sv_b = sv_b + "FROM CUSTOM.LHCIF_UPLOAD WHERE PROCESSED_FLG  = 'N' AND UPLOAD_REC_SRL_NUM = ?SVAR"
	
	BANCS.INPARAM.BINDVARS = CUST.BATCH.RecSrlNum
	PRINT(BANCS.INPARAM.BINDVARS)
	sv_d = urhk_dbSelectWithBind(sv_b)
	PRINT(sv_d)
	
	
	sub_copyOutparamFieldB("addrType1","CUST","DATA","addrType1","")
	sub_copyOutparamFieldB("cityStateZip1","CUST","DATA","cityStateZip1","")
	sub_copyOutparamFieldB("state1","CUST","DATA","state1","")
	sub_copyOutparamFieldB("cntry1","CUST","DATA","cntry1","")
	sub_copyOutparamFieldB("zipCode1","CUST","DATA","zipCode1","")
	
	sub_copyOutparamFieldB("addrType2","CUST","DATA","addrType2","")
	sub_copyOutparamFieldB("cityStateZip2","CUST","DATA","cityStateZip2","")
	sub_copyOutparamFieldB("state2","CUST","DATA","state2","")
	sub_copyOutparamFieldB("cntry2","CUST","DATA","cntry2","")
	sub_copyOutparamFieldB("zipCode2","CUST","DATA","zipCode2","")
	
	sub_copyOutparamFieldB("addrType3","CUST","DATA","addrType3","")
	sub_copyOutparamFieldB("cityStateZip3","CUST","DATA","cityStateZip3","")
	sub_copyOutparamFieldB("state3","CUST","DATA","state3","")
	sub_copyOutparamFieldB("cntry3","CUST","DATA","cntry3","")
	sub_copyOutparamFieldB("zipCode3","CUST","DATA","zipCode3","")
	
	sub_copyOutparamFieldB("addrType4","CUST","DATA","addrType4","")
	sub_copyOutparamFieldB("cityStateZip4","CUST","DATA","cityStateZip4","")
	sub_copyOutparamFieldB("state4","CUST","DATA","state4","")
	sub_copyOutparamFieldB("cntry4","CUST","DATA","cntry4","")
	sub_copyOutparamFieldB("zipCode4","CUST","DATA","zipCode4","")
	
	sub_copyOutparamFieldB("addrType5","CUST","DATA","addrType5","")
	sub_copyOutparamFieldB("cityStateZip5","CUST","DATA","cityStateZip5","")
	sub_copyOutparamFieldB("state5","CUST","DATA","state5","")
	sub_copyOutparamFieldB("cntry5","CUST","DATA","cntry5","")
	sub_copyOutparamFieldB("zipCode5","CUST","DATA","zipCode5","")
	
	PRINT(CUST.DATA.addrType1)
	PRINT(CUST.DATA.cityStateZip1)
	PRINT(CUST.DATA.state1)
	PRINT(CUST.DATA.cntry1)
	PRINT(CUST.DATA.zipCode1)
	
	PRINT(CUST.DATA.addrType2)
	PRINT(CUST.DATA.cityStateZip2)
	PRINT(CUST.DATA.state2)
	PRINT(CUST.DATA.cntry2)
	PRINT(CUST.DATA.zipCode2)
	
	PRINT(CUST.DATA.addrType3)
	PRINT(CUST.DATA.cityStateZip3)
	PRINT(CUST.DATA.state3)
	PRINT(CUST.DATA.cntry3)
	PRINT(CUST.DATA.zipCode3)
	
	PRINT(CUST.DATA.addrType4)
	PRINT(CUST.DATA.cityStateZip4)
	PRINT(CUST.DATA.state4)
	PRINT(CUST.DATA.cntry4)
	PRINT(CUST.DATA.zipCode4)
	
	PRINT(CUST.DATA.addrType5)
	PRINT(CUST.DATA.cityStateZip5)
	PRINT(CUST.DATA.state5)
	PRINT(CUST.DATA.cntry5)
	PRINT(CUST.DATA.zipCode5)
	
	
	#############################################################
	# GET NEXT SET OF RECORDS-AFTER ADDRESS SET
	##############################################################
	sv_b = " TFflg, TSflg, custType, classCode, classCodeDesc,"
	sv_b = sv_b + " titleNativ, firstNameNativ, lastNameNativ, aliasName, gender,"
	sv_b = sv_b + " birthDateInp, nonResidentFlg, nationality, maritalStatus, maritalStatusDesc,"
	sv_b = sv_b + " holdMailInd, otherName, rlnshpCIF, rlnshpType, incorpDate,"
	sv_b = sv_b + " incorpCntry, ultimateRiskCntry, custRating, custRatingDesc|"
	
	sv_b = sv_b + "SELECT TF_FLG, TS_FLG, CUST_TYPE, CLASS_CODE, CLASS_CODE_DESC, "
	sv_b = sv_b + "TITLE,  FIRST_NAME, LAST_NAME, ALIAS_NAME, GENDER, "
	sv_b = sv_b + " to_char(BIRTH_DATE,'dd-mm-yyyy'),  NON_RESIDENT_FLG, NATIONALITY, MARITAL_STATUS, MARITAL_STATUS_DESC, "
	sv_b = sv_b + "HOLD_MAIL_FLG,  OTHER_NAME, RLNSHIP_CIF, RLNSHIP_TYPE, TO_CHAR(INCORP_DATE ,'DD-MM-YYYY'), "
	sv_b = sv_b + "INCORP_CNTRY,  ULTIMATE_RISK, CUST_RATING, CUST_RATING_DESC "
	sv_b = sv_b + "FROM CUSTOM.LHCIF_UPLOAD WHERE PROCESSED_FLG  = 'N' AND UPLOAD_REC_SRL_NUM = ?SVAR"
	
	BANCS.INPARAM.BINDVARS = CUST.BATCH.RecSrlNum
	PRINT(BANCS.INPARAM.BINDVARS)
	sv_d = urhk_dbSelectWithBind(sv_b)
	PRINT(sv_d)
	
	sub_copyOutparamFieldB("TFflg","CUST","DATA","TFflg","")
	sub_copyOutparamFieldB("TSflg","CUST","DATA","TSflg","")
	sub_copyOutparamFieldB("custType","CUST","DATA","custType","")
	sub_copyOutparamFieldB("classCode","CUST","DATA","classCode","")
	sub_copyOutparamFieldB("classCodeDesc","CUST","DATA","classCodeDesc","")
	
	sub_copyOutparamFieldB("titleNativ","CUST","DATA","titleNativ","")
	sub_copyOutparamFieldB("firstNameNativ","CUST","DATA","firstNameNativ","")
	sub_copyOutparamFieldB("lastNameNativ","CUST","DATA","lastNameNativ","")
	sub_copyOutparamFieldB("aliasName","CUST","DATA","aliasName","")
	sub_copyOutparamFieldB("gender","CUST","DATA","gender","")
	
	sub_copyOutparamFieldB("birthDateInp","CUST","DATA","birthDateInp","")
	sub_copyOutparamFieldB("nonResidentFlg","CUST","DATA","nonResidentFlg","")
	sub_copyOutparamFieldB("nationality","CUST","DATA","nationality","")
	sub_copyOutparamFieldB("maritalStatus","CUST","DATA","maritalStatus","")
	sub_copyOutparamFieldB("maritalStatusDesc","CUST","DATA","maritalStatusDesc","")
	
	sub_copyOutparamFieldB("holdMailInd","CUST","DATA","holdMailInd","")
	sub_copyOutparamFieldB("otherName","CUST","DATA","otherName","")
	sub_copyOutparamFieldB("rlnshpCIF","CUST","DATA","rlnshpCIF","")
	sub_copyOutparamFieldB("rlnshpType","CUST","DATA","rlnshpType","")
	sub_copyOutparamFieldB("incorpDate","CUST","DATA","incorpDate","")
	
	sub_copyOutparamFieldB("incorpCntry","CUST","DATA","incorpCntry","")
	sub_copyOutparamFieldB("ultimateRiskCntry","CUST","DATA","ultimateRiskCntry","")
	sub_copyOutparamFieldB("custRating","CUST","DATA","custRating","")
	sub_copyOutparamFieldB("custRatingDesc","CUST","DATA","custRatingDesc","")
	
	PRINT(CUST.DATA.TFflg)
	PRINT(CUST.DATA.TSflg)
	PRINT(CUST.DATA.custType)
	PRINT(CUST.DATA.classCode)
	PRINT(CUST.DATA.classCodeDesc)
	
	PRINT(CUST.DATA.titleNativ)
	PRINT(CUST.DATA.firstNameNativ)
	PRINT(CUST.DATA.lastNameNativ)
	PRINT(CUST.DATA.aliasName)
	PRINT(CUST.DATA.gender)
	
	PRINT(CUST.DATA.birthDateInp)
	PRINT(CUST.DATA.nonResidentFlg)
	PRINT(CUST.DATA.nationality)
	PRINT(CUST.DATA.maritalStatus)
	PRINT(CUST.DATA.maritalStatusDesc)
	
	PRINT(CUST.DATA.holdMailInd)
	PRINT(CUST.DATA.otherName)
	PRINT(CUST.DATA.rlnshpCIF)
	PRINT(CUST.DATA.rlnshpType)
	PRINT(CUST.DATA.incorpDate)
	
	PRINT(CUST.DATA.incorpCntry)
	PRINT(CUST.DATA.ultimateRiskCntry)
	PRINT(CUST.DATA.custRating)
	PRINT(CUST.DATA.custRatingDesc)
	
	
	#############################################################
	# GET NEXT SET OF RECORDS-LONG FIELDS > 100
	##############################################################
	sv_b = " addr1, addr2, addr3|"
	sv_b = sv_b + "SELECT ADDRESS1, ADDRESS2, ADDRESS3 "
	sv_b = sv_b + "FROM CUSTOM.LHCIF_UPLOAD WHERE PROCESSED_FLG  = 'N' AND UPLOAD_REC_SRL_NUM = ?SVAR"
	
	BANCS.INPARAM.BINDVARS = CUST.BATCH.RecSrlNum
	PRINT(BANCS.INPARAM.BINDVARS)
	sv_d = urhk_dbSelectLongWithBind(sv_b)
	PRINT(sv_d)
	
	sub_copyOutparamFieldB("addr1","CUST","DATA","addr1","")
	sub_copyOutparamFieldB("addr2","CUST","DATA","addr2","")
	sub_copyOutparamFieldB("addr3","CUST","DATA","addr3","")
	
	PRINT(CUST.DATA.addr1)
	PRINT(CUST.DATA.addr2)
	PRINT(CUST.DATA.addr3)
	
	#############################################################
	# GET NEXT SET OF RECORDS-LONG FIELDS > 100
	##############################################################
	sv_b = "addr4, addr5|"
	sv_b = sv_b + "SELECT  ADDRESS4, ADDRESS5 "
	sv_b = sv_b + "FROM CUSTOM.LHCIF_UPLOAD WHERE PROCESSED_FLG  = 'N' AND UPLOAD_REC_SRL_NUM = ?SVAR"
	
	BANCS.INPARAM.BINDVARS = CUST.BATCH.RecSrlNum
	PRINT(BANCS.INPARAM.BINDVARS)
	sv_d = urhk_dbSelectLongWithBind(sv_b)
	PRINT(sv_d)
	
	
	sub_copyOutparamFieldB("addr4","CUST","DATA","addr4","")
	sub_copyOutparamFieldB("addr5","CUST","DATA","addr5","")
	
	PRINT(CUST.DATA.addr4)
	PRINT(CUST.DATA.addr5)
	
	##########################################################################################################################
	## 						SETTING VALUES TO EACH VARIABLE FOR API's
	##########################################################################################################################
	
	#***************UPDATE FLG****************#
	PRINT(CUST.DATA.updateFlg)
	
	
	#*************** CIF ID*******************#
	#RetCustModRq.RetCustModMainData.CustModData.CustId :(*)
	PRINT(CUST.DATA.custNum)
	CUST.DATA.cifId = CUST.DATA.custNum
	PRINT(CUST.DATA.cifId)
	CUST.DATA.cust_id = TRIM(CUST.DATA.custNum)
	PRINT(CUST.DATA.cust_id)
	#FOR ADD
	INTF.DATA.cifNum = TRIM(CUST.DATA.custNum)
	PRINT(INTF.DATA.cifNum)
	INTF.DATA.slCifId = TRIM(CUST.DATA.custNum)
	PRINT(INTF.DATA.slCifId)
	
	#*************** SALUTATION *******************#
	#RetCustModRq.RetCustModMainData.CustModData.Salutation
	#ADD: RetCustAddRq.CustDtls.CustData.Salutation :(*)
	PRINT(CUST.DATA.engTitle)
	CUST.DATA.cust_title_code = TRIM(CUST.DATA.engTitle)
	PRINT(CUST.DATA.cust_title_code)
	#FORADD
	INTF.DATA.titleEn = TRIM(CUST.DATA.engTitle)
	PRINT(INTF.DATA.titleEn)
	
	#*********** ENGILISH FIRST NAME *************#
	#RetCustModRq.RetCustModMainData.CustModData.FirstName
	#ADD: RetCustAddRq.CustDtls.CustData.FirstName :
	PRINT(CUST.DATA.engFirstName)
	CUST.DATA.FirstName = TRIM(CUST.DATA.engFirstName)
	PRINT(CUST.DATA.FirstName)
	#FORADD
	INTF.DATA.firstNameEn = TRIM(CUST.DATA.engFirstName)
	PRINT(INTF.DATA.firstNameEn)
	
	#*********** ENGILISH LAST NAME *************#
	#RetCustModRq.RetCustModMainData.CustModData.LastName
	#ADD:RetCustAddRq.CustDtls.CustData.LastName :(*)
	PRINT(CUST.DATA.engLastName)
	CUST.DATA.LastName = TRIM(CUST.DATA.engLastName)
	PRINT(CUST.DATA.LastName)
	#FORADD
	INTF.DATA.lastNameEn = TRIM(CUST.DATA.engLastName)
	PRINT(INTF.DATA.lastNameEn)
	
	#*************** SHORT NAME ****************#
	#RetCustModRq.RetCustModMainData.CustModData.ShortName
	#ADD:RetCustAddRq.CustDtls.CustData.ShortName :
	PRINT(CUST.DATA.shortName)
	CUST.DATA.shortNmeNative = TRIM(MID$((CUST.DATA.shortName),0,10))
	PRINT(CUST.DATA.shortNmeNative)
	CUST.DATA.cust_short_name = TRIM(MID$((CUST.DATA.shortName),0,10))
	PRINT(CUST.DATA.cust_short_name)
	
	## FOR ADD
	INTF.DATA.shortName = TRIM(MID$((CUST.DATA.shortName),0,10))
	INTF.DATA.corpShortName	= TRIM(MID$((INTF.DATA.shortName),0,10))
	
	
	#*************** CORPORATE NAME(CORP CIF) ****************#
	#PRINT(CUST.DATA.corpName)
	INTF.DATA.corpName = CUST.DATA.corpName
	INTF.DATA.aliasName = CUST.DATA.aliasName
	print(INTF.DATA.corpName)
	#cust_introd_name
	
	#*************** PRIMARY R/N MANAGER ****************#
	#RetCustModRq.RetCustModMainData.CustModData.Manager
	#ADD: RetCustAddRq.CustDtls.CustData.Manager :
	#GIVEN LENGTH ONLY 3, BUT CRM.ACCOUNTS.MANAGER(150)
	PRINT(CUST.DATA.priRlnMgrId)
	CUST.DATA.Manager = TRIM(CUST.DATA.priRlnMgrId)
	CUST.DATA.Manager = "UBSADMIN"
	PRINT(CUST.DATA.Manager)
	## FOR ADD
	IF(TRIM(CUST.DATA.priRlnMgrId) != "")THEN
        #{
                sv_s = "userId|"
                sv_s = sv_s + "SELECT USER_ID"
                sv_s = sv_s + " FROM TBAADM.UPR WHERE "
                sv_s = sv_s + " USER_EMP_ID IN "
                sv_s = sv_s + " (SELECT SSOIDN from CUSTOM.CAOCT WHERE SSOOFF=?SVAR)"

                BANCS.INPARAM.BINDVARS = CUST.DATA.priRlnMgrId

                print(sv_s)
                print(BANCS.INPARAM.BINDVARS)

                sv_h = urhk_dbSelectWithBind(sv_s)
                print(sv_h)

                IF(sv_h == 0)THEN
                #{
                        CUST.DATA.userId = BANCS.OUTPARAM.userId
                        print(CUST.DATA.userId)
                        INTF.DATA.primaryRM = CUST.DATA.userId
			CUST.DATA.Manager = CUST.DATA.userId
                #}
                ELSE
                #{
                        CUST.DATA.userId  = "UBSADMIN"
                        print(CUST.DATA.userId)
                        INTF.DATA.primaryRM = CUST.DATA.userId
			CUST.DATA.Manager = CUST.DATA.userId
                #}
                ENDIF
        #}
        ELSE
        #{
		IF(CUST.DATA.updateFlg == "U")THEN
		#{
			lv_s = "userId|SELECT manager FROM crmuser.accounts WHERE "
			lv_s = lv_s + " orgkey = ?SVAR "
			print(lv_s)
				
			BANCS.INPARAM.BINDVARS = CUST.DATA.cifId 
			
			sv_d=urhk_dbSelectWithBind(lv_s)
				
			IF(sv_d == 0) THEN
			#{
				sub_copyOutparamFieldB("userId","CUST","DATA","userId","")
				PRINT(CUST.DATA.userId)
				INTF.DATA.primaryRM = CUST.DATA.userId
				CUST.DATA.Manager = CUST.DATA.userId
			#}
			ELSE
			#{
				INTF.DATA.primaryRM = "UBSADMIN"
				CUST.DATA.Manager = "UBSADMIN"
			#}
			ENDIF
		#}
		ELSE
		#{
			INTF.DATA.primaryRM = "UBSADMIN"
			CUST.DATA.Manager = "UBSADMIN"
		#}
		ENDIF
        #}
        ENDIF
	#INTF.DATA.primaryRM = TRIM(CUST.DATA.priRlnMgrId)
	PRINT(INTF.DATA.primaryRM)
	
	#***************FORCE LOAN CLASS(NOT REQ) ****************#
	PRINT(CUST.DATA.forceLoanCls)
	
	#********************SECTOR********************************#
	#ADD-RetCustAddRq.CustDtls.CustData.Sector
	#MAPPING THERE IN CORP ADD
	#MOD-RetCustModRq.RetCustModMainData.CustModData.Sector :
	PRINT(CUST.DATA.sector)
	INTF.DATA.sectorCode = CUST.DATA.sector
	
	
	#********************SUB SECTOR********************************#
	#ADD--RetCustAddRq.CustDtls.CustData.SubSector + CORP CIF
	#MOD--RetCustModRq.RetCustModMainData.CustModData.SubSector :
	PRINT(CUST.DATA.subSector)
	INTF.DATA.subsector = CUST.DATA.subSector
	
	
	#*******************BUSSINESS TYPE CODE(CORP)********************#
	PRINT(CUST.DATA.businessType)
	CUST.DATA.businessType  = TRIM(CUST.DATA.businessType)
	PRINT(CUST.DATA.businessType)
	PRINT(STRLEN(CUST.DATA.businessType))
	INTF.DATA.bussTypeCode = CUST.DATA.businessType
	
	
	#*************************HOME PHONE****************************#
	#RetCustModRq.RetailCustModRelatedData.DemographicModData.PhoneHome
	PRINT(CUST.DATA.homePhn)
	CUST.DATA.cust_perm_phone_num = LTRIM(CUST.DATA.homePhn,'0')
	CUST.DATA.phoneNumber1 = LTRIM(CUST.DATA.homePhn,'0')
	INTF.DATA.phoneNumber1 = CUST.DATA.phoneNumber1
	INTF.DATA.phoneType1 = "HOME" 
	PRINT(CUST.DATA.cust_perm_phone_num)
	
	IF(TRIM(CUST.DATA.homePhn) != "")THEN
	#{
		CUST.DATA.phoneCount = CINT(CUST.DATA.phoneCount) + 1
		INTF.DATA.phoneCount = CUST.DATA.phoneCount
	#}
	ENDIF
	
	
	#*************************OFFICE PHONE****************************#
	#RetCustModRq.RetailCustModRelatedData.DemographicModData.PhoneWork
	PRINT(CUST.DATA.officePhn)
	CUST.DATA.cust_emp_phone_num_1 = LTRIM(CUST.DATA.officePhn,'0')
	PRINT(CUST.DATA.cust_emp_phone_num_1)
	
	CUST.DATA.phoneNumber2 = LTRIM(CUST.DATA.officePhn,'0')
	INTF.DATA.phoneNumber2 = CUST.DATA.phoneNumber2
	INTF.DATA.phoneCntyCode2 = CUST.DATA.telCntryCode
	INTF.DATA.phoneType2 = "OFFICE"
	IF(TRIM(CUST.DATA.officePhn) != "")THEN
	#{
		CUST.DATA.phoneCount = CINT(CUST.DATA.phoneCount) + 1
		INTF.DATA.phoneCount = CUST.DATA.phoneCount
	#}
	ENDIF
	
	
	#*************************OTHER PHONE****************************#
	#RetCustModRq.RetailCustModRelatedData.DemographicModData.PhoneOther
	PRINT(CUST.DATA.othrPhn)
	CUST.DATA.cust_comu_phone_num = LTRIM(CUST.DATA.othrPhn,'0')
	CUST.DATA.phoneNumber3 = LTRIM(CUST.DATA.othrPhn,'0')
	INTF.DATA.phoneNumber3 = CUST.DATA.phoneNumber3
	INTF.DATA.phoneCntyCode3 = CUST.DATA.telCntryCode
	INTF.DATA.phoneType3 = "OTHER"
	PRINT(CUST.DATA.cust_comu_phone_num)
	
	IF(TRIM(CUST.DATA.othrPhn) != "")THEN
	#{
		CUST.DATA.phoneCount = CINT(CUST.DATA.phoneCount) + 1
		INTF.DATA.phoneCount = CUST.DATA.phoneCount
	#}
	ENDIF
	
	
	#*************************TELEPHONE COUNTRY CODE****************************#
	#RetCustModRq.RetCustModMainData.CustModData.PhoneEmailModData[0].PhoneNumCountryCode
	#ADD:RetCustAddRq.CustDtls.CustData.PhoneEmailDtls[0].PhoneNumCountryCode
	PRINT(CUST.DATA.telCntryCode)
	IF(TRIM(CUST.DATA.telCntryCode)== "")THEN
	#{
		CUST.DATA.telCntryCode = "66"
	#}
	ENDIF
	CUST.DATA.telCntryCode1 = CUST.DATA.telCntryCode
	INTF.DATA.phoneCntyCode1 = CUST.DATA.telCntryCode
	
	#*************************ELECTRONIC ADDRESS DESC****************************#
	#RetCustModRq.RetailCustModRelatedData.EntityDocModData[0].Desc
	PRINT(CUST.DATA.electronicAddr)
	#AdPrfTypeDesc
	CUST.DATA.AdPrfTypeDesc = CUST.DATA.electronicAddr
	PRINT(CUST.DATA.AdPrfTypeDesc)
	INTF.DATA.email = CUST.DATA.electronicAddr
	CUST.DATA.email = CUST.DATA.electronicAddr
	
	
	#***********************ID TYPE CODE**************************#
	#RetCustModRq.RetailCustModRelatedData.EntityDocModData[0].TypeCode
	#ADD:RetCustAddRq.RelatedDtls.EntityDoctData[0].TypeCode :(*)
	#CRMUSER.ENTITYDOCUMENT.DOCTYPECODE(75)
	### Id Proof(passport)/AdreessProof/PanDetails
	
	#crmuser.entitydocument.DOCCODE
	
	PRINT(CUST.DATA.idTypeCode)
	#AdPrfTypeCode /pan_entitydoc/IdPrfDocCode === DocCode
	CUST.DATA.DocCode = TRIM(CUST.DATA.idTypeCode)
	PRINT(CUST.DATA.DocCode)
	CUST.DATA.IdPrfDocCode = CUST.DATA.DocCode
	
	CUST.DATA.IdPrfTypeCode = CUST.DATA.DocCode
	CUST.DATA.AdPrfTypeCode = CUST.DATA.DocCode
	CUST.DATA.pan_entitydoc = CUST.DATA.DocCode
	##FOR ADD
	CUST.DATA.docTypeCode1 =TRIM(CUST.DATA.idTypeCode)
	INTF.DATA.docTypeCode1 =TRIM(CUST.DATA.idTypeCode)
	PRINT(INTF.DATA.docTypeCode1)
	INTF.DATA.docCode = CUST.DATA.DocCode
	CUST.DATA.docCode = CUST.DATA.DocCode
	
	IF(TRIM(CUST.DATA.idTypeCode) != "")THEN
	#{
		CUST.DATA.entityDocCount = CINT(CUST.DATA.entityDocCount) + 1
		INTF.DATA.docCount = CINT(INTF.DATA.docCount) + 1
	#}
	ENDIF
	PRINT(CUST.DATA.entityDocCount)
	PRINT(INTF.DATA.docCount)
	
	
	#***********************ID DESC**************************#
	#RetCustModRq.RetailCustModRelatedData.EntityDocModData[0].TypeDesc
	PRINT(CUST.DATA.idDesc)
	#IdPrfTypeDesc
	CUST.DATA.IdPrfTypeDesc = CUST.DATA.idDesc
	PRINT(CUST.DATA.IdPrfTypeDesc)
	
	
	#*************************ISSUE DATE **********************88*************#
	#RetCustModRq.RetailCustModRelatedData.EntityDocModData[0].IssueDt
	#psprt_issu_date/IdPrfIdIssueDt/AdPrfIdIssueDt
	PRINT(CUST.DATA.issueDate)
	PRINT(STRLEN(CUST.DATA.issueDate))
	
	
	
	
	#************************ID NUMBER **********************************#
	#RetCustModRq.RetailCustModRelatedData.EntityDocModData[0].EntityDocumentID
	#ADD - RetCustAddRq.RelatedDtls.EntityDoctData[0].ReferenceNum :(*) /#psprt_num
	PRINT(CUST.DATA.idNum)
	#CUST.DATA.psprt_num = CUST.DATA.idNum
	#PRINT(CUST.DATA.psprt_num)
	INTF.DATA.docRefNumber = CUST.DATA.idNum
	INTF.DATA.uniqueID1	 = CUST.DATA.idNum
	
	
	#************************ID ISSUE COUNTRY **********************************#
	#RetCustModRq.RetailCustModRelatedData.EntityDocModData[0].CountryOfIssue
	PRINT(CUST.DATA.idIssueCntryCode)
	CUST.DATA.IdPrfCountryOfIssue = CUST.DATA.idIssueCntryCode
	PRINT(CUST.DATA.IdPrfCountryOfIssue)
	##FOR ADD
	INTF.DATA.issueCountry1 = CUST.DATA.IdPrfCountryOfIssue
	PRINT(INTF.DATA.issueCountry1)
	INTF.DATA.issueCntry = CUST.DATA.IdPrfCountryOfIssue
	
	
	IF((CUST.DATA.updateFlg == "U") AND (CUST.DATA.custType == "C"))THEN
        #{
		IF(CUST.DATA.idNum == "") THEN
		#{
			lv_s = "idno|SELECT entityDocumentId FROM crmuser.entitydocument WHERE "
			lv_s = lv_s + " orgkey = ?SVAR "
			lv_s = lv_s + " AND doccode = ?SVAR "	
			print(lv_s)
			BANCS.INPARAM.BINDVARS = CUST.DATA.cifId + "|" + CUST.DATA.DocCode 
			sv_d=urhk_dbSelectWithBind(lv_s)
			IF(sv_d == 0) THEN
			#{
				sub_copyOutparamFieldB("idno","CUST","DATA","idno","")
				PRINT(CUST.DATA.idno)
				INTF.DATA.entityDocumentId = CUST.DATA.idno
			#}
			ELSE
			#{
				CUST.DATA.errorMsg = "Invalid Document Type"
				sub_genFailureLst()
				GOTO END 
			#}
			ENDIF
		#}
		ELSE
		#{
			INTF.DATA.entityDocumentId = CUST.DATA.idNum	
		#}
		ENDIF
	#}
	ENDIF
	#***************************EXPIRY DATE **************************************#
	#RetCustModRq.RetailCustModRelatedData.EntityDocModData[0].ExpDt
	PRINT(CUST.DATA.expDate)
	#psprt_exp_date
	PRINT(STRLEN(CUST.DATA.expDate))
	
	
	IF(CUST.DATA.updateFlg == "U")THEN
	#{
		#logic changed:date will be null in DB if passed null
		#IF(CUST.DATA.expDate == "31-12-2099")THEN
		IF((TRIM(CUST.DATA.expDate) == ""))THEN
		#{
			CUST.DATA.expDate = ""
			#}
		ELSE
			#{
			lv_h = "expDate|SELECT TO_CHAR(TO_DATE(?SVAR,'DD-MM-YYYY'),'YYYY-MM-DD') FROM DUAL"
			PRINT(lv_h)
			
			BANCS.INPARAM.BINDVARS = CUST.DATA.expDate
			
			sv_d=urhk_dbSelectWithBind(lv_h)
			sub_copyOutparamFieldB("expDate","CUST","DATA","expDate","")
			#CUST.DATA.expDate = BANCS.OUTPARAM.expDate
			PRINT(CUST.DATA.expDate)
			CUST.DATA.expDate = CUST.DATA.expDate +  "T00:00:00.000"
		#}
		ENDIF
	#}
	ENDIF
	
	IF(CUST.DATA.updateFlg == "N")THEN
	#{
		IF((TRIM (CUST.DATA.expDate) != ""))THEN
		#{
			lv_h = "expDate|SELECT TO_CHAR(TO_DATE(?SVAR,'DD-MM-YYYY'),'YYYY-MM-DD') FROM DUAL"
			PRINT(lv_h)
			
			BANCS.INPARAM.BINDVARS = CUST.DATA.expDate
			
			sv_d=urhk_dbSelectWithBind(lv_h)
			sub_copyOutparamFieldB("expDate","CUST","DATA","expDate","")
			#CUST.DATA.expDate = BANCS.OUTPARAM.expDate
			PRINT(CUST.DATA.expDate)
			CUST.DATA.expDate = CUST.DATA.expDate +  "T00:00:00.000"
			
			##FORADD
			INTF.DATA.expiryDate1 = CUST.DATA.expDate
			PRINT(INTF.DATA.expiryDate1)
		#}
		ENDIF
	#}
	ENDIF
	
	PRINT(CUST.DATA.expDate)
	
	#***************************TAX ID**************************************#
	PRINT(CUST.DATA.taxId)
	#INTF.DATA.taxDeductTbl = TRIM(CUST.DATA.taxId)
	INTF.DATA.taxId = CUST.DATA.taxId
	
	INTF.DATA.prefLang = "INFENG"
	#INTF.DATA.defAddrType = "Mailing"
	
	
	#@@@@@@@@@@@@@@@@@@@@@@@@@@@@ ADDRESS FIELDS STARTS @@@@@@@@@@@@@@@@@@@@@@@@@@@@@
	#AddressType:
	#		1 = registered
	#		2 = mailling
	#		3 = work
	#		4 = communication
	
	#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ SET 1 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
	#****************Address Type*************
	PRINT(CUST.DATA.addrType1)
	IF(TRIM(CUST.DATA.addrType1) != "")THEN
	#{
		CUST.DATA.modAddrCount = CINT(CUST.DATA.modAddrCount) + 1
		INTF.DATA.addrCount = CINT(INTF.DATA.addrCount) + 1
	#}
	ENDIF
	
	IF(CUST.DATA.addrType1 == "2")THEN
	#{
		INTF.DATA.addrTypeDesc1 = "MAILING"
		INTF.DATA.retDefAddrType = "Mailing"
		CUST.DATA.addrTypeDesc1 = "MAILING"
		INTF.DATA.defAddrType = "Mailing"
		INTF.DATA.retDefAddrType = "Mailing"
		CUST.DATA.defAddrType = "Mailing"
	#}
	ENDIF
	
	#****************Address*****************
	PRINT(CUST.DATA.addr1)
	##FOR ADD
	INTF.DATA.addrLine11 = MID$(CUST.DATA.addr1,0,40)
	INTF.DATA.addrLine21 = MID$(CUST.DATA.addr1,40,40)
	INTF.DATA.addrLine31 = MID$(CUST.DATA.addr1,80,40)	
	PRINT(INTF.DATA.addrLine11)
	
	
	#****************cityStateZip*****************
	PRINT(CUST.DATA.cityStateZip1)
	##FOR ADD
	INTF.DATA.city = CUST.DATA.cityStateZip1
	PRINT(INTF.DATA.city)
	INTF.DATA.addrCtyStZip1 = CUST.DATA.cityStateZip1
	PRINT(INTF.DATA.addrCtyStZip1)
	
	#****************state*****************
	PRINT(CUST.DATA.state1)
	#IF(CUST.DATA.state1 != "") THEN
	#{
		#sv_s = "FinState|"
		#sv_s = sv_s + "SELECT value"
		#sv_s = sv_s + " FROM crmuser.categories WHERE "
		#sv_s = sv_s + " categoryid in "
		#sv_s = sv_s + " (select categoryid from crmuser.category_lang where localetext=?SVAR"
		#sv_s = sv_s + " ) AND categorytype = 'STATE'"
		
		#BANCS.INPARAM.BINDVARS = CUST.DATA.state1
		#PRINT(sv_s)
		#PRINT(BANCS.INPARAM.BINDVARS)
		#sv_h = urhk_dbSelectWithBind(sv_s)
		#PRINT(sv_h)
		#IF(sv_h == 0)THEN
		#{
			#INTF.DATA.addrState1 = BANCS.OUTPARAM.FinState
			#PRINT(INTF.DATA.addrState1)
		#}
		#ELSE
		#{
			#INTF.DATA.addrState1 = "010"
			#PRINT(INTF.DATA.addrState1)
		#}
		#ENDIF
	#}
	#ENDIF
	##FOR ADD
	INTF.DATA.addrState1 = CUST.DATA.state1
	INTF.DATA.addrStateCode1 = CUST.DATA.state1
	PRINT(INTF.DATA.addrState1)
	INTF.DATA.city = INTF.DATA.addrState1
	
	#****************country*****************
	PRINT(CUST.DATA.cntry1)
	##FOR ADD
	INTF.DATA.addrCountry1 = CUST.DATA.cntry1
	PRINT(INTF.DATA.addrCountry1)
	
	#****************zipCode*****************
	PRINT(CUST.DATA.zipCode1)
	##FOR ADD
	INTF.DATA.addrZipCode1 = CUST.DATA.zipCode1
	PRINT(INTF.DATA.addrZipCode1)
	
	#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ SET 2 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
	#****************Address Type*************
	PRINT(CUST.DATA.addrType2)
	IF(TRIM(CUST.DATA.addrType2) != "")THEN
	#{
		CUST.DATA.modAddrCount = CINT(CUST.DATA.modAddrCount) + 1
		INTF.DATA.addrCount = CINT(INTF.DATA.addrCount) + 1
		#INTF.DATA.addrCount = 2
	#}
	ENDIF
	
	IF(CUST.DATA.addrType2 == "2")THEN
	#{
		INTF.DATA.addrTypeDesc2 = "MAILING"
		INTF.DATA.retDefAddrType = "Mailing"
		CUST.DATA.addrTypeDesc2 = "MAILING"
		INTF.DATA.defAddrType = "Mailing"
		CUST.DATA.defAddrType = "Mailing"
		INTF.DATA.retDefAddrType = "Mailing"
	#}
	ENDIF
	
	#****************Address*****************
	PRINT(CUST.DATA.addr2)
	##FOR ADD
	INTF.DATA.addrLine12 = MID$(CUST.DATA.addr2,0,40)
	INTF.DATA.addrLine22 = MID$(CUST.DATA.addr2,40,40)	
	INTF.DATA.addrLine32 = MID$(CUST.DATA.addr2,80,40)
	PRINT(INTF.DATA.addrLine12)
	
	
	#****************cityStateZip*****************
	PRINT(CUST.DATA.cityStateZip2)
	##FOR ADD ONLY ONE OCCURANCE
	INTF.DATA.city = CUST.DATA.cityStateZip2
	PRINT(INTF.DATA.city)
	INTF.DATA.addrCtyStZip2 = CUST.DATA.cityStateZip2
	PRINT(INTF.DATA.addrCtyStZip2)
	
	#****************state*****************
	PRINT(CUST.DATA.state2)
	##FOR ADD
	INTF.DATA.addrState2 = CUST.DATA.state2
	INTF.DATA.addrStateCode2 = CUST.DATA.state2
	PRINT(INTF.DATA.addrState2)
	#IF(CUST.DATA.state2 != "") THEN
	#{
		#sv_s = "FinState|"
		#sv_s = sv_s + "SELECT value"
		#sv_s = sv_s + " FROM crmuser.categories WHERE "
		#sv_s = sv_s + " categoryid in "
		#sv_s = sv_s + " (select categoryid from crmuser.category_lang where localetext=?SVAR"
		#sv_s = sv_s + " ) AND categorytype = 'STATE'"
		
		#BANCS.INPARAM.BINDVARS = CUST.DATA.state2
		#PRINT(sv_s)
		#PRINT(BANCS.INPARAM.BINDVARS)
		#sv_h = urhk_dbSelectWithBind(sv_s)
		#PRINT(sv_h)
		#IF(sv_h == 0)THEN
		#{
			#INTF.DATA.addrState2 = BANCS.OUTPARAM.FinState
		#}
		#ELSE
		#{
			#INTF.DATA.addrState2 = "010"
		#}
		#ENDIF
	#}
	#ENDIF
	##FOR ADD
	#INTF.DATA.addrState2 = CUST.DATA.state2
	#PRINT(INTF.DATA.addrState2)
	INTF.DATA.city = INTF.DATA.addrState2
	
	#****************country*****************
	PRINT(CUST.DATA.cntry2)
	##FOR ADD
	INTF.DATA.addrCountry2 = CUST.DATA.cntry2
	PRINT(INTF.DATA.addrCountry2)
	
	#****************zipCode*****************
	PRINT(CUST.DATA.zipCode2)
	##FOR ADD
	INTF.DATA.addrZipCode2 = CUST.DATA.zipCode2
	PRINT(INTF.DATA.addrZipCode2)
	
	#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ SET 3 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
	#****************Address Type*************
	PRINT(CUST.DATA.addrType3)
	IF(TRIM(CUST.DATA.addrType3) != "")THEN
	#{
		CUST.DATA.modAddrCount = CINT(CUST.DATA.modAddrCount) + 1
		INTF.DATA.addrCount = CINT(INTF.DATA.addrCount) + 1
		#INTF.DATA.addrCount = 3
	#}
	ENDIF
	
	IF(CUST.DATA.addrType3 == "2")THEN
	#{
		INTF.DATA.addrTypeDesc2 = "MAILING"
		INTF.DATA.retDefAddrType = "Mailing"
		CUST.DATA.addrTypeDesc2 = "MAILING"
		INTF.DATA.defAddrType = "Mailing"
		CUST.DATA.defAddrType = "Mailing"
		INTF.DATA.retDefAddrType = "Mailing"
	#}
	ENDIF
	
	#****************Address*****************
	PRINT(CUST.DATA.addr3)
	##FOR ADD
	INTF.DATA.addrLine13 = MID$(CUST.DATA.addr3,0,40)
	INTF.DATA.addrLine23 = MID$(CUST.DATA.addr3,40,40)
	INTF.DATA.addrLine33 = MID$(CUST.DATA.addr3,80,40)
	PRINT(INTF.DATA.addrLine13)
	
	
	#****************cityStateZip*****************
	PRINT(CUST.DATA.cityStateZip3)
	##FOR ADD
	INTF.DATA.city = CUST.DATA.cityStateZip3
	PRINT(INTF.DATA.city)
	INTF.DATA.addrCtyStZip3 = CUST.DATA.cityStateZip3
	PRINT(INTF.DATA.addrCtyStZip3)
	
	#****************state*****************
	PRINT(CUST.DATA.state3)
	##FOR ADD
	INTF.DATA.addrState3 = CUST.DATA.state3
	INTF.DATA.addrStateCode3 = CUST.DATA.state3
	PRINT(INTF.DATA.addrState3)
	#IF(CUST.DATA.state3 != "") THEN
	#{
		#sv_s = "FinState|"
		#sv_s = sv_s + "SELECT value"
		#sv_s = sv_s + " FROM crmuser.categories WHERE "
		#sv_s = sv_s + " categoryid in "
		#sv_s = sv_s + " (select categoryid from crmuser.category_lang where localetext=?SVAR"
		#sv_s = sv_s + " ) AND categorytype = 'STATE'"
		
		#BANCS.INPARAM.BINDVARS = CUST.DATA.state3
		#PRINT(sv_s)
		#PRINT(BANCS.INPARAM.BINDVARS)
		#sv_h = urhk_dbSelectWithBind(sv_s)
		#PRINT(sv_h)
		#IF(sv_h == 0)THEN
		#{
			#INTF.DATA.addrState3 = BANCS.OUTPARAM.FinState
		#}
		#ELSE
		#{
			#INTF.DATA.addrState3 = "010"
		#}
		#ENDIF
	#}
	#ENDIF
	##FOR ADD
	#INTF.DATA.addrState3 = CUST.DATA.state3
	#PRINT(INTF.DATA.addrState3)
	INTF.DATA.city = INTF.DATA.addrState3
	
	#****************country*****************
	PRINT(CUST.DATA.cntry3)
	##FOR ADD
	INTF.DATA.addrCountry3 = CUST.DATA.cntry3
	PRINT(INTF.DATA.addrCountry3)
	
	#****************zipCode*****************
	PRINT(CUST.DATA.zipCode3)
	##FOR ADD
	INTF.DATA.addrZipCode3 = CUST.DATA.zipCode3
	PRINT(INTF.DATA.addrZipCode3)
	
	
	#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ SET 4 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
	#****************Address Type*************
	PRINT(CUST.DATA.addrType4)
	IF(TRIM(CUST.DATA.addrType4) != "")THEN
	#{
		CUST.DATA.modAddrCount = CINT(CUST.DATA.modAddrCount) + 1
		INTF.DATA.addrCount = CINT(INTF.DATA.addrCount) + 1
		#INTF.DATA.addrCount = 4
	#}
	ENDIF
	
	IF(CUST.DATA.addrType4 == "2")THEN
	#{
		INTF.DATA.addrTypeDesc4 = "MAILING"
		INTF.DATA.retDefAddrType = "Mailing"
		CUST.DATA.addrTypeDesc4 = "MAILING"
		INTF.DATA.defAddrType = "Mailing"
		CUST.DATA.defAddrType = "Mailing"
		INTF.DATA.retDefAddrType = "Mailing"
	#}
	ENDIF
	
	#****************Address*****************
	PRINT(CUST.DATA.addr4)
	##FOR ADD
	INTF.DATA.addrLine14 = MID$(CUST.DATA.addr4,0,40)
	INTF.DATA.addrLine24 = MID$(CUST.DATA.addr4,40,40)
	INTF.DATA.addrLine34 = MID$(CUST.DATA.addr4,80,40)
	PRINT(INTF.DATA.addrLine14)
	
	
	#****************cityStateZip*****************
	PRINT(CUST.DATA.cityStateZip4)
	##FOR ADD
	INTF.DATA.city = CUST.DATA.cityStateZip4
	PRINT(INTF.DATA.city)
	INTF.DATA.addrCtyStZip4 = CUST.DATA.cityStateZip4
	PRINT(INTF.DATA.addrCtyStZip4)
	
	#****************state*****************
	PRINT(CUST.DATA.state4)
	##FOR ADD
	INTF.DATA.addrState4 = CUST.DATA.state4
	INTF.DATA.addrStateCode4 = CUST.DATA.state4
	PRINT(INTF.DATA.addrState4)
	#IF(CUST.DATA.state4 != "") THEN
	#{
		#sv_s = "FinState|"
		#sv_s = sv_s + "SELECT value"
		#sv_s = sv_s + " FROM crmuser.categories WHERE "
		#sv_s = sv_s + " categoryid in "
		#sv_s = sv_s + " (select categoryid from crmuser.category_lang where localetext=?SVAR"
		#sv_s = sv_s + " ) AND categorytype = 'STATE'"
		
		#BANCS.INPARAM.BINDVARS = CUST.DATA.state4
		#PRINT(sv_s)
		#PRINT(BANCS.INPARAM.BINDVARS)
		#sv_h = urhk_dbSelectWithBind(sv_s)
		#PRINT(sv_h)
		#IF(sv_h == 0)THEN
		#{
			#INTF.DATA.addrState4 = BANCS.OUTPARAM.FinState
		#}
		#ELSE
		#{
			#INTF.DATA.addrState4 = "010"
		#}
		#ENDIF
	#}
	#ENDIF
	##FOR ADD
	#INTF.DATA.addrState1 = CUST.DATA.state1
	PRINT(INTF.DATA.addrState4)
	INTF.DATA.city = INTF.DATA.addrState4
	
	#****************country*****************
	PRINT(CUST.DATA.cntry4)
	##FOR ADD
	INTF.DATA.addrCountry4 = CUST.DATA.cntry4
	PRINT(INTF.DATA.addrCountry4)
	
	#****************zipCode*****************
	PRINT(CUST.DATA.zipCode4)
	##FOR ADD
	INTF.DATA.addrZipCode4 = CUST.DATA.zipCode4
	PRINT(INTF.DATA.addrZipCode4)
	
	#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ SET 5 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~#
	#****************Address Type*************
	PRINT(CUST.DATA.addrType5)
	IF(TRIM(CUST.DATA.addrType5) != "")THEN
	#{
		CUST.DATA.modAddrCount = CINT(CUST.DATA.modAddrCount) + 1
		INTF.DATA.addrCount = CINT(INTF.DATA.addrCount) + 1
		#INTF.DATA.addrCount = 5
	#}
	ENDIF
	
	IF(CUST.DATA.addrType5 == "2")THEN
	#{
		INTF.DATA.addrTypeDesc5 = "MAILING"
		INTF.DATA.retDefAddrType = "Mailing"
		CUST.DATA.addrTypeDesc5 = "MAILING"
		INTF.DATA.defAddrType = "Mailing"
		CUST.DATA.defAddrType = "Mailing"
		INTF.DATA.retDefAddrType = "Mailing"
	#}
	ENDIF
	
	#****************Address*****************
	PRINT(CUST.DATA.addr5)
	##FOR ADD
	INTF.DATA.addrLine15 = MID$(CUST.DATA.addr5,0,40)
	INTF.DATA.addrLine25 = MID$(CUST.DATA.addr5,40,40) 
	INTF.DATA.addrLine35 = MID$(CUST.DATA.addr5,80,40)
	PRINT(INTF.DATA.addrLine15)
	
	
	#****************cityStateZip*****************
	PRINT(CUST.DATA.cityStateZip5)
	##FOR ADD
	INTF.DATA.addrCtyStZip4 = CUST.DATA.cityStateZip4
	PRINT(INTF.DATA.addrCtyStZip4)
	
	#****************state*****************
	PRINT(CUST.DATA.state5)
	##FOR ADD
	INTF.DATA.addrState5 = CUST.DATA.state5
	INTF.DATA.addrStateCode5 = CUST.DATA.state5
	PRINT(INTF.DATA.addrState5)
	#IF(CUST.DATA.state5 != "") THEN
	#{
		#sv_s = "FinState|"
		#sv_s = sv_s + "SELECT value"
		#sv_s = sv_s + " FROM crmuser.categories WHERE "
		#sv_s = sv_s + " categoryid in "
		#sv_s = sv_s + " (select categoryid from crmuser.category_lang where localetext=?SVAR"
		#sv_s = sv_s + " ) AND categorytype = 'STATE'"
		
		#BANCS.INPARAM.BINDVARS = CUST.DATA.state5
		#PRINT(sv_s)
		#PRINT(BANCS.INPARAM.BINDVARS)
		#sv_h = urhk_dbSelectWithBind(sv_s)
		#PRINT(sv_h)
		#IF(sv_h == 0)THEN
		#{
			#INTF.DATA.addrState5 = BANCS.OUTPARAM.FinState
		#}
		#ELSE
		#{
			#INTF.DATA.addrState5 = "010"
		#}
		#ENDIF
	#}
	#ENDIF
	##FOR ADD
	#INTF.DATA.addrState1 = CUST.DATA.state1
	PRINT(INTF.DATA.addrState5)
	INTF.DATA.city = INTF.DATA.addrState5
	
	
	#****************country*****************
	PRINT(CUST.DATA.cntry5)
	##FOR ADD
	INTF.DATA.addrCountry5 = CUST.DATA.cntry5
	PRINT(INTF.DATA.addrCountry5)
	
	#****************zipCode*****************
	PRINT(CUST.DATA.zipCode5)
	##FOR ADD
	INTF.DATA.addrZipCode5 = CUST.DATA.zipCode5
	PRINT(INTF.DATA.addrZipCode5)
	
	#@@@@@@@@@@@@@@@@@@@@@@@@@@@@ ADDRESS FIELDS ENDS @@@@@@@@@@@@@@@@@@@@@@@@@@@@@
	
	##*******************TRADE FINANCE FLG **************************###
	#RetCustModRq.RetCustModMainData.CustModData.TradeFinFlag
	PRINT(CUST.DATA.TFflg)
	CUST.DATA.TradeFinance = CUST.DATA.TFflg
	PRINT(CUST.DATA.TradeFinance)
	##FOR ADD
	INTF.DATA.tradeCustFlag = CUST.DATA.TradeFinance
	PRINT(INTF.DATA.tradeCustFlag)
	
	
	##*******************TS  FLG **************************###
	##NOT YET EXPOSED IN FI FOR CORP + RET
	PRINT(CUST.DATA.TSflg)
	INTF.DATA.treasuryCustFlag = CUST.DATA.TSflg
	
	
	##*******************CUST TYPE **************************###
	#RetCustModRq.RetCustModMainData.CustModData.CustType
	PRINT(CUST.DATA.custType)
	
	IF(CUST.DATA.custType == "C")THEN
	#{
		INTF.DATA.custType = "RETAIL"
		INTF.DATA.defAddrType = "Mailing"
		INTF.DATA.retDefAddrType = "Mailing"
		CUST.DATA.defAddrType = "Mailing"
	#}
	ENDIF
	IF(CUST.DATA.custType == "B")THEN
	#{
		INTF.DATA.custType = "CORPORATE"
		INTF.DATA.defAddrType = "COMUNICATION"
		INTF.DATA.retDefAddrType = "COMUNICATION"
		CUST.DATA.defAddrType = "COMUNICATION"
	#}
	ENDIF
	
	
	##*******************CLASS CODE(For CORP ) **************************###
	PRINT(CUST.DATA.classCode)
	INTF.DATA.custClassCode = CUST.DATA.classCode
	
	
	##*******************CLASS CODE DESC **************************###
	PRINT(CUST.DATA.classCodeDesc)
	
	
	##*******************TITLE **************************###
	#RetCustModRq.RetCustModMainData.CustModData.NativeLanguageTitle
	PRINT(CUST.DATA.titleNativ)
	## FOR ADD -tag:/NativeLanguageTitle
	INTF.DATA.title = TRIM(CUST.DATA.titleNativ)
	PRINT(INTF.DATA.title)
	
	
	##*******************FIRST NAME **************************###
	#RetCustModRq.RetCustModMainData.CustModData.FirstNameNative
	PRINT(CUST.DATA.firstNameNativ)
	
	
	##*******************LAST NAME **************************###
	#RetCustModRq.RetCustModMainData.CustModData.LastNameNative
	PRINT(CUST.DATA.lastNameNativ)
	
	
	##*******************ALIAS NAME **************************###
	#RetCustModRq.RetCustModMainData.CustModData.NickName
	PRINT(CUST.DATA.aliasName)
	CUST.DATA.nickName = TRIM(CUST.DATA.aliasName)
	PRINT(CUST.DATA.nickName)
	CUST.DATA.corpShortNatv = TRIM(MID$((CUST.DATA.aliasName),0,10))
	
	##******************* GENDER **************************###
	#RetCustModRq.RetCustModMainData.CustModData.Gender
	PRINT(CUST.DATA.gender)
	CUST.DATA.cust_gender = CUST.DATA.gender
	PRINT(CUST.DATA.cust_gender)
	##FOR ADD
	INTF.DATA.gender = CUST.DATA.gender
	PRINT(INTF.DATA.gender)
	
	
	##******************* DATE OF BIRTH **************************###
	#RetCustModRq.RetCustModMainData.CustModData.DateOfBirth
	#comes in format "yyyy-mm-dd"..FI will take as dd-mm-yyyy
	PRINT(CUST.DATA.birthDateInp)
	PRINT(STRLEN(CUST.DATA.birthDateInp))
	
	#auto updates to this date if date is passed as NULL in batchUpload.txt
	IF(CUST.DATA.birthDateInp == "31-12-2099")THEN
	#{
		CUST.DATA.birthDateInp = ""
	#}
	ENDIF
	
	#auto updates to this date if date is passed as NULL in txt
	#Siri Correction
	IF(TRIM(CUST.DATA.birthDateInp) == "")THEN
	#{
		CUST.DATA.birthDateInp = "01-01-1900"
	#}
	ENDIF
	##******************TO GET MINOR_FLG VALUE FOR RETCUSTADD ONLY**************************###
	
	IF(CUST.DATA.updateFlg == "N")THEN
	#{
		fv_m = func_deriveMinorFlg(CUST.DATA.birthDateInp)
		PRINT(fv_m)
		INTF.DATA.isMinor = fv_m
	#}
	ENDIF
	
	PRINT(CUST.DATA.birthDateInp)
	IF((TRIM (CUST.DATA.birthDateInp) == ""))THEN
	#{
		CUST.DATA.birthDate = "1900-01-01" +  "T00:00:00.000"
		PRINT(CUST.DATA.birthDate)
		CUST.DATA.birthDateInp = CUST.DATA.birthDate
	#}
	ELSE
	#{
		lv_h = "birthDate|SELECT TO_CHAR(TO_DATE(?SVAR,'DD-MM-YYYY'),'YYYY-MM-DD') FROM DUAL"
		PRINT(lv_h)
		
		BANCS.INPARAM.BINDVARS = CUST.DATA.birthDateInp
		
		sv_d=urhk_dbSelectWithBind(lv_h)
		sub_copyOutparamFieldB("birthDate","CUST","DATA","birthDate","")
		#CUST.DATA.birthDate = BANCS.OUTPARAM.birthDate
		CUST.DATA.birthDate = CUST.DATA.birthDate +  "T00:00:00.000"
		PRINT(CUST.DATA.birthDate)
	#}
	ENDIF
	
	PRINT(CUST.DATA.birthDate)
	## FOR ADD
	INTF.DATA.birthDate = CUST.DATA.birthDate
	PRINT(INTF.DATA.birthDate)
	
	##******************* NON RESIDENT FLG #<IsCustNRE>**************************###
	PRINT(CUST.DATA.nonResidentFlg)
	CUST.DATA.cust_nre_flg = CUST.DATA.nonResidentFlg
	PRINT(CUST.DATA.cust_nre_flg)
	## FOR ADD
	INTF.DATA.nonResInd = CUST.DATA.cust_nre_flg
	PRINT(INTF.DATA.nonResInd)
	
	#************************* NATIONALITY **************************#
	#RetCustModRq.RetailCustModRelatedData.DemographicModData.Nationality
	PRINT(CUST.DATA.nationality)
	CUST.DATA.NATIONALITY = CUST.DATA.nationality
	PRINT(CUST.DATA.NATIONALITY)
	#CUST.DATA.cust_nre_flg = CUST.DATA.NATIONALITY
	##FOR ADD
	INTF.DATA.nationality = CUST.DATA.nationality
	PRINT(INTF.DATA.nationality)
	
	#************************* MARITAL STATUS ************************#
	#RetCustModRq.RetailCustModRelatedData.DemographicModData.MaritalStatus :
	PRINT(CUST.DATA.maritalStatus)
	
	CUST.DATA.marital_status = CUST.DATA.maritalStatus
	PRINT(CUST.DATA.marital_status)
	##FOR ADD
	INTF.DATA.martialStCode = CUST.DATA.maritalStatus
	PRINT(INTF.DATA.martialStCode)
	
	#************************* MARITAL STATUS DESC ************************#
	PRINT(CUST.DATA.maritalStatusDesc)
	
	#***************************HOLD MAIL INDICATOR ****************************#
	#as per excel needs to be mapped to DemographicModData Tag
	#RetCustModRq.RetailCustModRelatedData.DemographicModData.HoldMailFlag
	PRINT(CUST.DATA.holdMailInd)
	CUST.DATA.demoHoldMailFlg = CUST.DATA.holdMailInd
	PRINT(CUST.DATA.demoHoldMailFlg)
	##FOR ADD
	INTF.DATA.holdMailInd = CUST.DATA.holdMailInd
	PRINT(INTF.DATA.holdMailInd)
	INTF.DATA.addrHoldMail = CUST.DATA.holdMailInd
	
	
	#***************************OTHEER NAME ****************************#
	PRINT(CUST.DATA.otherName)
	INTF.DATA.otherName = CUST.DATA.otherName
	
	IF(TRIM(INTF.DATA.otherName) == "")THEN
	#{
		CUST.DATA.otherName = TRIM(MID$((CUST.DATA.shortName),0,10))
		INTF.DATA.otherName = TRIM(MID$((CUST.DATA.shortName),0,10))
	#}
	ENDIF
	PRINT(INTF.DATA.otherName)
	
	
	#***************************RELATIONSHIP CIF(CORP) "<relationship_createdby>****************************#
	PRINT(CUST.DATA.rlnshpCIF)
	INTF.DATA.relCrBy = CUST.DATA.rlnshpCIF
	INTF.DATA.corpRelCIF = CUST.DATA.rlnshpCIF
	
	#***************************RELATIONSHIP TYPE ****************************#
	PRINT(CUST.DATA.rlnshpType)
	INTF.DATA.relType = CUST.DATA.rlnshpType
	INTF.DATA.corpRelType = CUST.DATA.rlnshpType
	
	
	
	#***************************INCORPORATION DATE  ****************************#
	PRINT(CUST.DATA.incorpDate)
	PRINT(CUST.DATA.birthDate)
	
	#THIS DATE CAN BE BLANK FOR UPDATE- USER's WISH
	IF(CUST.DATA.updateFlg == "U")THEN
	#{
		#auto updates to this date 31-DEC-99 if date is passed as NULL in txt--this logic is changed now! table wil also have null
		#IF(CUST.DATA.incorpDate == "31-DEC-99")THEN
		IF((TRIM (CUST.DATA.incorpDate) == ""))THEN
		#{
			CUST.DATA.incorpDate = INTF.DATA.DOB1
			#}
		ELSE
			#{
			lv_h = "incorpDate|SELECT TO_CHAR(TO_DATE(?SVAR,'DD-MM-YYYY'),'YYYY-MM-DD') FROM DUAL"
			PRINT(lv_h)
			
			BANCS.INPARAM.BINDVARS = CUST.DATA.incorpDate
			
			sv_d=urhk_dbSelectWithBind(lv_h)
			sub_copyOutparamFieldB("incorpDate","CUST","DATA","incorpDate","")
			#CUST.DATA.incorpDate = BANCS.OUTPARAM.incorpDate
			CUST.DATA.incorpDate = CUST.DATA.incorpDate +  "T00:00:00.000"
			PRINT(CUST.DATA.incorpDate)
		#}
		ENDIF
	#}
	ENDIF
	
	IF(CUST.DATA.updateFlg == "N")THEN
	#{
		IF((TRIM (CUST.DATA.incorpDate) == ""))THEN
		#{
			CUST.DATA.incorpDate = CUST.DATA.birthDate
			PRINT(CUST.DATA.incorpDate)
			#}
		ELSE
			#{
			lv_h = "incorpDate|SELECT TO_CHAR(TO_DATE(?SVAR,'DD-MM-YYYY'),'YYYY-MM-DD') FROM DUAL"
			PRINT(lv_h)
			
			BANCS.INPARAM.BINDVARS = CUST.DATA.incorpDate
			
			sv_d=urhk_dbSelectWithBind(lv_h)
			sub_copyOutparamFieldB("incorpDate","CUST","DATA","incorpDate","")
			#CUST.DATA.incorpDate = BANCS.OUTPARAM.incorpDate
			CUST.DATA.incorpDate = CUST.DATA.incorpDate +  "T00:00:00.000"
			PRINT(CUST.DATA.incorpDate)
			INTF.DATA.incorpDate = CUST.DATA.incorpDate
		#}
		ENDIF
	#}
	ENDIF
	
	PRINT(CUST.DATA.incorpDate)
	PRINT(INTF.DATA.incorpDate)
	
	IF(CUST.DATA.updateFlg == "U")THEN
	#{
		#auto updates to this date if date is passed as NULL in txt
		#Logic changed: date will be NULL in DB if passed as NULL
		#IF(CUST.DATA.issueDate == "31-12-2099")THEN
		print(CUST.DATA.issueDate)
		IF((TRIM(CUST.DATA.issueDate) == ""))THEN
		#{
			IF(CUST.DATA.idNum != "") THEN
			#{
				IF(CUST.DATA.custType == "B") THEN
				#{
					CUST.DATA.issueDate = CUST.DATA.incorpDate
				#}
				ELSE
				#{
					CUST.DATA.issueDate = CUST.DATA.birthDate
				#}
				ENDIF
				CUST.DATA.psprt_issu_date = CUST.DATA.issueDate
				CUST.DATA.IdPrfIdIssueDt = CUST.DATA.issueDate
				CUST.DATA.AdPrfIdIssueDt = CUST.DATA.issueDate
			#}
			ELSE
			#{
				CUST.DATA.issueDate = ""
			#}
			ENDIF
		#}
		ELSE
		#{
			#lv_h = "issueDate|SELECT TO_CHAR(TO_DATE(?SVAR,'DD-MM-YYYY'),'YYYY-MM-DD') FROM DUAL"
			#PRINT(lv_h)

			#BANCS.INPARAM.BINDVARS = CUST.DATA.issueDate

			#sv_d=urhk_dbSelectWithBind(lv_h)
			#sub_copyOutparamFieldB("issueDate","CUST","DATA","issueDate","")
			#CUST.DATA.issueDate = BANCS.OUTPARAM.issueDate
			#PRINT(CUST.DATA.issueDate)
			CUST.DATA.issueDate = CUST.DATA.issueDate +  "T00:00:00.000"
			PRINT(CUST.DATA.issueDate)
			CUST.DATA.psprt_issu_date = CUST.DATA.issueDate
			CUST.DATA.IdPrfIdIssueDt = CUST.DATA.issueDate
			CUST.DATA.AdPrfIdIssueDt = CUST.DATA.issueDate
		#}
		ENDIF
	#}
	ENDIF
	
	IF(CUST.DATA.updateFlg == "N")THEN
	#{
		#Logic changed: date will be NULL in DB if passed as NULL
		#IF(CUST.DATA.issueDate == "31-12-2099")THEN
		IF((TRIM(CUST.DATA.issueDate) == ""))THEN
		#{
			IF(CUST.DATA.custType == "B") THEN
			#{
				CUST.DATA.issueDate = CUST.DATA.incorpDate
			#}
			ELSE
			#{
				CUST.DATA.issueDate = CUST.DATA.birthDate
			#}
			ENDIF
		#}
		ELSE
		#{
			IF((TRIM(CUST.DATA.issueDate) != ""))THEN
			#{
				#lv_h = "issueDate|SELECT TO_CHAR(TO_DATE(?SVAR,'DD-MM-YYYY'),'YYYY-MM-DD') FROM DUAL"
				#PRINT(lv_h)
				
				#BANCS.INPARAM.BINDVARS = CUST.DATA.issueDate
				
				#sv_d=urhk_dbSelectWithBind(lv_h)
				#sub_copyOutparamFieldB("issueDate","CUST","DATA","issueDate","")
				#CUST.DATA.issueDate = BANCS.OUTPARAM.issueDate
				#PRINT(CUST.DATA.issueDate)
				CUST.DATA.issueDate = CUST.DATA.issueDate +  "T00:00:00.000"
				PRINT(CUST.DATA.issueDate)
				CUST.DATA.psprt_issu_date = CUST.DATA.issueDate
				CUST.DATA.IdPrfIdIssueDt = CUST.DATA.issueDate
				CUST.DATA.AdPrfIdIssueDt = CUST.DATA.issueDate
				
				##FOR ADD
				INTF.DATA.issueDate1 = CUST.DATA.issueDate
				PRINT(INTF.DATA.issueDate1)
			#}
			ENDIF
			
		#}
		ENDIF
	#}
	ENDIF
	
	PRINT(CUST.DATA.issueDate)
	INTF.DATA.issueDate = CUST.DATA.issueDate
	INTF.DATA.issueDate1 = CUST.DATA.issueDate
	
	
	#***************************INCORPORATION COUNTRY  ****************************#
	PRINT(CUST.DATA.incorpCntry)
	INTF.DATA.incorpCountry	 = CUST.DATA.incorpCntry
	
	#***************************ULITIMATE RISK COUNTRY ****************************#
	PRINT(CUST.DATA.ultimateRiskCntry)
	INTF.DATA.ultRiskCountry = CUST.DATA.ultimateRiskCntry
	
	#***************************CUSTOMER RATIN ****************************#
	PRINT(CUST.DATA.custRating)
	INTF.DATA.custRatCode = CUST.DATA.custRating
	
	#***************************CUSTOMER RATING DESC ****************************#
	PRINT(CUST.DATA.custRatingDesc)
	INTF.DATA.custRatDesc = CUST.DATA.custRatingDesc
	
	#CALL THE SCRIPT THAT DOES ADDRESS CLASSIFICATIONS
	CALL("LHCIF_AddressDtls.scr")
	PRINT("AFTER CALL OF CIF ADDRESS CLASSIFICATIONS ")
	PRINT(INTF.DATA.addrCount)
	PRINT(CUST.DATA.modAddrCount)
	
	IF(TRIM(CUST.DATA.custType) == "")THEN
	#{
		CUST.DATA.errorMsg = "Customer Type is a mandatory Input for API Invocation "
		sub_genFailureLst()
		GOTO END
	#}
	ENDIF
	
	#	IF((TRIM(CUST.DATA.TFflg) == "N") AND (TRIM(CUST.DATA.TSflg) == "N")) THEN
	#	#{
	#		CUST.DATA.errorMsg = "Not a valid Trade Finance customer"
	#		sub_genFailureLst()
	#		GOTO END
	#	#}
	#	ENDIF
	
	
	IF((CUST.DATA.TFflg == "Y") OR (CUST.DATA.TSflg == "Y")) THEN
	#{
		PRINT("when one of the them is Y--calls API")
		GOTO APICALLS
		#}
	ELSE
		#{
		CUST.DATA.errorMsg  = "Customer not availed for TF/TS"
		sub_genFailureLst()
		GOTO END
	#}
	ENDIF
	
	APICALLS:
		#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~###
		###					 CALL FUNCTION TO MODIFY  CIF DETAILS
		#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~###
		IF(CUST.DATA.updateFlg == "U")THEN
		#{
			IF((CUST.DATA.custType) == "B")THEN
			#{
				PRINT("TO CALL CORPORATE API")
				CUST.DATA.srvReqId  = "updateCorpCustomer"
				CUST.DATA.custType = "CORPORATE"
				
				sv_r = func_modifyUplCIFCorp("CUST","DATA")
				CUST.DATA.modifyStatus = sv_r
			#}
			ENDIF
			
			IF((CUST.DATA.custType) == "C")THEN
			#{
				PRINT("TO CALL RETAIL API")
				CUST.DATA.srvReqId  = "RetCustMod"
				CUST.DATA.custType = "RETAIL"
				
				sv_r = func_modifyUplCIFRet("CUST","DATA")
				PRINT(sv_r)
				CUST.DATA.modifyStatus = sv_r
			#}
			ENDIF
			
			
			IF(CUST.DATA.modifyStatus != 0)THEN
			#{
				#MOVE TO FAILURE LST
				PRINT(CUST.DATA.errorMsg)
				PRINT(CUST.DATA.errorFlg)
				sub_genFailureLst()
				#}
			ELSE
				#{
				#MOVE TO SUCCESS LST
				CUST.DATA.SuccessMsg = "CIF Modified Successfully"
				sub_genSuccessLst()
				
			#}
			ENDIF
			
			
		#}
		ENDIF
		
		#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~###
		###					 CALL FUNCTION TO ADD CORP CIF DETAILS
		#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~###
		
		IF(CUST.DATA.updateFlg == "N")THEN
		#{
			IF((CUST.DATA.custType) == "B")THEN
			#{
				PRINT("TO CALL CORPORATE API")
				INTF.DATA.srvReqId  = "createCorporateCustomer"
				INTF.DATA.custType = "CORPORATE"
			#}
			ENDIF
			
			IF((CUST.DATA.custType) == "C")THEN
			#{
				PRINT("TO CALL RETAIL API")
				INTF.DATA.srvReqId  = "RetCustAdd"
				INTF.DATA.custType = "RETAIL"
			#}
			ENDIF
			
			
			#BELOW SUB IS FROM LIABLITIES TEAM-JYOTI.This is defined in CIFCommonFunctions.scl
			sub_createCIFAdd("INTF","DATA")
			
			PRINT("BACK FROM CREATE CIF SCL")
			PRINT(BANCS.OUTPARAM.RespMesg)
			
			CUST.DATA.responseXml = BANCS.OUTPARAM.RespMesg
			
			#xmlParseFunc1 defined above
			sv_e = func_xmlParseFunc1(CUST.DATA.responseXml,"<Status>","</Status>",BYREF CUST.DATA.FIStatus)
			PRINT(CUST.DATA.FIStatus)
			
			IF(TOUPPER(CUST.DATA.FIStatus) == "SUCCESS") THEN
			#{
				IF(INTF.DATA.custType == "CORPORATE")THEN
				#{
					sv_e = func_xmlParseFunc1(CUST.DATA.responseXml,"<cifid>","</cifid>",BYREF CUST.DATA.genCifId)
					PRINT(CUST.DATA.genCifId)
					CUST.DATA.SuccessMsg = "Corporate  Customer successfully created"
				#}
				ENDIF
				
				IF(INTF.DATA.custType == "RETAIL")THEN
				#{
					sv_e = func_xmlParseFunc1(CUST.DATA.responseXml,"<CustId>","</CustId>",BYREF CUST.DATA.genCifId)
					PRINT(CUST.DATA.genCifId)
					CUST.DATA.SuccessMsg = " Retail Customer successfully created"
				#}
				ENDIF
				
				PRINT(CUST.DATA.genCifId)
				CUST.DATA.cifId = CUST.DATA.genCifId
				
				## TO VERIFY CIF BASED ON TF_FLG ##
				sv_e = func_CIFVerify("CUST","DATA")
				PRINT(sv_e)
				
				IF(sv_e == 0)THEN
				#{
					CUST.DATA.errorFlg  = "N"
					CUST.DATA.cifId = CUST.DATA.genCifId
					
				#}
				ENDIF
				
				
				#}
			ELSE
				#{
				sv_e = func_xmlParseFunc1(CUST.DATA.responseXml,"<ErrorDesc>","</ErrorDesc>",BYREF CUST.DATA.errorMsg)
				PRINT( CUST.DATA.errorMsg)
				CUST.DATA.errorFlg = "Y"
			#}
			ENDIF
			
			
			PRINT(CUST.DATA.errorMsg)
			PRINT(CUST.DATA.errorFlg)
			
			
			#IF(sv_r != 0)THEN
			IF((CUST.DATA.errorFlg == "Y")) THEN
			#{
				sub_genFailureLst()
				#GOTO END
				
			#}
			ENDIF
			
			IF((CUST.DATA.errorFlg != "Y")) THEN
			#{
				#MOVE TO SUCCESS LST
				sub_genSuccessLst()
			#}
			ENDIF
		#}
		ENDIF
		
		#### UPDATE PROCESSED_FLG='Y' FOR THAT RECORD ###
	END:
		CUST.DATA.mainTable = "CUSTOM.LHCIF_UPLOAD"
		CUST.DATA.updateFields = "PROCESSED_FLG"
		CUST.DATA.updateValues = "Y"
		CUST.DATA.keyFields = "UPLOAD_REC_SRL_NUM"
		CUST.DATA.keyValues =  CUST.BATCH.RecSrlNum
		
		sv_d = func_updateCustTableB(CUST.DATA.mainTable,CUST.DATA.updateFields,CUST.DATA.updateValues,CUST.DATA.keyFields,CUST.DATA.keyValues)
		PRINT(sv_d)
		
		
		#END:
		PRINT("AT END OF MY BATCH FILE")
		
	#}
	ENDSUB
	
<--START
END-->
