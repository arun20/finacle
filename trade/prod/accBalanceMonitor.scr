#============================================================
# IMPORTANT: Auto Generated Header. DO NOT CHANGE MANUALLY.
# Product: Finacle Core
# Category: User Defined
# Script: accBalanceMonitor.scr
# Type: NA|default
# Description: Customer Level Account Balance Monitoring
# Author: Lijo_Thomas
# Date: 6/14/18 6:20 PM
# Modification Log:
#============================================================
IMPORT LibAcctBalMonitor
<--START
CHECKSUM="9d0cd1596b13e7e68f9f76b09dff81629689319f5b3eaad4370727d982fdd242"
	# Script body goes here
	TRACE ON
	
	
	#-------------------------------------------------------------------------#
	# Allowed menus - HIRM, MEBO, MTFT
	#-------------------------------------------------------------------------#
	sv_m = BANCS.STDIN.menuId
	PRINT(sv_m)
	
	IF ((sv_m != "HIRM") AND (sv_m != "MEOB") AND (sv_m != "MTFT") ) THEN
	#{
		EXITSCRIPT
	#}
	ENDIF
	
	
	#-----------------------------------------------------#
	#   CREATION OF REPOSITORY AND CLASS
	#-----------------------------------------------------#
	sub_createRepClassB("CUST", "DATA")
	
	#-----------------------------------------------------#
	# Variable Initialization
	#-----------------------------------------------------#
	
	CUST.DATA.BODDate = MID$(BANCS.STDIN.BODDate,0,10)
	CUST.DATA.totalClearBal = ""
	CUST.DATA.currTranAmt = 0
	CUST.DATA.otherCurrTran = ""
	CUST.DATA.debitTranAmt = ""
	CUST.DATA.maxLimit = ""
	CUST.DATA.currCodeOut = ""
	CUST.DATA.custBalLimit  = ""
	CUST.DATA.exceptionCode = ""
	CUST.DATA.totDebitBal   = 0
	CUST.DATA.totalClearCreditBal = 0
	CUST.DATA.custId = ""
	CUST.DATA.drAmount = 0
	CUST.DATA.crAmount = 0
	CUST.DATA.menuId = sv_m
	
	
	
	#-----------------------------------------------------#
	# Fetching Values
	#-----------------------------------------------------#
	
	
	sv_s = func_getCPARAMValueB("BE_CUSTBAL_LIM", "CASA" , BANCS.STDIN.contextBankId , BYREF CUST.DATA.maxLimit)
	IF (sv_s != 0) THEN
	#{
		GOTO ENDOFSCRIPT
	#}
	ENDIF
	
	sv_s = func_getCPARAMValueB("BE_WAR_ACCT_LIM", "CASA" , BANCS.STDIN.contextBankId , BYREF CUST.DATA.exceptionCode)
	IF (sv_s != 0) THEN
	#{
		GOTO ENDOFSCRIPT
	#}
	ENDIF
	
	IF(CUST.DATA.menuId == "MEOB") THEN
	#{
		sv_f =urhk_SRV_NumOfRecs("billTranDtls.tranDetails.tranLL")
		IF(sv_f != 0)THEN
		#{
			GOTO ENDOFSCRIPT
		#}
		ENDIF
		sub_copyOutparamFieldB("srvValue","CUST","DATA","noOfRecs","")
		#}
	ELSE
		#{
		sv_f =urhk_SRV_NumOfRecs("remTranDtls.tranDetails.tranLL")
		IF(sv_f != 0)THEN
		#{
			GOTO ENDOFSCRIPT
		#}
		ENDIF
		sub_copyOutparamFieldB("srvValue","CUST","DATA","noOfRecs","")
	#}
	ENDIF
	
	CUST.DATA.llValue = CUST.DATA.noOfRecs
	PRINT(CUST.DATA.llValue)
	CUST.DATA.limitcounter = "0"
	CUST.DATA.count = 0
	sv_g = 0
	CUST.DATA.cifIdCr = ""
	
	WHILE(sv_g < CINT(CUST.DATA.llValue))
	#{
		sv_v = FORMAT$(sv_g,"%d")
		PRINT(sv_v)
		
		IF(CUST.DATA.menuId == "HIRM")THEN
		#{
			CUST.DATA.foracidField  = "remTranDtls.tranDetails.tranLL.<rec_"+ sv_v +">.acId.foracid"
			CUST.DATA.refAmtField   = "remTranDtls.tranDetails.tranLL.<rec_"+ sv_v +">.refAmt"
			CUST.DATA.drCrField             = "remTranDtls.tranDetails.tranLL.<rec_"+ sv_v +">.drCrFlg"
			
			CUST.DATA.srvFields             = CUST.DATA.foracidField + "|" + CUST.DATA.refAmtField + "|" + CUST.DATA.drCrField
			CUST.DATA.reposFields   = "foracid|refAmt|drCrFlg"
			
			sub_getFieldValuesfromSRVStructB("3","CUST","DATA",CUST.DATA.srvFields,CUST.DATA.reposFields)
			
			
			CUST.DATA.getP = GETPOSITION(CUST.DATA.refAmt,"|")
			PRINT(CUST.DATA.getP)
			CUST.DATA.tempRefAmt = MID$((CUST.DATA.refAmt),0,(CINT(CUST.DATA.getP)))
			PRINT(CUST.DATA.tempRefAmt)
			CUST.DATA.tempCurr = MID$((CUST.DATA.refAmt),((CINT(CUST.DATA.getP))),STRLEN((CUST.DATA.refAmt)))
			PRINT(CUST.DATA.tempCurr)
			
		#}
		ELSE
		#{
			IF(CUST.DATA.menuId == "MEOB")THEN
			#{
				
				CUST.DATA.foracidField = "billTranDtls.tranDetails.tranLL.<rec_"+ sv_v +">.acId.foracid"
				CUST.DATA.refAmtField = "billTranDtls.tranDetails.tranLL.<rec_"+ sv_v +">.refAmt"
				CUST.DATA.drCrField = "billTranDtls.tranDetails.tranLL.<rec_"+ sv_v +">.drCrFlg"
				CUST.DATA.currField = "billTranDtls.tranDetails.tranLL.<rec_"+ sv_v +">.refCcy.crncyCode"
				
				
				CUST.DATA.srvFields     = CUST.DATA.foracidField + "|" + CUST.DATA.refAmtField + "|" + CUST.DATA.drCrField + "|" + CUST.DATA.currField
				CUST.DATA.reposFields   = "foracid|tempRefAmt|drCrFlg|tempCurr"
				
				sub_getFieldValuesfromSRVStructB("4","CUST","DATA",CUST.DATA.srvFields,CUST.DATA.reposFields)
				
			#}
			ELSE
			#{
				GOTO ENDOFSCRIPT
			#}
			ENDIF
			
		#}
		ENDIF
		
		
		("CUST").("DATA").("foracid"+sv_v) = CUST.DATA.foracid
		("CUST").("DATA").("tempRefAmt"+sv_v) = CUST.DATA.tempRefAmt
		("CUST").("DATA").("drCrFlg"+sv_v) = CUST.DATA.drCrFlg
		("CUST").("DATA").("tempCurr"+sv_v) = CUST.DATA.tempCurr
		
		PRINT(("CUST").("DATA").("foracid"+sv_v))
		PRINT(("CUST").("DATA").("tempRefAmt"+sv_v))
		PRINT(("CUST").("DATA").("drCrFlg"+sv_v))
		PRINT(("CUST").("DATA").("tempCurr"+sv_v))
		
		sv_s = "cifId,custId,schmType|SELECT CIF_ID, CUST_ID, SCHM_TYPE  "
		sv_s = sv_s + " FROM TBAADM.GAM WHERE FORACID = ?SVAR "
		sv_s = sv_s + " AND BANK_ID = ?SVAR "
		sv_s = sv_s + " AND ACCT_CLS_FLG != 'Y' AND DEL_FLG = 'N' "
		sv_s = sv_s + " AND ENTITY_CRE_FLG = 'Y' "
		BANCS.INPARAM.BINDVARS = CUST.DATA.foracid + "|" + BANCS.STDIN.contextBankId
		sv_d = urhk_dbSelectWithBind(sv_s)
		
		IF(sv_d == 0)THEN
		#{
			("CUST").("DATA").("cifId"+sv_v) = BANCS.OUTPARAM.cifId
			PRINT(("CUST").("DATA").("cifId"+sv_v))
			("CUST").("DATA").("custId"+sv_v) = BANCS.OUTPARAM.custId
			PRINT(("CUST").("DATA").("custId"+sv_v))
			("CUST").("DATA").("schmType"+sv_v) = BANCS.OUTPARAM.schmType
			PRINT(("CUST").("DATA").("schmType"+sv_v))
			
			
			IF((("CUST").("DATA").("drCrFlg"+sv_v) == "C") AND (CUST.DATA.cifIdCr == ""))THEN
			#{
				CUST.DATA.cifIdCr = ("CUST").("DATA").("cifId"+sv_v)
				PRINT(CUST.DATA.cifIdCr)
				CUST.DATA.foracidCr = ("CUST").("DATA").("foracid"+sv_v)
				CUST.DATA.custIdCr = ("CUST").("DATA").("custId"+sv_v)
				
			#}
			ENDIF
		#}
		ELSE
		#{
			("CUST").("DATA").("cifId"+sv_v) = ""
			PRINT(("CUST").("DATA").("cifId"+sv_v))
			("CUST").("DATA").("custId"+sv_v) = ""
			PRINT(("CUST").("DATA").("custId"+sv_v))
			("CUST").("DATA").("schmType"+sv_v) = ""
			PRINT(("CUST").("DATA").("schmType"+sv_v))
		#}
		ENDIF
		sv_g = sv_g + 1
		PRINT(sv_g)
	#}
	DO
	
	CUST.DATA.limitcounter = "0"
	CUST.DATA.firstCount = "0"
	CUST.DATA.finalAmount = 0
	PRINT(CUST.DATA.finalAmount)
	
	#PRINT(("CUST").("DATA").("cifId"+CUST.DATA.firstCount))
	#PRINT(("CUST").("DATA").("drCrFlg"+CUST.DATA.firstCount))
	#PRINT(CUST.DATA.cifId0)
	WHILE(CINT(CUST.DATA.limitcounter) < CINT(CUST.DATA.llValue))
	#{
		CUST.DATA.cifIdNew = ("CUST").("DATA").("cifId"+CUST.DATA.limitcounter)
		PRINT(CUST.DATA.cifIdNew)
		PRINT(CUST.DATA.cifId0)
		IF(("CUST").("DATA").("schmType"+CUST.DATA.limitcounter) == "SBA" OR ("CUST").("DATA").("schmType"+CUST.DATA.limitcounter) == "CAA") THEN
		#{
			IF((CUST.DATA.cifIdNew == CUST.DATA.cifIdCr) AND (CUST.DATA.cifIdCr != ""))THEN
			#{
				
				IF(("CUST").("DATA").("drCrFlg"+CUST.DATA.limitcounter) == ("CUST").("DATA").("drCrFlg"+CUST.DATA.firstCount))THEN
				#{
					###currency conversion to be done here
					
					IF (("CUST").("DATA").("tempCurr"+CUST.DATA.limitcounter) != "USD") THEN
					#{
						sv_f = func_getRevalRateCode(("CUST").("DATA").("tempCurr"+CUST.DATA.limitcounter), "USD", BYREF CUST.DATA.revalRateCode)
						PRINT(CUST.DATA.revalRateCode)
						
						# Amount conversion as per HCYCM setup.
						BANCS.INPARAM.InputAmount  =  CDOUBLE(("CUST").("DATA").("tempRefAmt"+CUST.DATA.limitcounter))
						BANCS.INPARAM.FromCurrency =  ("CUST").("DATA").("tempCurr"+CUST.DATA.limitcounter)
						BANCS.INPARAM.ToCurrency   =  "USD"
						BANCS.INPARAM.Rate         =  ""
						BANCS.INPARAM.RateCode     =  CUST.DATA.revalRateCode
						PRINT(BANCS.INPARAM.InputAmount)
						PRINT(BANCS.INPARAM.FromCurrency)
						PRINT(BANCS.INPARAM.ToCurrency)
						PRINT(BANCS.INPARAM.RateCode)
						sv_u = urhk_B2k_ConvertAmount("")
						PRINT(sv_u)
						IF (sv_u == 0 ) THEN
						#{
							lv_t = CDOUBLE(BANCS.OUTPARAM.OutputAmount)
							PRINT(lv_t)
						#}
						ENDIF
						#}
					ELSE
						#{
						lv_t = CDOUBLE(("CUST").("DATA").("tempRefAmt"+CUST.DATA.limitcounter))
					#}
					ENDIF
					
					PRINT(CDOUBLE(CUST.DATA.finalAmount))
					CUST.DATA.finalAmount = (CDOUBLE(CUST.DATA.finalAmount)) + lv_t
					PRINT(CDOUBLE(CUST.DATA.finalAmount))
					
					#}
				ELSE
					#{
					
					IF(("CUST").("DATA").("drCrFlg"+CUST.DATA.limitcounter) == "C")THEN
					#{
						CUST.DATA.finalAmount = CDOUBLE(("CUST").("DATA").("tempRefAmt"+CUST.DATA.limitcounter)) - CDOUBLE(CUST.DATA.finalAmount)
						#}
					ELSE
						#{
						CUST.DATA.finalAmount = CDOUBLE(CUST.DATA.finalAmount) - CDOUBLE(("CUST").("DATA").("tempRefAmt"+CUST.DATA.limitcounter))
					#}
					ENDIF
				#}
				ENDIF
				
				
				
			#}
			ENDIF
		#}
		ENDIF
		CUST.DATA.limitcounter = CINT(CUST.DATA.limitcounter) + 1
		
		IF(CINT(CUST.DATA.limitcounter) + 1 == CUST.DATA.llValue)THEN
		#{
			####check for amount part and throw exception
			sv_s = func_getTotalClearBal(CUST.DATA.foracidCr, CUST.DATA.custIdCr, BYREF CUST.DATA.totalClearBal)
			
			CUST.DATA.totalClearCreditBal = CDOUBLE(CUST.DATA.finalAmount) + CDOUBLE(CUST.DATA.totalClearBal)
			PRINT(CDOUBLE(CUST.DATA.totalClearCreditBal))
			
			IF(CDOUBLE(CUST.DATA.totalClearCreditBal) > CDOUBLE(CUST.DATA.maxLimit))THEN
			#{
				sv_m = urhk_B2k_PutUserException(CUST.DATA.exceptionCode)
			#}
			ENDIF
			
		#}
		ENDIF
		
	#}
	DO
	
	ENDOFSCRIPT:
		EXITSCRIPT
		
		TRACE OFF
		
END-->
