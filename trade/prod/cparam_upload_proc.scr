#=================================================
# IMPORTANT: Auto Generated Header. DO NOT CHANGE MANUALLY.
# category: Script Name Based
# script: cparam_val.scr
# event: NA
# description: VAlidation script
#=================================================

#############################################################################
#	Name					   :   cparam_upload_proc.scr
#	Date					   :   25-11-12
#	Description				:   This script is for the uploading the Parameter file which is called in the background.
#	Input					  :
#	Output					 :   NA
#	Author					 :   Santosh 	 
#	Called From				:   
#	Calling Script			 :   NA
#	Reference				  :   NA
#	Modification History	   :   
#############################################################################
<--START
libname CUSTOMSO

sv_r = 	REPEXISTS("STDWFS")
IF (sv_r == 0) THEN
#{
	CREATEREP("STDWFS")
#}
ENDIF
sv_r = CLASSEXISTS("STDWFS", "GLBDATA")
IF (sv_r == 0) THEN
#{
	CREATECLASS("STDWFS", "GLBDATA", 5)
#}
ENDIF

#----------------------------
# Calling CReAM_INFENG.scr
#----------------------------
sv_s = "CReAM_" + BANCS.STDIN.languageCode + ".scr"
print(sv_s)
sv_u = urhk_getFileLocation("SCRIPT|" + sv_s)
IF (sv_u !=0) THEN
#{
        GOTO ENDOFSCRIPT
#}
ENDIF
CALL(sv_s)

sv_e=0

sv_r = urhk_MTTS_PopulateInputDetails("")

STDWFS.GLBDATA.tempFile = MTT.InputDetails.Argument1
STDWFS.GLBDATA.action = MTT.InputDetails.Argument2

IF (STDWFS.GLBDATA.action == "Trial") THEN
#{
	STDWFS.GLBDATA.actionString = "Trial"
#}
ELSE
#{
	STDWFS.GLBDATA.actionString = "Real"
#}
ENDIF

print (STDWFS.GLBDATA.tempFile)

STDWFS.GLBDATA.writeFileIndex = ""
BANCS.OUTPUT.successOrFailure = "S"

sv_a = urhk_B2k_PID("")
STDWFS.GLBDATA.PID = BANCS.OUTPARAM.PID

STDWFS.GLBDATA.txtFile = "CPARAM_UPLOAD_RESULT_" + STDWFS.GLBDATA.PID + ".RES"

sv_t = urtn_fileOpen(STDWFS.GLBDATA.txtFile + "|a")
#print(sv_t)
IF(sv_t >= 0) THEN
#{
	STDWFS.GLBDATA.writeFileIndex = sv_t
	sv_t = urtn_fileWrite(STDWFS.GLBDATA.writeFileIndex+"|Result File for CPARAM Upload.")
	sv_t = urtn_fileWrite(STDWFS.GLBDATA.writeFileIndex+"|File Name :- " + STDWFS.GLBDATA.tempFile)
	sv_t = urtn_fileWrite(STDWFS.GLBDATA.writeFileIndex+"|Mode :- " + STDWFS.GLBDATA.actionString)
#}
ELSE
#{
	BANCS.OUTPUT.successOrFailure = "F"
	GOTO ENDOFSCRIPT
#}
endif

sv_r = urtn_fileAccess(STDWFS.GLBDATA.tempFile)
IF(sv_r != 0)THEN
#{
	BANCS.OUTPUT.successOrFailure = "F"
	GOTO ENDOFSCRIPT
#}
ENDIF
IF(sv_r == 0)THEN
#{
	STDWFS.GLBDATA.inputFileIndex = urtn_fileOpen(STDWFS.GLBDATA.tempFile + "|r")
	sv_l = STDWFS.GLBDATA.inputFileIndex
	IF(sv_l < 0) THEN
	#{
		#Unable to open the file 
		BANCS.OUTPUT.successOrFailure = "F"
		GOTO ENDOFSCRIPT
	#}
	ENDIF
	IF(sv_l >= 0) THEN
	#{
		STDWFS.GLBDATA.readIndex = urtn_fileRead(STDWFS.GLBDATA.inputFileIndex + "|STDWFS.GLBDATA.record")
		sv_q = CINT(STDWFS.GLBDATA.readIndex)
		IF (sv_q == 1) THEN
		#{
			#----------------------------------------------#
			# Checking whether the Input File can be read
			#----------------------------------------------#
			#Could Not Read The Input File
			BANCS.OUTPUT.successOrFailure = "F"
			GOTO ENDOFSCRIPT
		#}
		ENDIF
		#------------------------------------------------------#
		# Checking whether the Input File contains any records
		#------------------------------------------------------#
		IF (sv_q == 2) THEN
		#{
			#No Records Found In The File
			BANCS.OUTPUT.successOrFailure = "F"
			GOTO ENDOFSCRIPT
		#}
		ENDIF
	#}
	ENDIF
#}
ENDIF
IF(sv_q == 0) THEN
#{
	sv_y = 1
	WHILE(sv_q == 0)
	#{
		sv_e = ""
		#Field 1 - MODULE_NAME - Size 50
		BANCS.OUTPUT.successOrFailure = "S"
		BANCS.OUTPUT.succMessage = ""
		STDWFS.GLBDATA.modname = TRIM(MID$(STDWFS.GLBDATA.record,0,25))
		STDWFS.GLBDATA.paramlev = TRIM(MID$(STDWFS.GLBDATA.record,25,4))
		STDWFS.GLBDATA.paramId = TRIM(MID$(STDWFS.GLBDATA.record,29,15))
		STDWFS.GLBDATA.paramDesc = TRIM(MID$(STDWFS.GLBDATA.record,44,50))
		STDWFS.GLBDATA.paramType = TRIM(MID$(STDWFS.GLBDATA.record,94,2))
		STDWFS.GLBDATA.listType = TRIM(MID$(STDWFS.GLBDATA.record,96,2))
		STDWFS.GLBDATA.levelCode1 = TRIM(MID$(STDWFS.GLBDATA.record,98,8))
		STDWFS.GLBDATA.levelCode2 = TRIM(MID$(STDWFS.GLBDATA.record,106,8))
		STDWFS.GLBDATA.paramVal = TRIM(MID$(STDWFS.GLBDATA.record,114,50))

		# Handling single quote from Failure reaason
		sv_s = TRIM(STDWFS.GLBDATA.paramVal)
		sv_l = STRLEN(sv_s)
		sv_i = 0
		WHILE (sv_i < sv_l)
		#{
		    sv_x = CHARAT(sv_s,sv_i)

		    # If there is a single quote then adding one more to it
		    IF (sv_x == 39) THEN
		    #{
			sv_s = MID$(sv_s,0,sv_i) + "'" + MID$(sv_s,sv_i,sv_l)
			sv_l = sv_l + 1
			sv_i = sv_i + 1
		    #}
		    ENDIF
		    sv_i = sv_i + 1
		#}
		DO
		STDWFS.GLBDATA.paramValDB = sv_s


		IF (STDWFS.GLBDATA.paramDesc == "") THEN
		#{
			STDWFS.GLBDATA.paramDesc = STDWFS.GLBDATA.paramId
		#}
		ENDIF

		IF (STDWFS.GLBDATA.paramType == "") THEN
		#{
			STDWFS.GLBDATA.paramType = "AN"
		#}
		ENDIF

		IF (STDWFS.GLBDATA.listType == "") THEN
		#{
			STDWFS.GLBDATA.listType = "FT"
		#}
		ENDIF

		sv_s = TRIM(STDWFS.GLBDATA.paramVal)
		sv_l = STRLEN(sv_s)
		sv_i = 0
		WHILE (sv_i < sv_l)
		#{
		    sv_x = CHARAT(sv_s,sv_i)
		    print(sv_x)

		    # If there is a single quote then adding one more to it
		    IF (sv_x == '|') THEN
		    #{
			BANCS.OUTPUT.successOrFailure = "F"
			#BANCS.OUTPUT.errorMsg = "Parameter Value Cannot contain Pipe '|' character"
			BANCS.OUTPUT.errorMsg = CREAM.MESG.M0896
			GOTO ENDREC
		    #}
		    ENDIF
		    sv_i = sv_i + 1
		#}
		DO


		IF ((STDWFS.GLBDATA.paramlev != "BNKL") AND (STDWFS.GLBDATA.paramlev != "SOLL") AND (STDWFS.GLBDATA.paramlev != "GENL") AND (STDWFS.GLBDATA.paramlev != "CURL") AND (STDWFS.GLBDATA.paramlev != "SCHM") AND (STDWFS.GLBDATA.paramlev != "SHCR") )  THEN
		#{
			BANCS.OUTPUT.successOrFailure = "F"
			#BANCS.OUTPUT.errorMsg = "Parameter Level is Invalid"
			BANCS.OUTPUT.errorMsg = CREAM.MESG.M0897
			GOTO ENDREC
		#}
		ENDIF

		IF ((STDWFS.GLBDATA.paramlev == "GENL") OR (STDWFS.GLBDATA.paramlev == "SHCR")) THEN
		#{
			IF (STDWFS.GLBDATA.levelCode2 == "") THEN
			#{
				BANCS.OUTPUT.successOrFailure = "F"
				#BANCS.OUTPUT.errorMsg = "Level Code 2 is Mandatory is Parameter Level is GENL or SHCR."
				BANCS.OUTPUT.errorMsg = CREAM.MESG.M0898
				GOTO ENDREC
			#}
			ENDIF
		#}
		ENDIF

		IF (STDWFS.GLBDATA.paramlev == "BNKL") THEN
		#{
			STDWFS.GLBDATA.levelCode1 = "ALL"
		#}
		ENDIF

		# Checking if verification is pending for this record.

		sv_a = "countData1|select count(1) from C_CPVALUE_MOD where levelcode_1 = ?SVAR "
		BANCS.INPARAM.BINDVARS =  STDWFS.GLBDATA.levelCode1
		IF((STDWFS.GLBDATA.paramlev == "SHCR") OR (STDWFS.GLBDATA.paramlev == "GENL") ) THEN
		#{
			sv_a = sv_a + " and levelcode_2 = ?SVAR "
			BANCS.INPARAM.BINDVARS = BANCS.INPARAM.BINDVARS + "|" + STDWFS.GLBDATA.levelCode2
		#}
		ENDIF
		sv_a = sv_a + " and parameter_id = ?SVAR and NVL(DEL_FLG,'N') != 'Y' "
		#print(sv_a)
		sv_a = sv_a + " AND BANK_ID = ?SVAR"
		BANCS.INPARAM.BINDVARS = BANCS.INPARAM.BINDVARS + "|" +  STDWFS.GLBDATA.paramId + "|" +  BANCS.STDIN.contextBankId
		print(BANCS.INPARAM.BINDVARS)

		sv_z = urhk_dbSelectWithBind(sv_a)

		#print(sv_z)
		
		#print(sv_c)
		if(sv_z ==0) then
		#{
			sv_a = BANCS.OUTPARAM.countData1
			IF (sv_a != 0) then
			#{
				BANCS.OUTPUT.successOrFailure = "F"
				#BANCS.OUTPUT.errorMsg = "Verification is Pending for this record for Value."
				BANCS.OUTPUT.errorMsg = CREAM.MESG.M0899
				GOTO ENDREC
			#}
			ENDIF
		#}
		ENDIF

		sv_s = "modCount"
		sv_s = sv_s + "| SELECT COUNT(1) "
		sv_s = sv_s + " FROM LRCT"
		sv_s = sv_s + " WHERE	SCHM_REF_TYPE = 'CJ'"
		sv_s = sv_s + " AND     REF_CODE = ?SVAR"
		sv_s = sv_s + " AND	REF_REC_TYPE = 'CPMOD'"
		sv_s = sv_s + " AND     DEL_FLG = 'N'"
		sv_s = sv_s + " AND     BANK_ID = ?SVAR"
		print(sv_s)

		BANCS.INPARAM.BINDVARS = STDWFS.GLBDATA.modname + "|" +  BANCS.STDIN.contextBankId
		print(BANCS.INPARAM.BINDVARS)

		sv_z = urhk_dbSelectWithBind(sv_s)

		#sv_a = BANCS.OUTPARAM.countData
		IF ( sv_z == 0 ) THEN
		#{
			sv_a = BANCS.OUTPARAM.modCount
			IF (sv_a == 0) then
			#{
				BANCS.OUTPUT.successOrFailure = "F"
				#BANCS.OUTPUT.errorMsg = "Module Name is Invalid. It should be a valid LRCDM code of REF_REC_TYPE CPMOD."
				BANCS.OUTPUT.errorMsg = CREAM.MESG.M0900
				GOTO ENDREC
			#}
			ENDIF
		#{
		ENDIF



		IF (STDWFS.GLBDATA.paramlev == "SOLL") THEN
		#{
			sv_q	=   "countData|select count(1) from SOL where sol_id = ?SVAR and NVL(DEL_FLG,'N') != 'Y' AND  BANK_ID = ?SVAR" 
			BANCS.INPARAM.BINDVARS = STDWFS.GLBDATA.levelCode1 + "|" +  BANCS.STDIN.contextBankId
			print(BANCS.INPARAM.BINDVARS)

			sv_z = urhk_dbSelectWithBind(sv_q)

			
			IF ( sv_z == 0 ) THEN
			#{
				sv_a = BANCS.OUTPARAM.countData
				IF (sv_a == 0) then
				#{
					BANCS.OUTPUT.successOrFailure = "F"
					#BANCS.OUTPUT.errorMsg = "Invalid Sol Id in Level Code 1."
					BANCS.OUTPUT.errorMsg = CREAM.MESG.M0901
					GOTO ENDREC
				#}
				ENDIF
			#{
			ENDIF
		#}
		ENDIF

		IF (STDWFS.GLBDATA.paramlev == "SCHM") THEN
		#{
			sv_q	=   "countData|select count(1) from GSP where schm_code = ?SVAR and NVL(DEL_FLG,'N') != 'Y'  AND  BANK_ID = ?SVAR" 
			print(sv_q)
			BANCS.INPARAM.BINDVARS = STDWFS.GLBDATA.levelCode1 + "|" +  BANCS.STDIN.contextBankId
			print(BANCS.INPARAM.BINDVARS)

			sv_z = urhk_dbSelectWithBind(sv_q)

			
			IF ( sv_z == 0 ) THEN
			#{
				sv_a = BANCS.OUTPARAM.countData
				IF (sv_a == 0) then
				#{
					BANCS.OUTPUT.successOrFailure = "F"
					#BANCS.OUTPUT.errorMsg = "Invalid Scheme Code in Level Code 1."
					BANCS.OUTPUT.errorMsg = CREAM.MESG.M0902
					GOTO ENDREC
				#}
				ENDIF
			#{
			ENDIF
		#}
		ENDIF

		IF (STDWFS.GLBDATA.paramlev == "CURL") THEN
		#{
			sv_q	=   "countData|select count(1) from CNC where crncy_code = ?SVAR and NVL(DEL_FLG,'N') != 'Y' and entity_cre_flg ='Y' AND  BANK_ID = ?SVAR" 
			BANCS.INPARAM.BINDVARS = STDWFS.GLBDATA.levelCode1 + "|" +  BANCS.STDIN.contextBankId
			print(BANCS.INPARAM.BINDVARS)

			sv_z = urhk_dbSelectWithBind(sv_q)

			
			IF ( sv_z == 0 ) THEN
			#{
				sv_a = BANCS.OUTPARAM.countData
				IF (sv_a == 0) then
				#{
					BANCS.OUTPUT.successOrFailure = "F"
					#BANCS.OUTPUT.errorMsg = "Invalid Currency Code in Level Code 1."
					BANCS.OUTPUT.errorMsg = CREAM.MESG.M0903
					GOTO ENDREC
				#}
				ENDIF
			#{
			ENDIF
		#}
		ENDIF

		IF (STDWFS.GLBDATA.paramlev == "SHCR") THEN
		#{
			sv_q	=   "countData|select count(1) from GSP where schm_code = ?SVAR and NVL(DEL_FLG,'N') != 'Y'  AND  BANK_ID = ?SVAR" 
			BANCS.INPARAM.BINDVARS = STDWFS.GLBDATA.levelCode1 + "|" +  BANCS.STDIN.contextBankId
			print(BANCS.INPARAM.BINDVARS)

			sv_z = urhk_dbSelectWithBind(sv_q)

			
			IF ( sv_z == 0 ) THEN
			#{
				sv_a = BANCS.OUTPARAM.countData
				IF (sv_a == 0) then
				#{
					BANCS.OUTPUT.successOrFailure = "F"
					#BANCS.OUTPUT.errorMsg = "Invalid Scheme Code in Level Code 1."
					BANCS.OUTPUT.errorMsg = CREAM.MESG.M0902
					GOTO ENDREC
				#}
				ENDIF
			#{
			ENDIF

			sv_q	=   "countData|select count(1) from CNC where crncy_code = ?SVAR and NVL(DEL_FLG,'N') != 'Y' and entity_cre_flg ='Y' AND  BANK_ID = ?SVAR" 
			BANCS.INPARAM.BINDVARS = STDWFS.GLBDATA.levelCode2 + "|" +  BANCS.STDIN.contextBankId
			print(BANCS.INPARAM.BINDVARS)

			sv_z = urhk_dbSelectWithBind(sv_q)

			
			IF ( sv_z == 0 ) THEN
			#{
				sv_a = BANCS.OUTPARAM.countData
				IF (sv_a == 0) then
				#{
					BANCS.OUTPUT.successOrFailure = "F"
					#BANCS.OUTPUT.errorMsg = "Invalid Currency Code in Level Code 2."
					BANCS.OUTPUT.errorMsg = CREAM.MESG.M0904
					GOTO ENDREC
				#}
				ENDIF
			#{
			ENDIF
		#}
		ENDIF

		IF (STDWFS.GLBDATA.paramlev == "GENL") THEN
		#{
			IF ((STDWFS.GLBDATA.levelCode1 != "RL") AND (STDWFS.GLBDATA.levelCode1 != "GL") AND  (STDWFS.GLBDATA.levelCode1 != "CF") AND  (STDWFS.GLBDATA.levelCode1 != "CP") ) THEN
			#{
				BANCS.OUTPUT.successOrFailure = "F"
				#BANCS.OUTPUT.errorMsg = "Invalid Generic Code in Level Code 1."
				BANCS.OUTPUT.errorMsg = CREAM.MESG.M0905
				GOTO ENDREC
			#}
			ENDIF

			IF (STDWFS.GLBDATA.levelCode1 == "GL") THEN
			#{
				sv_q	=   "countData|select count(1) from RCT where ref_code = ?SVAR and NVL(DEL_FLG,'N') != 'Y' and ref_rec_type ='32	' AND  BANK_ID = ?SVAR" 
				BANCS.INPARAM.BINDVARS = STDWFS.GLBDATA.levelCode2 + "|" +  BANCS.STDIN.contextBankId
				print(BANCS.INPARAM.BINDVARS)

				sv_z = urhk_dbSelectWithBind(sv_q)

				
				IF ( sv_z == 0 ) THEN
				#{
					sv_a = BANCS.OUTPARAM.countData
					IF (sv_a == 0) then
					#{
						BANCS.OUTPUT.successOrFailure = "F"
						#BANCS.OUTPUT.errorMsg = "Invalid Role Id in Level Code 2."
						BANCS.OUTPUT.errorMsg = CREAM.MESG.M0906
						GOTO ENDREC
					#}
					ENDIF
				#{
				ENDIF
			#}
			ENDIF

			IF (STDWFS.GLBDATA.levelCode1 == "CF") THEN
			#{
				sv_q	=   "countData|select count(1) from CMG where cif_id = ?SVAR and NVL(DEL_FLG,'N') != 'Y' and entity_cre_flg ='Y' AND  BANK_ID = ?SVAR" 
				BANCS.INPARAM.BINDVARS = STDWFS.GLBDATA.levelCode2 + "|" +  BANCS.STDIN.contextBankId
				print(BANCS.INPARAM.BINDVARS)

				sv_z = urhk_dbSelectWithBind(sv_q)

				
				IF ( sv_z == 0 ) THEN
				#{
					sv_a = BANCS.OUTPARAM.countData
					IF (sv_a == 0) then
					#{
						BANCS.OUTPUT.successOrFailure = "F"
						#BANCS.OUTPUT.errorMsg = "Invalid Role Id in Level Code 2."
						BANCS.OUTPUT.errorMsg = CREAM.MESG.M0906
						GOTO ENDREC
					#}
					ENDIF
				#{
				ENDIF
			#}
			ENDIF

			IF (STDWFS.GLBDATA.levelCode1 == "CP") THEN
			#{
				STDWFS.GLBDATA.crncycode1 = MID$(STDWFS.GLBDATA.levelCode2,0,3)
				STDWFS.GLBDATA.crncycode2 = MID$(STDWFS.GLBDATA.levelCode2,4,3)

				sv_q	=   "countData|select count(1) from RTL where TRIM(fxd_crncy_code) = ?SVAR and TRIM(var_crncy_code) = ?SVAR and NVL(DEL_FLG,'N') != 'Y' AND  BANK_ID = ?SVAR" 
				BANCS.INPARAM.BINDVARS = STDWFS.GLBDATA.crncycode1 + "|" +  STDWFS.GLBDATA.crncycode2 + "|" +  BANCS.STDIN.contextBankId
				print(BANCS.INPARAM.BINDVARS)

				sv_z = urhk_dbSelectWithBind(sv_q)

				
				IF ( sv_z == 0 ) THEN
				#{
					sv_a = BANCS.OUTPARAM.countData
					IF (sv_a == 0) then
					#{
						BANCS.OUTPUT.successOrFailure = "F"
						#BANCS.OUTPUT.errorMsg = "Invalid Currency Pair Combination in Level Code 2."
						BANCS.OUTPUT.errorMsg = CREAM.MESG.M0907
						GOTO ENDREC
					#}
					ENDIF
				#{
				ENDIF
			#}
			ENDIF

			IF (STDWFS.GLBDATA.levelCode1 == "RL") THEN
			#{
				sv_q	=   "countData|select count(1) from RPT where role_id = ?SVAR and NVL(DEL_FLG,'N') != 'Y' and entity_cre_flg ='Y' AND  BANK_ID = ?SVAR" 
				BANCS.INPARAM.BINDVARS = STDWFS.GLBDATA.levelCode2 + "|" +  BANCS.STDIN.contextBankId
				print(BANCS.INPARAM.BINDVARS)

				sv_z = urhk_dbSelectWithBind(sv_q)

				
				IF ( sv_z == 0 ) THEN
				#{
					sv_a = BANCS.OUTPARAM.countData
					IF (sv_a == 0) then
					#{
						BANCS.OUTPUT.successOrFailure = "F"
						#BANCS.OUTPUT.errorMsg = "Invalid Role Id in Level Code 2."
						BANCS.OUTPUT.errorMsg = CREAM.MESG.M0906
						GOTO ENDREC
					#}
					ENDIF
				#{
				ENDIF
			#}
			ENDIF
		#}
		ENDIF

		sv_a = "countData1|select count(1) from C_CPMASTER where parameter_level =?SVAR "
		sv_a = sv_a + " and module_name =?SVAR and entity_cre_flg = 'N' and parameter_id = ?SVAR and NVL(DEL_FLG,'N') != 'Y' "
		sv_a = sv_a + " AND BANK_ID = ?SVAR"  
		print(sv_a)
		BANCS.INPARAM.BINDVARS = STDWFS.GLBDATA.paramlev + "|" + STDWFS.GLBDATA.modname + "|" + STDWFS.GLBDATA.paramId
		BANCS.INPARAM.BINDVARS = BANCS.INPARAM.BINDVARS + "|" + BANCS.STDIN.contextBankId
		print(BANCS.INPARAM.BINDVARS)

		sv_z = urhk_dbSelectWithBind(sv_a)

		
		if(sv_z ==0) then
		#{
			sv_c = BANCS.OUTPARAM.countData1
			if(sv_c !=0) then
			#{
				BANCS.OUTPUT.successOrFailure = "F"
				#BANCS.OUTPUT.errorMsg = "Verification is Pending for this record for Master."
				BANCS.OUTPUT.errorMsg = CREAM.MESG.M0908
				GOTO ENDREC
			#}
			endif
		#}
		ENDIF

		sv_a = "countData1|select count(1) from C_CPMASTER where parameter_level =?SVAR "
		sv_a = sv_a + " and module_name =?SVAR and entity_cre_flg = 'Y' and parameter_id = ?SVAR and NVL(DEL_FLG,'N') != 'Y' "
		sv_a = sv_a + " AND BANK_ID = ?SVAR"  
		print(sv_a)
		BANCS.INPARAM.BINDVARS = STDWFS.GLBDATA.paramlev + "|" + STDWFS.GLBDATA.modname + "|" + STDWFS.GLBDATA.paramId
		BANCS.INPARAM.BINDVARS = BANCS.INPARAM.BINDVARS + "|" + BANCS.STDIN.contextBankId
		print(BANCS.INPARAM.BINDVARS)

		sv_z = urhk_dbSelectWithBind(sv_a)

		
		if(sv_z ==0) then
		#{
			sv_c = BANCS.OUTPARAM.countData1
			if(sv_c ==0) then
			#{

				sv_q = "INSERT INTO C_CPMASTER (MODULE_NAME, PARAMETER_LEVEL, PARAMETER_ID, PARAMETER_DESC, PARAMETER_TYPE, QUERY_ID, LIST_TYPE, ENTITY_CRE_FLG, DEL_FLG, RCRE_USER_ID, RCRE_TIME, LCHG_USER_ID, LCHG_TIME, BANK_ID) VALUES(?SVAR,?SVAR,?SVAR,?SVAR,?SVAR,'',?SVAR,'Y','N',?SVAR,SYSDATE,?SVAR,SYSDATE,?SVAR)"
				BANCS.INPARAM.BINDVARS = STDWFS.GLBDATA.modname + "|" + STDWFS.GLBDATA.paramlev + "|" + STDWFS.GLBDATA.paramId
				BANCS.INPARAM.BINDVARS = BANCS.INPARAM.BINDVARS + "|" + STDWFS.GLBDATA.paramDesc + "|" + STDWFS.GLBDATA.paramType
				BANCS.INPARAM.BINDVARS = BANCS.INPARAM.BINDVARS + "|" + STDWFS.GLBDATA.listType + "|" + BANCS.STDIN.userId
				BANCS.INPARAM.BINDVARS = BANCS.INPARAM.BINDVARS + "|" + BANCS.STDIN.userId + "|" + BANCS.STDIN.contextBankId
				print(BANCS.INPARAM.BINDVARS)

				sv_a = urhk_dbSqlWithBind(sv_q)

				IF (sv_a != 0) THEN
				#{
					BANCS.OUTPUT.successOrFailure = "F"
					#BANCS.OUTPUT.errorMsg = "Unable to Insert Record in Master Table."
					BANCS.OUTPUT.errorMsg = CREAM.MESG.M0909
					GOTO ENDREC
				#}
				ENDIF
				BANCS.OUTPUT.succMessage = BANCS.OUTPUT.succMessage + " Master Record Added."
			#}
			endif
		#}
		ENDIF

		sv_a = "countData1|select count(1) from C_CPVALUE where levelcode_1 = ?SVAR "
		BANCS.INPARAM.BINDVARS =  STDWFS.GLBDATA.levelCode1
		IF((STDWFS.GLBDATA.paramlev == "SHCR") OR (STDWFS.GLBDATA.paramlev == "GENL") ) THEN
		#{
			sv_a = sv_a + " and levelcode_2 = ?SVAR "
			BANCS.INPARAM.BINDVARS = BANCS.INPARAM.BINDVARS + "|" + STDWFS.GLBDATA.levelCode2
		#}
		ENDIF
		sv_a = sv_a + " and parameter_id = ?SVAR and NVL(DEL_FLG,'N') != 'Y' "
		#print(sv_a)
		sv_a = sv_a + " AND BANK_ID = ?SVAR"
		BANCS.INPARAM.BINDVARS = BANCS.INPARAM.BINDVARS + "|" +  STDWFS.GLBDATA.paramId + "|" +  BANCS.STDIN.contextBankId
		print(BANCS.INPARAM.BINDVARS)

		sv_z = urhk_dbSelectWithBind(sv_a)

		#print(sv_z)
		
		#print(sv_c)
		if(sv_z ==0) then
		#{
			sv_a = BANCS.OUTPARAM.countData1
			IF (sv_a == 0) then
			#{
				sv_q = "INSERT INTO C_CPVALUE ("
				sv_q = sv_q + "PARAMETER_ID,"
				sv_q = sv_q + "LEVELCODE_1,"
				sv_q = sv_q + "LEVELCODE_2,"
				sv_q = sv_q + "PARAMETER_VALUE,"
				sv_q = sv_q + "ENTITY_CRE_FLG,"
				sv_q = sv_q + "DEL_FLG,"
				sv_q = sv_q + "RCRE_USER_ID,"
				sv_q = sv_q + "RCRE_TIME,"
				sv_q = sv_q + "LCHG_USER_ID,"
				sv_q = sv_q + "LCHG_TIME,"
				sv_q = sv_q + "BANK_ID) "
				sv_q = sv_q + " VALUES("
				sv_q = sv_q + "?SVAR,"
				sv_q = sv_q + "?SVAR,"
				sv_q = sv_q + "?SVAR,"
				sv_q = sv_q + "?SVAR"
				sv_q = sv_q + ",'Y'"
				sv_q = sv_q + ",'N'"
				sv_q = sv_q + ",?SVAR"
				sv_q = sv_q + ",sysdate"
				sv_q = sv_q + ",?SVAR"
				sv_q = sv_q + ",sysdate"
				sv_q = sv_q + ",?SVAR)"
				BANCS.INPARAM.BINDVARS = STDWFS.GLBDATA.paramId + "|" + STDWFS.GLBDATA.levelCode1 + "|" + STDWFS.GLBDATA.levelCode2
				BANCS.INPARAM.BINDVARS = BANCS.INPARAM.BINDVARS + "|" + STDWFS.GLBDATA.paramValDB + "|" + BANCS.STDIN.userId
				BANCS.INPARAM.BINDVARS = BANCS.INPARAM.BINDVARS + "|" + BANCS.STDIN.userId + "|" + BANCS.STDIN.contextBankId
				print(BANCS.INPARAM.BINDVARS)

				sv_r = urhk_dbSqlWithBind(sv_q)


				IF(sv_r != 0) THEN
				#{
					BANCS.OUTPUT.successOrFailure = "F"
					#BANCS.OUTPUT.errorMsg = "Unable to Insert Record in Value Table."
					BANCS.OUTPUT.errorMsg = CREAM.MESG.M0910
					GOTO ENDREC
				#}
				ENDIF

				if(repexists("AUDIT") == 0) then
				#{
					createrep("AUDIT")
				#}
				endif
				if(classexists("AUDIT","KEY")) then
				#{
					deleteclass("AUDIT","KEY")
				#}
				endif
				createclass("AUDIT","KEY",5)

				if(classexists("AUDIT","NEW")) then
				#{
					deleteclass("AUDIT","NEW")
				#}
				endif
				createclass("AUDIT","NEW",5)

				if(classexists("AUDIT","OLD")) then
				#{
					deleteclass("AUDIT","OLD")
				#}
				endif
				createclass("AUDIT","OLD",5)

				STDWFS.GLBDATA.auditSucFailFlg = "S"

				sv_d = urhk_InitAudit("")
				sv_f = BANCS.OUTPARAM.successOrFailure
				if(sv_f == "S")THEN
				#{
					AUDIT.KEY.PARAMETER_ID = STDWFS.GLBDATA.paramId 
					AUDIT.KEY.LEVELCODE_1 =	 STDWFS.GLBDATA.levelCode1
					AUDIT.KEY.LEVELCODE_2 =  trim(STDWFS.GLBDATA.levelCode2)
					AUDIT.KEY.BANK_ID	  = BANCS.STDIN.contextBankId 

					BANCS.INPARAM.AUDITSOLID = BANCS.STDIN.mySolId
					BANCS.INPARAM.TABLENAME  = "C_CPVA"
					BANCS.INPARAM.ACCTNUM	= ""
					BANCS.INPARAM.GLSUBHEADCODE= ""
					BANCS.INPARAM.OPERCODE="A"
					BANCS.INPARAM.AUTOVERIFY="Y"
					
					sv_d = urhk_Audit("")
					sv_e = BANCS.OUTPARAM.successOrFailure
					IF ( sv_e == "F" ) THEN
					#{
						BANCS.OUTPUT.successOrFailure = "F"
						#BANCS.OUTPUT.errorMsg = "Unable to perform AUDIT for the record"
						BANCS.OUTPUT.errorMsg = CREAM.MESG.M0911
						GOTO ENDREC
					#}
					ENDIF
				#}
				ELSE
				#{
					BANCS.OUTPUT.successOrFailure = "F"
					#BANCS.OUTPUT.errorMsg = "Unable to perform AUDIT for the record"
					BANCS.OUTPUT.errorMsg = CREAM.MESG.M0911
					GOTO ENDREC
				#}
				ENDIF

				BANCS.OUTPUT.succMessage = BANCS.OUTPUT.succMessage + " Child Record Added."
			#}
			ELSE
			#{
				sv_a = "oldVal|select parameter_value from C_CPVALUE where levelcode_1 = ?SVAR "
				BANCS.INPARAM.BINDVARS =  STDWFS.GLBDATA.levelCode1
				IF((STDWFS.GLBDATA.paramlev == "SHCR") OR (STDWFS.GLBDATA.paramlev == "GENL") ) THEN
				#{
					sv_a = sv_a + " and levelcode_2 = ?SVAR "
					BANCS.INPARAM.BINDVARS = BANCS.INPARAM.BINDVARS + "|" + STDWFS.GLBDATA.levelCode2
				#}
				ENDIF
				sv_a = sv_a + " and parameter_id = ?SVAR and NVL(DEL_FLG,'N') != 'Y' "
				#print(sv_a)
				sv_a = sv_a + " AND BANK_ID = ?SVAR"
				BANCS.INPARAM.BINDVARS = BANCS.INPARAM.BINDVARS + "|" +  STDWFS.GLBDATA.paramId + "|" +  BANCS.STDIN.contextBankId
				print(BANCS.INPARAM.BINDVARS)

				sv_z = urhk_dbSelectWithBind(sv_a)


				if(sv_z ==0) then
				#{
					STDWFS.GLBDATA.oldVal = BANCS.OUTPARAM.oldVal
				#}
				else
				#{
					BANCS.OUTPUT.successOrFailure = "F"
					#BANCS.OUTPUT.errorMsg = "Error in fetching the old value for the parameter."
					BANCS.OUTPUT.errorMsg = CREAM.MESG.M0912
					GOTO ENDREC
				#}
				ENDIF

				sv_q = " UPDATE C_CPVALUE SET"
				sv_q = sv_q + " PARAMETER_VALUE = ?SVAR,"
				#sv_q = sv_q + " RCRE_USER_ID = '" + STDWFS.GLBDATA.rcreId +"',"
				#sv_q = sv_q + " RCRE_TIME = SYSDATE,"
				sv_q = sv_q + " LCHG_USER_ID =?SVAR,"
				sv_q = sv_q + " LCHG_TIME = sysdate  "
				sv_q = sv_q + " WHERE PARAMETER_ID = ?SVAR "
				BANCS.INPARAM.BINDVARS =  STDWFS.GLBDATA.paramValDB + "|" + BANCS.STDIN.userId + "|" + STDWFS.GLBDATA.paramId
				IF (TRIM(STDWFS.GLBDATA.levelCode1) != "") THEN
				#{
					sv_q = sv_q + " AND LEVELCODE_1 = ?SVAR"
					BANCS.INPARAM.BINDVARS = BANCS.INPARAM.BINDVARS + "|" + STDWFS.GLBDATA.levelCode1
				#}
				ENDIF
				IF (TRIM(STDWFS.GLBDATA.levelCode2) != "") THEN
				#{
					sv_q = sv_q + " AND NVL(LEVELCODE_2,' ') =?SVAR"
					BANCS.INPARAM.BINDVARS = BANCS.INPARAM.BINDVARS + "|" + STDWFS.GLBDATA.levelCode2
				#}
				ENDIF
				sv_q = sv_q + " AND BANK_ID = ?SVAR"
				BANCS.INPARAM.BINDVARS = BANCS.INPARAM.BINDVARS + "|" +  BANCS.STDIN.contextBankId
				print(BANCS.INPARAM.BINDVARS)

				sv_r = urhk_dbSqlWithBind(sv_q)


				IF(sv_r != 0) THEN
				#{
					BANCS.OUTPUT.successOrFailure = "F"
					#BANCS.OUTPUT.errorMsg = "Error in updating the value for the parameter."
					BANCS.OUTPUT.errorMsg = CREAM.MESG.M0914
					GOTO ENDREC
				#}
				ENDIF

				if(repexists("AUDIT") == 0) then
				#{
					createrep("AUDIT")
				#}
				endif
				if(classexists("AUDIT","KEY")) then
				#{
					deleteclass("AUDIT","KEY")
				#}
				endif
				createclass("AUDIT","KEY",5)

				if(classexists("AUDIT","NEW")) then
				#{
					deleteclass("AUDIT","NEW")
				#}
				endif
				createclass("AUDIT","NEW",5)

				if(classexists("AUDIT","OLD")) then
				#{
					deleteclass("AUDIT","OLD")
				#}
				endif
				createclass("AUDIT","OLD",5)

				STDWFS.GLBDATA.auditSucFailFlg = "S"

				sv_d = urhk_InitAudit("")
				sv_f = BANCS.OUTPARAM.successOrFailure
				IF (sv_f == "S") THEN
				#{
					#=====================================================
					# Setting the input parameters to insert audit records 
					# for custom table
					#=====================================================
					sv_s = "REF_NUM | "
					sv_s = sv_s + " SELECT MAX(REF_NUM) "
					sv_s = sv_s + " FROM TBAADM.ADT"
					sv_s = sv_s + " WHERE TABLE_NAME = 'C_CPVA' " 
					#sv_s = sv_s + " AND AUTH_ID = '!' "
					sv_s = sv_s + " AND TABLE_KEY='" + STDWFS.GLBDATA.paramId + "/" + STDWFS.GLBDATA.levelCode1 + "/" + trim(STDWFS.GLBDATA.levelCode2) + "/" + BANCS.STDIN.contextBankId + "/'"

					#print(sv_s)
					sv_d = urhk_dbSelectWithBind(sv_s)

					IF (sv_d != 0) THEN
					#{
						BANCS.OUTPUT.successOrFailure = "F"
						#BANCS.OUTPUT.errorMsg = "Unable to perform AUDIT for the record"
						BANCS.OUTPUT.errorMsg = CREAM.MESG.M0911
						GOTO ENDREC
					#}
					ENDIF

					#=====================================================
					# Setting the input parameters to insert audit records 
					# for custom table
					#=====================================================

					#print("1")
					#print(BANCS.OUTPARAM.REF_NUM)
					BANCS.INPARAM.REFNUM   = BANCS.OUTPARAM.REF_NUM
					AUDIT.KEY.PARAMETER_ID = STDWFS.GLBDATA.paramId
					AUDIT.KEY.LEVELCODE_1  = STDWFS.GLBDATA.levelCode1
					AUDIT.KEY.LEVELCODE_2  = trim(STDWFS.GLBDATA.levelCode2)
					AUDIT.KEY.BANK_ID	   = BANCS.STDIN.contextBankId 
					AUDIT.OLD.PARAMETER_VALUE = STDWFS.GLBDATA.oldVal
					AUDIT.NEW.PARAMETER_VALUE = STDWFS.GLBDATA.paramVal

					BANCS.INPARAM.AUDITSOLID = BANCS.STDIN.mySolId
					BANCS.INPARAM.TABLENAME  = "C_CPVA"
					BANCS.INPARAM.ACCTNUM	= ""
					BANCS.INPARAM.GLSUBHEADCODE= ""
					BANCS.INPARAM.OPERCODE="M"
					BANCS.INPARAM.AUTOVERIFY="Y"

					sv_d = urhk_Audit("")
					sv_e = BANCS.OUTPARAM.successOrFailure
					IF ( sv_e == "F" ) THEN
					#{
						BANCS.OUTPUT.successOrFailure = "F"
						#BANCS.OUTPUT.errorMsg = "Unable to perform AUDIT for the record"
						BANCS.OUTPUT.errorMsg = CREAM.MESG.M0911
						GOTO ENDREC
					#}
					ENDIF
				#}
				ELSE
				#{
					BANCS.OUTPUT.successOrFailure = "F"
					#BANCS.OUTPUT.errorMsg = "Unable to perform AUDIT for the record"
					BANCS.OUTPUT.errorMsg = CREAM.MESG.M0911
					GOTO ENDREC
				#}
				ENDIF

				BANCS.OUTPUT.succMessage = BANCS.OUTPUT.succMessage + " Child Record Modified."

			#}
			ENDIF
		#}
		ENDIF

		#print(sv_e)
		

		
		#---------------------------------------------
		#Write the records into the text file
		#---------------------------------------------
		ENDREC:
		IF (STDWFS.GLBDATA.action == "Trial") THEN
		#{
			sv_d = urhk_dbSqlWithBind("ROLLBACK")
		#}
		ENDIF
		IF (BANCS.OUTPUT.successOrFailure == "F") THEN
		#{
			sv_d = urhk_dbSqlWithBind("ROLLBACK")
		#}
		ELSE
		#{
			IF (STDWFS.GLBDATA.action != "Trial") THEN
				sv_d = urhk_dbSqlWithBind("COMMIT")
			ENDIF
		#}
		ENDIF
		sv_t = urtn_fileWrite(STDWFS.GLBDATA.writeFileIndex+"|"+ RPAD("=",125,'='))
		sv_t = urtn_fileWrite(STDWFS.GLBDATA.writeFileIndex+"|"+ STDWFS.GLBDATA.record)
		sv_t = urtn_fileWrite(STDWFS.GLBDATA.writeFileIndex+"|")
		sv_e = "Record Number :- " + FORMAT$(sv_y,"%d")
		sv_t = urtn_fileWrite(STDWFS.GLBDATA.writeFileIndex+"|"+ sv_e)
		sv_t = urtn_fileWrite(STDWFS.GLBDATA.writeFileIndex+"|")
		
		IF (BANCS.OUTPUT.successOrFailure == "F") THEN
		#{
			sv_e = "STATUS :- FAIL"
		#}
		ELSE
		#{
			sv_e = "STATUS :- SUCCESS"
		#}
		ENDIF
		sv_t = urtn_fileWrite(STDWFS.GLBDATA.writeFileIndex+"|"+ sv_e)
		sv_t = urtn_fileWrite(STDWFS.GLBDATA.writeFileIndex+"|")
		IF (BANCS.OUTPUT.successOrFailure == "F") THEN
		#{
			sv_e = "Message :- " + BANCS.OUTPUT.errorMsg
		#}
		ELSE
		#{
			sv_e = "Message :- " + BANCS.OUTPUT.succMessage
		#}
		ENDIF
		sv_t = urtn_fileWrite(STDWFS.GLBDATA.writeFileIndex+"|"+ sv_e)
		sv_t = urtn_fileWrite(STDWFS.GLBDATA.writeFileIndex+"|")
		sv_t = urtn_fileWrite(STDWFS.GLBDATA.writeFileIndex+"|"+ RPAD("=",125,'='))
		#print(sv_t)	
		NEXTREC:
		STDWFS.GLBDATA.readIndex = urtn_fileRead(STDWFS.GLBDATA.inputFileIndex + "|STDWFS.GLBDATA.record")
		sv_q = CINT(STDWFS.GLBDATA.readIndex)
		sv_y = sv_y + 1
	#}	
	do
#}
endif
sv_t = urtn_fileClose(STDWFS.GLBDATA.writeFileIndex)

IF (STDWFS.GLBDATA.action != "Trial") THEN
	call("cparam_generate_flat_file.scr")
ENDIF

sv_q = "exebatch babx4040 $B2K_SESSION_ID '" + STDWFS.GLBDATA.txtFile + "' 'Result File for CPARAM Menu Upload' MANAGER 1 N"
sv_v = SYSTEM(sv_q)

#print(sv_t)
sv_t = urtn_fileClose(STDWFS.GLBDATA.inputFileIndex)
#print(sv_t)
BANCS.OUTPUT.successOrFailure = "S"

END-->
