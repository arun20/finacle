#============================================================
# IMPORTANT: Auto Generated Header. DO NOT CHANGE MANUALLY.
# Product: Finacle Core
# Category: User Defined
# Script: AutoClosureSBAaccounts.scr
# Type: NA|default
# Description: NA
# Author: Alfaraz Batcha K. H.
# Date: 25/05/2018
# Modification Log:
#============================================================
IMPORT LibCommonB001
IMPORT LibCommonB002
IMPORT LibDateB001
IMPORT SRVHCAAC
<--START
	TRACE ON
	LIBNAME CUSTOMSO
	#------------------------------------------------------------------------------------
	# REPOSITORY AND CLASS CREATION
	#------------------------------------------------------------------------------------
	sub_createRepClassB("LHBN","DATA")
	
	LHBN.DATA.acntCount = "0"
	LHBN.DATA.status = ""
	LHBN.DATA.errorMsg = ""
	LHBN.DATA.errorFlg = "N"
	LHBN.DATA.foracid = ""
	LHBN.DATA.acid = ""	
	LHBN.DATA.solId = ""	

	#------------------------------------------------------------------------------------
	# CREATING LST FILE FOR REPORT GENERATION
	#------------------------------------------------------------------------------------
	LHBN.DATA.tstamp = ""
	LHBN.DATA.tstamp = func_getSysDateTimeWithFormatB("DDMMYYHH24MISS")
	PRINT(LHBN.DATA.tstamp)
	
	LHBN.DATA.rptLst = "Acct_Closure_Batch_Job_Rep_" + LHBN.DATA.tstamp + ".txt"
	PRINT(LHBN.DATA.rptLst)
	sv_q  = urtn_fileOpen(LHBN.DATA.rptLst + "|w")
	PRINT(sv_q)
	IF (sv_q < 0) THEN
	#{
		PRINT("lst file cannot be open")
	#}
	ENDIF
	
	LHBN.DATA.rpt_dataFileIndex = sv_q
	PRINT(LHBN.DATA.rpt_dataFileIndex)
	
	#------------------------------------------------------------------------------------
	# Fetching SBA_CLS_DAY value from CPARAM
	#------------------------------------------------------------------------------------
	LHBN.DATA.modId = "CASA"
	LHBN.DATA.parId = "SBA_CLS_DAY"
	LHBN.DATA.bankId = BANCS.STDIN.contextBankId
	sv_u = func_getCPARAMValueB(LHBN.DATA.parId,LHBN.DATA.modId,LHBN.DATA.bankId,BYREF LHBN.DATA.sbaClosureDay)
	PRINT(sv_u)
	IF(sv_u == 0) THEN
	#{
		PRINT(LHBN.DATA.sbaClosureDay)
	#}
	ELSE
	#{
		LHBN.DATA.errorMsg = "SBA_CLS_DAY is not set in CPARAM. "
		LHBN.DATA.errorFlg = "Y"
		GOTO ENDOFSCRIPT
	#}
	ENDIF
	
	#------------------------------------------------------------------------------------
	# Defining Success/Failure report details
	#------------------------------------------------------------------------------------
	sv_s = "reportDate,dueDate|SELECT TO_CHAR(TO_DATE(?SVAR,'DD-MM-YYYY'),'DD/MM/YYYY'),TO_CHAR(TO_DATE(?SVAR,'DD-MM-YYYY')-?SVAR,'DD-MM-YYYY') FROM DUAL "
	BANCS.INPARAM.BINDVARS = LEFT$(BANCS.STDIN.BODDate, 10) + "|" + LEFT$(BANCS.STDIN.BODDate, 10) + "|" + LHBN.DATA.sbaClosureDay
	sv_r = urhk_dbSelectWithBind(sv_s)
	IF(sv_r!=0) THEN
	#{
		LHBN.DATA.errorMsg = "DUE DATE is not fetched from BOD Date with CPARAM. "
		LHBN.DATA.errorFlg = "Y"
		GOTO ENDOFSCRIPT
	#}
	ENDIF
	
	LHBN.DATA.reportDate = BANCS.OUTPARAM.reportDate
	PRINT(LHBN.DATA.reportDate)
	LHBN.DATA.dueDate = BANCS.OUTPARAM.dueDate
	PRINT(LHBN.DATA.dueDate)
	
	LHBN.DATA.whereFields="BANK_CODE|DEL_FLG|BANK_ID"
	LHBN.DATA.whereValues = BANCS.STDIN.myBankCode + "|N|" + BANCS.STDIN.contextBankId
	LHBN.DATA.outputFields = "bankName"
	LHBN.DATA.selectFields = "BANK_NAME"
	LHBN.DATA.tableName = "TBAADM.BANK_CODE_TABLE"
	BANCS.INPARAM.whereClauseOperator = "||"
	BANCS.INPARAM.whereFieldsColumnDataType = "STRING|STRING|STRING"
	BANCS.INPARAM.whereFieldsColumnFormat = "||"
	BANCS.INPARAM.additionalQueryString = ""
	sv_z = func_selectFromCustTableB(LHBN.DATA.outputFields,LHBN.DATA.selectFields,LHBN.DATA.tableName,LHBN.DATA.whereFields,LHBN.DATA.whereValues)
	PRINT(sv_z)
	IF(sv_z == 0) THEN
	#{
		LHBN.DATA.bankName = BANCS.OUTPARAM.bankName
		PRINT(LHBN.DATA.bankName)
	#}
	ELSE
	#{
		LHBN.DATA.errorMsg = "Bank Name is not fetched from HSCFM. "
		LHBN.DATA.errorFlg = "Y"
		GOTO ENDOFSCRIPT
	#}
	ENDIF
		
	LHBN.DATA.writeToTxt = "BANK NAME   : " + LHBN.DATA.bankName
	sv_u = urtn_fileWrite(LHBN.DATA.rpt_dataFileIndex + "|"+ LHBN.DATA.writeToTxt)
	LHBN.DATA.writeToTxt = "REPORT NAME : NO DEPOSIT SBA ACCOUNT CLOSURE REPORT "
	sv_u = urtn_fileWrite(LHBN.DATA.rpt_dataFileIndex + "|"+ LHBN.DATA.writeToTxt)
	LHBN.DATA.writeToTxt = "PRINTED ON  : " + LHBN.DATA.reportDate
	sv_u = urtn_fileWrite(LHBN.DATA.rpt_dataFileIndex + "|"+ LHBN.DATA.writeToTxt)	
	LHBN.DATA.reportLine = "---------------------------------------------------------------------------------------------------------------------------"
	sv_u = urtn_fileWrite(LHBN.DATA.rpt_dataFileIndex + "|" + LHBN.DATA.reportLine)	
	LHBN.DATA.writeToTxt = "SOL ID    ACCOUNT NUMBER      STATUS    REASON                                                                             "
	sv_u = urtn_fileWrite(LHBN.DATA.rpt_dataFileIndex + "|"+ LHBN.DATA.writeToTxt)
	
	LHBN.DATA.reportLine = "---------------------------------------------------------------------------------------------------------------------------"
	sv_u = urtn_fileWrite(LHBN.DATA.rpt_dataFileIndex + "|" + LHBN.DATA.reportLine)
	
	PRINT(BANCS.STDIN.BODDate)
	
	#------------------------------------------------------------------------------------
	# Fetching the Inactive SBA Accounts from GAM 
	#------------------------------------------------------------------------------------
	sv_s = "foracid,acid,solId|"
	sv_s = sv_s + " SELECT FORACID,ACID,SOL_ID FROM TBAADM.GAM WHERE SCHM_TYPE = ?SVAR AND ACCT_OPN_DATE <= TO_DATE(?SVAR,'DD-MM-YYYY') "
	sv_s = sv_s + " AND LAST_TRAN_DATE IS NULL AND CLR_BAL_AMT = ?SVAR AND ACCT_CLS_FLG = ?SVAR AND DEL_FLG = ?SVAR "
	sv_s = sv_s + " AND ENTITY_CRE_FLG = ?SVAR ORDER BY SOL_ID "
	PRINT(sv_s)
	BANCS.INPARAM.BINDVARS = "SBA|" + LHBN.DATA.dueDate + "|0|N|N|Y"
	PRINT(BANCS.INPARAM.BINDVARS)
	sv_c = urhk_dbCursorOpenWithBind(sv_s)
	PRINT(sv_c)
	
	IF(sv_c == 0) THEN
	#{
		LHBN.DATA.cursorNo = BANCS.OUTPARAM.DB_CURSOR_NUMBER
		sv_q = urhk_dbCursorFetch(LHBN.DATA.cursorNo)
	#}
	ELSE
	#{
		GOTO ENDOFSCRIPT
	#}
	ENDIF
	
	IF(sv_q != 0) THEN
	#{
		GOTO ENDOFSCRIPT
	#}
	ENDIF
	
	WHILE(sv_q == 0)
	#{
		LHBN.DATA.errorMsg = ""
		LHBN.DATA.errorFlg = "N"
		LHBN.DATA.foracid = ""
		LHBN.DATA.acid = ""	
		LHBN.DATA.solId = ""
		LHBN.DATA.foracid = BANCS.OUTPARAM.foracid
		PRINT(LHBN.DATA.foracid )
		LHBN.DATA.acid = BANCS.OUTPARAM.acid
		PRINT(LHBN.DATA.acid )
		LHBN.DATA.solId = BANCS.OUTPARAM.solId
		PRINT(LHBN.DATA.solId )
		
		#------------------------------------------------------------------------------------
		# Calling function to close Inactive SBA Account
		#------------------------------------------------------------------------------------
		LHBN.DATA.xferBalFlg ="N"
		LHBN.DATA.intCalcReqd = "N"	
		LHBN.DATA.tranType = ""	
		LHBN.DATA.transferForacid = ""	
		LHBN.DATA.xferAmt = ""	
		LHBN.DATA.cashCrncyCode = ""	
		LHBN.DATA.cashAmt = ""	
		LHBN.DATA.rptCode = ""	
		LHBN.DATA.cashTranRate = ""	
		LHBN.DATA.cashTranRateCode = ""	
		LHBN.DATA.cashTranTreaRate = ""	
		LHBN.DATA.cashTranTreaRefNum = ""	
		LHBN.DATA.xferTranRate = ""	
		LHBN.DATA.xferTranTreaRate = ""	
		LHBN.DATA.xferTranRateCode = ""	
		LHBN.DATA.xferTranTreaRefNum = ""	
		LHBN.DATA.closureReasonCode = ""	
		LHBN.DATA.closureReasonDesc = ""	
		LHBN.DATA.clsrNotes = ""	
		LHBN.DATA.clsPenaltyAmt = ""	
		
		lv_a = func_closeVerifyTxnAccount("LHBN","DATA")
		IF(lv_a == 0) THEN
		#{
			PRINT("Account Closed and Verfied Successfully")
			LHBN.DATA.errorFlg = "N"
			LHBN.DATA.errorMsg = ""
		#}
		ELSE
		#{
			PRINT(LHBN.DATA.errorMsg)
			LHBN.DATA.errorFlg = "Y"
		#}
		ENDIF
		
		PRINT(LHBN.DATA.errorMsg)			
		IF(LHBN.DATA.errorMsg == "") THEN
		#{
			LHBN.DATA.status = "SUCCESS"
		#}
		ELSE
		#{
			LHBN.DATA.status = "FAILURE"
		#}
		ENDIF
		PRINT(LHBN.DATA.status)
		
		#------------------------------------------------------------------------------------
		#       Writing data in the lst file
		#------------------------------------------------------------------------------------
		sv_l = RPAD(LHBN.DATA.solId,10)
		sv_l = sv_l + RPAD(LHBN.DATA.foracid,20)
		sv_l = sv_l + RPAD(LHBN.DATA.status,10)
		sv_l = sv_l + MID$(RPAD(LHBN.DATA.errorMsg,80),0,80)
		PRINT(sv_l)
		
		sv_t = urtn_fileWrite(LHBN.DATA.rpt_dataFileIndex +"|"+ sv_l)
		PRINT(sv_t)
		LHBN.DATA.acntCount	 = CINT(LHBN.DATA.acntCount) + 1
		PRINT(LHBN.DATA.acntCount)
		
		sv_q = urhk_dbCursorFetch(LHBN.DATA.cursorNo)
	#}
	DO
	sv_c = urhk_dbCursorClose(LHBN.DATA.cursorNo)
		
	GOTO RPT
		
	ENDOFSCRIPT:
		PRINT(LHBN.DATA.errorMsg)		
		#------------------------------------------------------------------------------------
		#       Writing data in the lst file
		#------------------------------------------------------------------------------------
		sv_l = MID$(RPAD(LHBN.DATA.errorMsg,80),0,80)
		PRINT(sv_l)
		
		sv_t = urtn_fileWrite(LHBN.DATA.rpt_dataFileIndex + "|" + sv_l)
		PRINT(sv_t)
		
	RPT:
		sv_a = urtn_fileWrite(LHBN.DATA.rpt_dataFileIndex + "|")
		LHBN.DATA.reportLine    = "NO. OF RECORDS PRINTED FOR THE REPORT : " + LHBN.DATA.acntCount
		sv_a = urtn_fileWrite(LHBN.DATA.rpt_dataFileIndex + "|" + LHBN.DATA.reportLine)
		sv_a = urtn_fileWrite(LHBN.DATA.rpt_dataFileIndex + "|")
		LHBN.DATA.reportLine    = "                                                 Confidential                                                              "
		sv_a = urtn_fileWrite(LHBN.DATA.rpt_dataFileIndex + "|" + LHBN.DATA.reportLine)
		LHBN.DATA.reportLine    = "--------------------------------------------E N D  O F  R E P O R T--------------------------------------------------------"
		sv_a = urtn_fileWrite(LHBN.DATA.rpt_dataFileIndex + "|" + LHBN.DATA.reportLine)
		
		#------------------------------------------------------------------------------------
		#       Closing the lst file
		#------------------------------------------------------------------------------------
		sv_c    = urtn_fileClose(LHBN.DATA.rpt_dataFileIndex)
		
		#------------------------------------------------------------------------------------
		# Pushing the report to the front end
		#------------------------------------------------------------------------------------		
		lv_r = func_pushReportToHPRB(LHBN.DATA.rptLst,"No Deposit SBA Account Closure Report")
		PRINT(lv_r)
		
		#------------------------------------------------------------------------------------
		# REPOSITORY AND CLASS DELETION
		#------------------------------------------------------------------------------------
		sub_deleteRepClassB("LHBN", "DATA")
		
		TRACE OFF
END-->
