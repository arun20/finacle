###############################################################################################
#    Name				: ormtrandet_insert.scr
#    Start Date			: 16-06-2018
#    Description			: Lodge Script for additional 8 Fields added in Transaction Tab
#    Input				:
#    Output				:
#    Author				: Surya Sneha Pulavarthy
#    Called Script			: SRV_LodgeInwRemittance_post_process_data.scr
#    Calling Script			: 
#    Reference			:
#    Modification History:
#    <Serial No.>	 <Date>			<Author Name>			<Description>
#     001		16-06-2018		Surya Sneha Pulavarthy		Initial Draft
################################################################################################
IMPORT LibCommonB001
IMPORT LibCommonB002
<--START

###################################################################################################
#	Start-	Initialize variables 
###################################################################################################
HIRM.CUSTOM.successOrFailure	=	"S"
HIRM.CUSTOM.tmpErrMessage		=	""
HIRM.CUSTOM.noOfRecords		=	"0"
HIRM.CUSTOM.slAcctId			=	""
HIRM.CUSTOM.slAcctName		=	""
HIRM.CUSTOM.slAcctBal		=	""
HIRM.CUSTOM.slCrncy  		= 	""
HIRM.CUSTOM.slAcctStatus		=	""
HIRM.CUSTOM.slPurpOfTxn 		= 	""
HIRM.CUSTOM.hslBillId		=	""
HIRM.CUSTOM.hslSrlNum		=	""
HIRM.CUSTOM.shlDelFlg		=	""
HIRM.CUSTOM.hslTranId		=	""
HIRM.CUSTOM.hslTranDate		=	""
HIRM.CUSTOM.hslSolId			=	""
HIRM.CUSTOM.hslTranType		=	""
HIRM.CUSTOM.hslAcid			=	""
HIRM.CUSTOM.hTranAmt			=	""
HIRM.CUSTOM.hslFreeText		=	""
HIRM.CUSTOM.slTranRemarks		=	""

CALLSCRIPTIFEXIST("ormtrandet_fetch_mrh.scr")

PRINT(HIRM.CUSTOM.noOfRecords)
###################################################################################################
#	STORE THE MULTIREC FIELDS IN CUSTOM REP
###################################################################################################
sv_m= 0
sv_c = 1
WHILE(sv_m < CINT(HIRM.CUSTOM.noOfRecords))
#{	
	print(sv_m)
	sv_b = FORMAT$(sv_m,"%d")
	print(sv_b)
	HIRM.CUSTOM.slAcctId			= ("HIRM").("CUSTOM").("slAcctId_"+sv_b)
	HIRM.CUSTOM.slAcctName		= ("HIRM").("CUSTOM").("slAcctName_"+sv_b)
	HIRM.CUSTOM.slAcctBal		= ("HIRM").("CUSTOM").("slAcctBal_"+sv_b)
	HIRM.CUSTOM.slCrncy  		= ("HIRM").("CUSTOM").("slCrncy_"+sv_b)
	HIRM.CUSTOM.slAcctStatus		= ("HIRM").("CUSTOM").("slAcctStatus_"+sv_b)
	HIRM.CUSTOM.slPurpOfTxn		= ("HIRM").("CUSTOM").("slPurpOfTxn_"+sv_b)
	HIRM.CUSTOM.slTranRemarks		= ("HIRM").("CUSTOM").("slTranRemarks_"+sv_b)
	HIRM.CUSTOM.hslSrlNum		= ("HIRM").("CUSTOM").("hslSrlNum_"+sv_b)
	HIRM.CUSTOM.shlDelFlg		= ("HIRM").("CUSTOM").("shlDelFlg_"+sv_b)
	HIRM.CUSTOM.hslTranId		= ("HIRM").("CUSTOM").("hslTranId_"+sv_b)
	HIRM.CUSTOM.hslTranDate		= ("HIRM").("CUSTOM").("hslTranDate_"+sv_b)
	HIRM.CUSTOM.hslTranType		= ("HIRM").("CUSTOM").("hslTranType_"+sv_b)
	HIRM.CUSTOM.hslAcid			= ("HIRM").("CUSTOM").("hslAcid_"+sv_b)
	HIRM.CUSTOM.hTranAmt			= ("HIRM").("CUSTOM").("hTranAmt_"+sv_b)
	
	#HIRM.CUSTOM.hslFreeText		= ("HIRM").("CUSTOM").("hslFreeText_"+sv_b)	
	
	PRINT(HIRM.CUSTOM.slAcctId)
	PRINT(HIRM.CUSTOM.slAcctName)
	PRINT(HIRM.CUSTOM.slAcctBal)
	PRINT(HIRM.CUSTOM.slCrncy)
	PRINT(HIRM.CUSTOM.slAcctStatus)
	PRINT(HIRM.CUSTOM.slPurpOfTxn)
	PRINT(HIRM.CUSTOM.slTranRemarks)
	PRINT(HIRM.CUSTOM.hslBillId)
	PRINT(HIRM.CUSTOM.hslSrlNum)
	PRINT(HIRM.CUSTOM.shlDelFlg)
	PRINT(HIRM.CUSTOM.hslTranId)
	PRINT(HIRM.CUSTOM.hslTranDate)
	PRINT(HIRM.CUSTOM.hslTranType)
	PRINT(HIRM.CUSTOM.hslAcid)
	PRINT(HIRM.CUSTOM.hTranAmt)
	#PRINT(HIRM.CUSTOM.hslFreeText)
	
	#-------------------------------------------
	#Converting amount to standard format
	#-------------------------------------------
	print(HIRM.CUSTOM.slAcctBal)
	BANCS.INPARAM.userFormatAmt = HIRM.CUSTOM.slAcctBal
	sv_u = urhk_convertAmountToStdFormat("")
	IF(sv_u == 0) THEN
	#{
		HIRM.CUSTOM.slAcctBal = BANCS.OUTPARAM.stdFormatAmt
	#}
	ENDIF
	print(HIRM.CUSTOM.slAcctBal)
	

	HIRM.CUSTOM.sysDate = func_getSysDateTimeWithFormatB("DD-MM-YYYY hh24:mi:ss") 

	
	#Check whether same tranid transrl num eixsts if so modify
	#-----------------------------------------------------------------------------------------------------------------------		
	#COUNT_RECORDS:
	#-----------------------------------------------------------------------------------------------------------------------
	sv_s = ""
	sv_s = sv_s + " count|SELECT COUNT(1)"
	sv_s = sv_s + " FROM CUSTOM.C_DTD_P_EXT "
	sv_s = sv_s + " WHERE  TRAN_ID = '" + HIRM.CUSTOM.hslTranId + "'"
	sv_s = sv_s + " AND TRAN_DATE = TO_DATE('" + HIRM.CUSTOM.hslTranDate + "','DD-MM-YYYY HH24:MI:SS')"
	sv_s = sv_s + " AND PART_TRAN_SRL_NUM = '"+ HIRM.CUSTOM.hslSrlNum+ "' "
	sv_s = sv_s + " AND BANK_ID = '"+ BANCS.STDIN.contextBankId+ "' "
	print(sv_s)
	sv_d = urhk_dbSelectWithBind(sv_s)
	print(sv_d)
	HIRM.CUSTOM.count = BANCS.OUTPARAM.count
	print(HIRM.CUSTOM.count)
	IF (sv_d != 0) THEN
	#{
		GOTO INSERT
	#}
	ELSE
	#{	
		HIRM.CUSTOM.count= BANCS.OUTPARAM.count
		print(HIRM.CUSTOM.count)
	#}
	ENDIF
	IF(CINT(HIRM.CUSTOM.count) == CINT("0"))THEN
	#{
		GOTO INSERT
	#}
	ELSE
	#{
		GOTO MODIFY
	#}
	ENDIF
	
	INSERT:
	#----------------------------------------------
	#Inserting values into the custom table
	#----------------------------------------------
	#Insert data into mod table only if delete flag =N
	IF(HIRM.CUSTOM.hslAcid != "")THEN
	#{
	IF(HIRM.CUSTOM.shlDelFlg != "Y")THEN
	#{

		sv_s = "INSERT INTO CUSTOM.C_DTD_P_EXT ("
		sv_s = sv_s +"ACID,TRAN_ID,TRAN_DATE,TRAN_AMT,PART_TRAN_SRL_NUM,PART_TRAN_TYPE,PSTD_FLG,PURPOSE_CODE,FREE_TEXT_1,FREE_TEXT_2,FREE_TEXT_3,FREE_TEXT_4,"
		sv_s = sv_s + "FREE_TEXT_5,ENTITY_CRE_FLG,DEL_FLG,LCHG_TIME,LCHG_USER_ID,RCRE_USER_ID,RCRE_TIME,BANK_ID,SL_REMARKS) VALUES ("
		sv_s = sv_s + "'"+HIRM.CUSTOM.hslAcid+"','" +HIRM.CUSTOM.hslTranId +"',TO_DATE('"+HIRM.CUSTOM.hslTranDate+"','DD-MM-YYYY HH24:MI:SS'),'"+HIRM.CUSTOM.hTranAmt +"','"+ HIRM.CUSTOM.hslSrlNum+"','"+ HIRM.CUSTOM.hslTranType + "','" +"N"+"','" + HIRM.CUSTOM.slPurpOfTxn + "','" + HIRM.CUSTOM.slAcctId + "','" +  HIRM.CUSTOM.slAcctName + "','" +  HIRM.CUSTOM.slAcctStatus + "','" + HIRM.CUSTOM.slCrncy +"|"+ HIRM.CUSTOM.slAcctBal + "','',"
		sv_s = sv_s  + "'N','N',TO_DATE('"+HIRM.CUSTOM.sysDate+"','DD-MM-YYYY HH24:MI:SS'),'"+ BANCS.STDIN.userId +"','"+ BANCS.STDIN.userId +"',TO_DATE('"+HIRM.CUSTOM.sysDate+"','DD-MM-YYYY HH24:MI:SS'),'" + BANCS.STDIN.contextBankId +"','"+HIRM.CUSTOM.slTranRemarks+"')"  
		print(sv_s)
		sv_a = urhk_dbSQLWithBind(sv_s)
		print(sv_a)
		if(sv_a == 0) then
		#{
			PRINT("SUCCESS")
		#}
		ELSE
		#{
			sv_z = "Custom Fields : Insertion Failed in C_DTD_P_EXT(ormtrandet_insert.scr)."
			sv_u = urhk_SRV_SetErr(sv_z)
			sv_u = urhk_setOrbOut("SuccessOrFailure|N")
			BANCS.OUTPUT.successOrFailure = "F"
			GOTO ENDOFSCRIPT

		#}
		ENDIF
		sv_c = sv_c +1
		print(sv_c)
		GOTO NEXTREC
	#}
	ENDIF
	
	#Mofify id exists
	MODIFY:
	
	IF(HIRM.CUSTOM.shlDelFlg != "Y")THEN
	#{

		sv_s = "UPDATE CUSTOM.C_DTD_P_EXT SET "
		sv_s = sv_s +" ACID='"+HIRM.CUSTOM.hslAcid+"',TRAN_AMT='"+HIRM.CUSTOM.hTranAmt+"',PART_TRAN_TYPE='"+HIRM.CUSTOM.hslTranType+"',PSTD_FLG='N',PURPOSE_CODE='"+HIRM.CUSTOM.slPurpOfTxn+"',FREE_TEXT_1='"+HIRM.CUSTOM.slAcctId+"',FREE_TEXT_2='"+HIRM.CUSTOM.slAcctName+"',"
		sv_s = sv_s + "FREE_TEXT_3='"+ HIRM.CUSTOM.slAcctStatus+"',FREE_TEXT_4='"+HIRM.CUSTOM.slCrncy +"|"+ HIRM.CUSTOM.slAcctBal+"',"
		sv_s = sv_s + "FREE_TEXT_5='',ENTITY_CRE_FLG='N',DEL_FLG='N',LCHG_TIME=TO_DATE('"+HIRM.CUSTOM.sysDate+"','DD-MM-YYYY HH24:MI:SS'),LCHG_USER_ID='"+BANCS.STDIN.userId+"',SL_REMARKS='"+HIRM.CUSTOM.slTranRemarks+"'"
		sv_s = sv_s + "WHERE "
		sv_s = sv_s + "TRAN_ID='"+HIRM.CUSTOM.hslTranId+"' AND TRAN_DATE = TO_DATE('"+HIRM.CUSTOM.hslTranDate+"','DD-MM-YYYY HH24:MI:SS') AND PART_TRAN_SRL_NUM = '"+HIRM.CUSTOM.hslSrlNum+"' AND BANK_ID ='"+BANCS.STDIN.contextBankId+"'"
		print(sv_s)
		sv_a = urhk_dbSQLWithBind(sv_s)
		print(sv_a)
		if(sv_a == 0) then
		#{
			PRINT("SUCCESS")
		#}
		ELSE
		#{
			sv_z = "Custom Fields : UPdation  Failed in C_DTD_P_EXT(ormtrandet_insert.scr)."
			sv_u = urhk_SRV_SetErr(sv_z)
			sv_u = urhk_setOrbOut("SuccessOrFailure|N")
			BANCS.OUTPUT.successOrFailure = "F"
			GOTO ENDOFSCRIPT

		#}
		ENDIF
		sv_c = sv_c +1
		print(sv_c)
		GOTO NEXTREC
	#}
	ENDIF
	
	
	#}
	ENDIF
	
	NEXTREC:
	sv_m = sv_m + 1
	#print(sv_m)
#}
DO

ENDOFSCRIPT:
EXITSCRIPT
END-->
